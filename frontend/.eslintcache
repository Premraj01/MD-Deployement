[{"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\index.js":"1","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Redux-Store\\store.js":"2","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\App.js":"3","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\themes\\index.js":"4","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\carReducers.js":"5","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\adminReducer.js":"6","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\expenseReducers.js":"7","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\Layout\\LayoutReducer.js":"8","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\driverReducers.js":"9","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\journeyReducers.js":"10","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Layout\\Layout.js":"11","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\error\\Error.js":"12","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\login\\Login.js":"13","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\themes\\default.js":"14","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\driverConstants.js":"15","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\adminConstants.js":"16","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\journeyConstants.js":"17","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\Layout\\LayoutConstants.js":"18","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\expenseConstants.js":"19","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\carConstants.js":"20","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\login\\styles.js":"21","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\adminActions.js":"22","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\appConstants.js":"23","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\error\\styles.js":"24","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Edit\\EditMaintenance.js":"25","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\MaintenanceList.js":"26","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Add\\AddMaintenance.js":"27","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\fuel\\FuelHistory.js":"28","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\expenses\\ExpenseList.js":"29","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\History\\CarsHistory.js":"30","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Edit\\EditCarForm1.js":"31","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Edit\\EditCarForm2.js":"32","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Add\\AddCarForm2.js":"33","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\CarsList.js":"34","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Add\\AddCarForm1.js":"35","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Layout\\styles.js":"36","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\DriversList.js":"37","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\History\\DriversHistory.js":"38","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\Edit\\EditDriverForm.js":"39","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\Add\\AddDriverForm.js":"40","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\expenseActions.js":"41","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\expenses\\ExpenseTable.js":"42","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\History\\HistoryTable.js":"43","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Services\\DateFormate.js":"44","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\charts\\Charts.js":"45","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maps\\Maps.js":"46","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\dashboard\\Dashboard.js":"47","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\Sidebar.js":"48","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Header\\Header.js":"49","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\icons\\Icons.js":"50","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\carActions.js":"51","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\PageTitle\\PageTitle.js":"52","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Widget\\Widget.js":"53","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\CarForm\\CarEditFormSteps.js":"54","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Wrappers\\Wrappers.js":"55","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\CarForm\\CarFormSteps.js":"56","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\CarsTable.js":"57","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\dashboard\\styles.js":"58","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\driverActions.js":"59","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\AssignCar\\AssignCar.js":"60","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Notification\\Notification.js":"61","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\History\\HistoryTable.js":"62","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\journeyActions.js":"63","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\icons\\styles.js":"64","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Header\\styles.js":"65","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\styles.js":"66","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maps\\styles.js":"67","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\DriversTable.js":"68","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Widget\\styles.js":"69","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\Layout\\LayoutActions.js":"70","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\charts\\components\\ApexHeatmap.js":"71","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\charts\\components\\ApexLineChart.js":"72","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\PageTitle\\styles.js":"73","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\fuel\\FuelHistoryTable.js":"74","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Add\\CalculateCost.js":"75","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\MaintenanceTable.js":"76","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Add\\AddMaintenanceType.js":"77","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js":"78","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\dashboard\\components\\journeyTable\\JourneyTable.js":"79","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Edit\\EditMaintenanceType.js":"80","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\UserAvatar\\UserAvatar.js":"81","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Notification\\styles.js":"82","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\UserAvatar\\styles.js":"83","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\components\\Dot.js":"84","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js":"85"},{"size":766,"mtime":1653593763998,"results":"86","hashOfConfig":"87"},{"size":2175,"mtime":1655513535245,"results":"88","hashOfConfig":"87"},{"size":2434,"mtime":1655514957856,"results":"89","hashOfConfig":"87"},{"size":534,"mtime":1653401335965,"results":"90","hashOfConfig":"87"},{"size":4962,"mtime":1655411992081,"results":"91","hashOfConfig":"87"},{"size":552,"mtime":1653596312222,"results":"92","hashOfConfig":"87"},{"size":1457,"mtime":1654285667875,"results":"93","hashOfConfig":"87"},{"size":399,"mtime":1653593284240,"results":"94","hashOfConfig":"87"},{"size":2150,"mtime":1654554888667,"results":"95","hashOfConfig":"87"},{"size":1757,"mtime":1654547188602,"results":"96","hashOfConfig":"87"},{"size":6049,"mtime":1655414198562,"results":"97","hashOfConfig":"87"},{"size":1626,"mtime":1653401335941,"results":"98","hashOfConfig":"87"},{"size":8914,"mtime":1655514555792,"results":"99","hashOfConfig":"87"},{"size":3127,"mtime":1653401335965,"results":"100","hashOfConfig":"87"},{"size":803,"mtime":1654554344967,"results":"101","hashOfConfig":"87"},{"size":216,"mtime":1653596185350,"results":"102","hashOfConfig":"87"},{"size":762,"mtime":1653940785850,"results":"103","hashOfConfig":"87"},{"size":49,"mtime":1653592386938,"results":"104","hashOfConfig":"87"},{"size":804,"mtime":1654285478486,"results":"105","hashOfConfig":"87"},{"size":1923,"mtime":1655246544186,"results":"106","hashOfConfig":"87"},{"size":3281,"mtime":1653401335952,"results":"107","hashOfConfig":"87"},{"size":1174,"mtime":1655513248199,"results":"108","hashOfConfig":"87"},{"size":652,"mtime":1654373388065,"results":"109","hashOfConfig":"87"},{"size":1395,"mtime":1653401335943,"results":"110","hashOfConfig":"87"},{"size":14687,"mtime":1655531737992,"results":"111","hashOfConfig":"87"},{"size":9697,"mtime":1655411966339,"results":"112","hashOfConfig":"87"},{"size":12187,"mtime":1655424356442,"results":"113","hashOfConfig":"87"},{"size":10821,"mtime":1655411958143,"results":"114","hashOfConfig":"87"},{"size":7854,"mtime":1654807482136,"results":"115","hashOfConfig":"87"},{"size":8108,"mtime":1654852103095,"results":"116","hashOfConfig":"87"},{"size":25193,"mtime":1655324177463,"results":"117","hashOfConfig":"87"},{"size":28470,"mtime":1655324442884,"results":"118","hashOfConfig":"87"},{"size":26685,"mtime":1655321082827,"results":"119","hashOfConfig":"87"},{"size":2543,"mtime":1655337034164,"results":"120","hashOfConfig":"87"},{"size":21743,"mtime":1655324960382,"results":"121","hashOfConfig":"87"},{"size":710,"mtime":1653401335909,"results":"122","hashOfConfig":"87"},{"size":3712,"mtime":1655328533603,"results":"123","hashOfConfig":"87"},{"size":7909,"mtime":1654848711169,"results":"124","hashOfConfig":"87"},{"size":33108,"mtime":1655250414531,"results":"125","hashOfConfig":"87"},{"size":25383,"mtime":1655328181145,"results":"126","hashOfConfig":"87"},{"size":3562,"mtime":1654373488854,"results":"127","hashOfConfig":"87"},{"size":10228,"mtime":1654888257399,"results":"128","hashOfConfig":"87"},{"size":4578,"mtime":1654806390349,"results":"129","hashOfConfig":"87"},{"size":379,"mtime":1654562501937,"results":"130","hashOfConfig":"87"},{"size":5790,"mtime":1653401335931,"results":"131","hashOfConfig":"87"},{"size":1010,"mtime":1653401335953,"results":"132","hashOfConfig":"87"},{"size":10800,"mtime":1655411951786,"results":"133","hashOfConfig":"87"},{"size":4152,"mtime":1655019881401,"results":"134","hashOfConfig":"87"},{"size":10194,"mtime":1655752095049,"results":"135","hashOfConfig":"87"},{"size":391433,"mtime":1653401335948,"results":"136","hashOfConfig":"87"},{"size":7828,"mtime":1655415917155,"results":"137","hashOfConfig":"87"},{"size":447,"mtime":1653401335911,"results":"138","hashOfConfig":"87"},{"size":2673,"mtime":1653600636147,"results":"139","hashOfConfig":"87"},{"size":1509,"mtime":1655320719425,"results":"140","hashOfConfig":"87"},{"size":3971,"mtime":1653401335926,"results":"141","hashOfConfig":"87"},{"size":1324,"mtime":1655239322179,"results":"142","hashOfConfig":"87"},{"size":14035,"mtime":1655407908342,"results":"143","hashOfConfig":"87"},{"size":4798,"mtime":1655406898877,"results":"144","hashOfConfig":"87"},{"size":3870,"mtime":1655411997266,"results":"145","hashOfConfig":"87"},{"size":7836,"mtime":1655326720026,"results":"146","hashOfConfig":"87"},{"size":3399,"mtime":1655335468360,"results":"147","hashOfConfig":"87"},{"size":4589,"mtime":1654888329264,"results":"148","hashOfConfig":"87"},{"size":3776,"mtime":1655334403666,"results":"149","hashOfConfig":"87"},{"size":812,"mtime":1653401335949,"results":"150","hashOfConfig":"87"},{"size":4043,"mtime":1653401335908,"results":"151","hashOfConfig":"87"},{"size":1363,"mtime":1653401335919,"results":"152","hashOfConfig":"87"},{"size":178,"mtime":1653401335955,"results":"153","hashOfConfig":"87"},{"size":13010,"mtime":1655329092578,"results":"154","hashOfConfig":"87"},{"size":1015,"mtime":1653401335925,"results":"155","hashOfConfig":"87"},{"size":186,"mtime":1655411944459,"results":"156","hashOfConfig":"87"},{"size":1909,"mtime":1653401335933,"results":"157","hashOfConfig":"87"},{"size":1396,"mtime":1653401335933,"results":"158","hashOfConfig":"87"},{"size":482,"mtime":1653401335914,"results":"159","hashOfConfig":"87"},{"size":8589,"mtime":1655410573937,"results":"160","hashOfConfig":"87"},{"size":1371,"mtime":1654969273104,"results":"161","hashOfConfig":"87"},{"size":12538,"mtime":1655414331394,"results":"162","hashOfConfig":"87"},{"size":3379,"mtime":1655418877778,"results":"163","hashOfConfig":"87"},{"size":4589,"mtime":1653401335915,"results":"164","hashOfConfig":"87"},{"size":11468,"mtime":1655515177560,"results":"165","hashOfConfig":"87"},{"size":3573,"mtime":1655421730677,"results":"166","hashOfConfig":"87"},{"size":620,"mtime":1653401335920,"results":"167","hashOfConfig":"87"},{"size":1040,"mtime":1653401335911,"results":"168","hashOfConfig":"87"},{"size":291,"mtime":1653401335922,"results":"169","hashOfConfig":"87"},{"size":902,"mtime":1653401335915,"results":"170","hashOfConfig":"87"},{"size":1474,"mtime":1653401335915,"results":"171","hashOfConfig":"87"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"2tqvjq",{"filePath":"175","messages":"176","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"174"},{"filePath":"178","messages":"179","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"174"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"185","messages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"187","messages":"188","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"191","messages":"192","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"193","messages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"174"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"202","usedDeprecatedRules":"174"},{"filePath":"203","messages":"204","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"205","messages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"207","messages":"208","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"209","messages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"211","messages":"212","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"217","messages":"218","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"219","messages":"220","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"221","messages":"222","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"223","messages":"224","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"225","messages":"226","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"174"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"174"},{"filePath":"231","messages":"232","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"233","messages":"234","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"235","usedDeprecatedRules":"174"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"238","usedDeprecatedRules":"174"},{"filePath":"239","messages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241","usedDeprecatedRules":"174"},{"filePath":"242","messages":"243","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"174"},{"filePath":"245","messages":"246","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"174"},{"filePath":"248","messages":"249","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"174"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"255","usedDeprecatedRules":"174"},{"filePath":"256","messages":"257","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"258","messages":"259","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"174"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"174"},{"filePath":"264","messages":"265","errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"174"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269","usedDeprecatedRules":"174"},{"filePath":"270","messages":"271","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"272","usedDeprecatedRules":"174"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"174"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"174"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"281","messages":"282","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"283","messages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"174"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"290","usedDeprecatedRules":"174"},{"filePath":"291","messages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"293","messages":"294","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"295","messages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"297","messages":"298","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"299","messages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301","usedDeprecatedRules":"174"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"304","usedDeprecatedRules":"174"},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"309","usedDeprecatedRules":"174"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"312","usedDeprecatedRules":"174"},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"317","messages":"318","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"319","usedDeprecatedRules":"174"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"174"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"327","usedDeprecatedRules":"174"},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"338","usedDeprecatedRules":"174"},{"filePath":"339","messages":"340","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"341","messages":"342","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"355","usedDeprecatedRules":"174"},{"filePath":"356","messages":"357","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"358","messages":"359","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"360","messages":"361","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"362","usedDeprecatedRules":"174"},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"174"},"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\index.js",[],["375","376"],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Redux-Store\\store.js",["377"],"import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport { adminLoginReducer } from \"../Reducers/adminReducer\";\r\nimport { LayoutReducer } from \"../Reducers/Layout/LayoutReducer\";\r\nimport {\r\n  journeyDetailsReducer,\r\n  journeyListReducer,\r\n  journeyUpdateReducers,\r\n} from \"../Reducers/journeyReducers\";\r\nimport {\r\n  carListReducer,\r\n  carDetailsReducer,\r\n  carReadingReducer,\r\n  carAddMaintenanceReducer,\r\n  carUpdateReducer,\r\n  carRegisterReducer,\r\n  carFormReducer,\r\n  carMaintenanceDetailsReducer,\r\n  carUpdateMaintenanceReducer,\r\n} from \"../Reducers/carReducers\";\r\nimport {\r\n  driverDetailsReducer,\r\n  driverRegisterReducer,\r\n  driversListReducer,\r\n  driverUpdateReducers,\r\n} from \"../Reducers/driverReducers\";\r\nimport {\r\n  expenseListReducer,\r\n  updateDepartmentReducer,\r\n} from \"../Reducers/expenseReducers\";\r\n\r\nconst reducer = combineReducers({\r\n  adminLogin: adminLoginReducer,\r\n  journeyList: journeyListReducer,\r\n  journeyDetails: journeyDetailsReducer,\r\n  journeyUpdate: journeyUpdateReducers,\r\n  driversList: driversListReducer,\r\n  driverRegister: driverRegisterReducer,\r\n  driverDetails: driverDetailsReducer,\r\n  driverUpdate: driverUpdateReducers,\r\n  carRegister: carRegisterReducer,\r\n  carList: carListReducer,\r\n  carDetails: carDetailsReducer,\r\n  carReading: carReadingReducer,\r\n  carUpdate: carUpdateReducer,\r\n  carAddMaintenance: carAddMaintenanceReducer,\r\n  carForm: carFormReducer,\r\n  carMaintenanceDetails: carMaintenanceDetailsReducer,\r\n  carUpdateMaintenance: carUpdateMaintenanceReducer,\r\n  expenseList: expenseListReducer,\r\n  updateDepartment: updateDepartmentReducer,\r\n  layout: LayoutReducer,\r\n  adminLogin: adminLoginReducer,\r\n});\r\n\r\nconst adminInfoFromStorage = localStorage.getItem(\"adminInfo\")\r\n  ? JSON.parse(localStorage.getItem(\"adminInfo\"))\r\n  : null;\r\n\r\nconst initialState = {\r\n  adminLogin: {\r\n    adminInfo: adminInfoFromStorage,\r\n  },\r\n};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\nexport default store;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\App.js",["378","379","380"],"import React, { useEffect, useState } from \"react\";\r\nimport { HashRouter, Route, Switch, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\n// components\r\nimport Layout from \"./Layout\";\r\n\r\n// pages\r\nimport Error from \"../pages/error\";\r\nimport Login from \"../pages/login\";\r\n\r\n// context\r\n// import { useUserState } from \"../context/UserContext\";\r\n\r\nexport default function App() {\r\n  // global\r\n  // var { isAuthenticated } = useUserState();\r\n  // const [isAuthenticated, setIsAuth] = useState(false);\r\n  // const adminLogin = useSelector((state) => state.adminLogin);\r\n  // const { adminInfo } = adminLogin;\r\n  // console.log(adminInfo);\r\n  // if (adminInfo) {\r\n  //   setIsAuth(true);\r\n  // } else {\r\n  //   setIsAuth(false);\r\n  // }\r\n  let admin = JSON.parse(localStorage.getItem(\"adminInfo\"));\r\n  let isAuthenticated;\r\n  if (admin) {\r\n    isAuthenticated = true;\r\n    console.log(\"ss\", isAuthenticated);\r\n  } else {\r\n    isAuthenticated = false;\r\n  }\r\n  // useEffect(() => {\r\n\r\n  // }, [isAuthenticated]);\r\n\r\n  return (\r\n    <HashRouter>\r\n      <Switch>\r\n        <Route exact path=\"/\" render={() => <Redirect to=\"/app/dashboard\" />} />\r\n        <Route\r\n          exact\r\n          path=\"/app\"\r\n          render={() => <Redirect to=\"/app/dashboard\" />}\r\n        />\r\n        <PrivateRoute path=\"/app\" component={Layout} />\r\n        <PublicRoute path=\"/login\" component={Login} />\r\n        <Route component={Error} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n\r\n  // #######################################################################\r\n\r\n  function PrivateRoute({ component, ...rest }) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={(props) =>\r\n          isAuthenticated ? (\r\n            React.createElement(component, props)\r\n          ) : (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/login\",\r\n                state: {\r\n                  from: props.location,\r\n                },\r\n              }}\r\n            />\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n\r\n  function PublicRoute({ component, ...rest }) {\r\n    return (\r\n      <Route\r\n        {...rest}\r\n        render={(props) =>\r\n          isAuthenticated ? (\r\n            <Redirect\r\n              to={{\r\n                pathname: \"/\",\r\n              }}\r\n            />\r\n          ) : (\r\n            React.createElement(component, props)\r\n          )\r\n        }\r\n      />\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\themes\\index.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\carReducers.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\adminReducer.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\expenseReducers.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\Layout\\LayoutReducer.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\driverReducers.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Reducers\\journeyReducers.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Layout\\Layout.js",["381","382","383"],"import React from \"react\";\r\nimport { Route, Switch, Redirect, withRouter } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport { Box, IconButton, Link } from \"@material-ui/core\";\r\nimport Icon from \"@mdi/react\";\r\n\r\n//icons\r\nimport {\r\n  mdiFacebook as FacebookIcon,\r\n  mdiTwitter as TwitterIcon,\r\n  mdiGithub as GithubIcon,\r\n} from \"@mdi/js\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport Header from \"../Header\";\r\nimport Sidebar from \"../Sidebar\";\r\n\r\n// pages\r\nimport Dashboard from \"../../pages/dashboard\";\r\nimport Maps from \"../../pages/maps\";\r\n// import Tables from \"../../pages/tables\";\r\nimport Icons from \"../../pages/icons\";\r\nimport Charts from \"../../pages/charts\";\r\nimport DriversList from \"../../pages/drivers/DriversList\";\r\nimport AddDriver from \"../../pages/drivers/Add/AddDriverForm\";\r\nimport EditDriver from \"../../pages/drivers/Edit/EditDriverForm\";\r\nimport DriversHistory from \"../../pages/drivers/History/DriversHistory\";\r\nimport CarsList from \"../../pages/cars/CarsList\";\r\nimport AddCarForm1 from \"../../pages/cars/Add/AddCarForm1\";\r\nimport AddCarForm2 from \"../../pages/cars/Add/AddCarForm2\";\r\nimport EditCarForm1 from \"../../pages/cars/Edit/EditCarForm1\";\r\nimport EditCarForm2 from \"../../pages/cars/Edit/EditCarForm2\";\r\nimport ExpenseList from \"../../pages/expenses/ExpenseList\";\r\nimport FuelHistory from \"../../pages/fuel/FuelHistory\";\r\nimport CarsHistory from \"../../pages/cars/History/CarsHistory\";\r\nimport MaintenanceList from \"../../pages/maintenance/MaintenanceList\";\r\nimport AddMaintenance from \"../../pages/maintenance/Add/AddMaintenance\";\r\nimport EditMaintenance from \"../../pages/maintenance/Edit/EditMaintenance\";\r\n\r\n// context\r\n// import { useLayoutState } from \"../../context/LayoutContext\";\r\n\r\nfunction Layout(props) {\r\n  var classes = useStyles();\r\n\r\n  // global\r\n  // var layoutState = useLayoutState();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <>\r\n        <Header history={props.history} />\r\n        <Sidebar />\r\n        <div\r\n          className={classnames(classes.content, {\r\n            [classes.contentShift]: true,\r\n          })}\r\n        >\r\n          <div className={classes.fakeToolbar} />\r\n          <Switch>\r\n            <Route path=\"/app/dashboard\" component={Dashboard} exact />\r\n            <Route\r\n              exact\r\n              path=\"/app/drivers\"\r\n              render={() => <Redirect to=\"/app/drivers/list\" />}\r\n            />\r\n            <Route path=\"/app/drivers/list\" component={DriversList} exact />\r\n            <Route path=\"/app/drivers/add\" component={AddDriver} exact />\r\n            <Route\r\n              path=\"/app/drivers/history/:id\"\r\n              component={DriversHistory}\r\n              exact\r\n            />\r\n            <Route path=\"/app/drivers/edit/:id\" component={EditDriver} exact />\r\n\r\n            <Route\r\n              exact\r\n              path=\"/app/cars\"\r\n              render={() => <Redirect to=\"/app/cars/list\" />}\r\n            />\r\n            <Route path=\"/app/cars/list\" component={CarsList} exact />\r\n            <Route path=\"/app/cars/add\" component={AddCarForm1} exact />\r\n            <Route path=\"/app/cars/add/step2\" component={AddCarForm2} exact />\r\n            <Route path=\"/app/cars/history/:id\" component={CarsHistory} exact />\r\n            <Route path=\"/app/cars/edit/:id\" component={EditCarForm1} exact />\r\n            <Route path=\"/app/cars/edit2/:id\" component={EditCarForm2} exact />\r\n            <Route path=\"/app/expenses\" component={ExpenseList} />\r\n            <Route path=\"/app/fuelhistory\" component={FuelHistory} />\r\n            <Route\r\n              path=\"/app/carmaintenance\"\r\n              component={MaintenanceList}\r\n              exact\r\n            />\r\n            <Route\r\n              path=\"/app/carMaintenance/add/:carId\"\r\n              component={AddMaintenance}\r\n              exact\r\n            />\r\n            <Route\r\n              path=\"/app/carMaintenance/edit/:carId/:maintenanceId\"\r\n              component={EditMaintenance}\r\n              exact\r\n            />\r\n          </Switch>\r\n          <Box\r\n            mt={5}\r\n            width={\"100%\"}\r\n            display={\"flex\"}\r\n            alignItems={\"center\"}\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <div>\r\n              <Link\r\n                color={\"primary\"}\r\n                href={\"https://flatlogic.com/\"}\r\n                target={\"_blank\"}\r\n                className={classes.link}\r\n              >\r\n                Flatlogic\r\n              </Link>\r\n              <Link\r\n                color={\"primary\"}\r\n                href={\"https://flatlogic.com/about\"}\r\n                target={\"_blank\"}\r\n                className={classes.link}\r\n              >\r\n                About Us\r\n              </Link>\r\n              <Link\r\n                color={\"primary\"}\r\n                href={\"https://flatlogic.com/blog\"}\r\n                target={\"_blank\"}\r\n                className={classes.link}\r\n              >\r\n                Blog\r\n              </Link>\r\n            </div>\r\n            <div>\r\n              <Link\r\n                href={\"https://www.facebook.com/flatlogic\"}\r\n                target={\"_blank\"}\r\n              >\r\n                <IconButton aria-label=\"facebook\">\r\n                  <Icon path={FacebookIcon} size={1} color=\"#6E6E6E99\" />\r\n                </IconButton>\r\n              </Link>\r\n              <Link href={\"https://twitter.com/flatlogic\"} target={\"_blank\"}>\r\n                <IconButton aria-label=\"twitter\">\r\n                  <Icon path={TwitterIcon} size={1} color=\"#6E6E6E99\" />\r\n                </IconButton>\r\n              </Link>\r\n              <Link href={\"https://github.com/flatlogic\"} target={\"_blank\"}>\r\n                <IconButton aria-label=\"github\" style={{ marginRight: -12 }}>\r\n                  <Icon path={GithubIcon} size={1} color=\"#6E6E6E99\" />\r\n                </IconButton>\r\n              </Link>\r\n            </div>\r\n          </Box>\r\n        </div>\r\n      </>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(Layout);\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\error\\Error.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\login\\Login.js",["384","385","386","387","388"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  CircularProgress,\r\n  Typography,\r\n  Button,\r\n  Tabs,\r\n  Tab,\r\n  TextField,\r\n  Fade,\r\n} from \"@material-ui/core\";\r\nimport { useHistory, withRouter } from \"react-router-dom\";\r\nimport classnames from \"classnames\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// logo\r\nimport logo from \"./logo.svg\";\r\nimport google from \"../../images/google.svg\";\r\n\r\n// context\r\nimport { login } from \"../../Actions/adminActions\";\r\n\r\nfunction Login(props) {\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const [isAuthenticated, setIsAuth] = useState(false);\r\n\r\n  // global\r\n  // var userDispatch = useUserDispatch();\r\n\r\n  // local\r\n  var [isLoading, setIsLoading] = useState(false);\r\n  var [error, setError] = useState(null);\r\n  var [activeTabId, setActiveTabId] = useState(0);\r\n  var [nameValue, setNameValue] = useState(\"\");\r\n  var [mobileNumber, setMobileNumber] = useState(\"\");\r\n  var [password, setPasswordValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    let admin = JSON.parse(localStorage.getItem(\"adminInfo\"));\r\n    console.log(admin);\r\n    if (admin) {\r\n      history.push(\"/app/dashboard\");\r\n    } else {\r\n      history.push(\"/login\");\r\n    }\r\n  }, [history]);\r\n\r\n  return (\r\n    <Grid container className={classes.container}>\r\n      <div className={classes.logotypeContainer}>\r\n        <img src={logo} alt=\"logo\" className={classes.logotypeImage} />\r\n        <Typography className={classes.logotypeText}>Material Admin</Typography>\r\n      </div>\r\n      <div className={classes.formContainer}>\r\n        <div className={classes.form}>\r\n          <Tabs\r\n            value={activeTabId}\r\n            onChange={(e, id) => setActiveTabId(id)}\r\n            indicatorColor=\"primary\"\r\n            textColor=\"primary\"\r\n            centered\r\n          >\r\n            <Tab label=\"Login\" classes={{ root: classes.tab }} />\r\n            <Tab label=\"New User\" classes={{ root: classes.tab }} />\r\n          </Tabs>\r\n          {activeTabId === 0 && (\r\n            <React.Fragment>\r\n              <Typography variant=\"h1\" className={classes.greeting}>\r\n                Good Morning, User\r\n              </Typography>\r\n              <Button size=\"large\" className={classes.googleButton}>\r\n                <img src={google} alt=\"google\" className={classes.googleIcon} />\r\n                &nbsp;Sign in with Google\r\n              </Button>\r\n              <div className={classes.formDividerContainer}>\r\n                <div className={classes.formDivider} />\r\n                <Typography className={classes.formDividerWord}>or</Typography>\r\n                <div className={classes.formDivider} />\r\n              </div>\r\n              <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Something is wrong with your login or password :(\r\n                </Typography>\r\n              </Fade>\r\n              <TextField\r\n                id=\"email\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={mobileNumber}\r\n                onChange={(e) => setMobileNumber(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Mobile Number\"\r\n                type=\"number\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={password}\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n              />\r\n              <div className={classes.formButtons}>\r\n                {isLoading ? (\r\n                  <CircularProgress size={26} className={classes.loginLoader} />\r\n                ) : (\r\n                  <Button\r\n                    disabled={\r\n                      mobileNumber.length === 0 || password.length === 0\r\n                    }\r\n                    onClick={() => dispatch(login(mobileNumber, password))}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"large\"\r\n                  >\r\n                    Login\r\n                  </Button>\r\n                )}\r\n                <Button\r\n                  color=\"primary\"\r\n                  size=\"large\"\r\n                  className={classes.forgetButton}\r\n                >\r\n                  Forget Password\r\n                </Button>\r\n              </div>\r\n            </React.Fragment>\r\n          )}\r\n          {activeTabId === 1 && (\r\n            <React.Fragment>\r\n              <Typography variant=\"h1\" className={classes.greeting}>\r\n                Welcome!\r\n              </Typography>\r\n              <Typography variant=\"h2\" className={classes.subGreeting}>\r\n                Create your account\r\n              </Typography>\r\n              <Fade in={error}>\r\n                <Typography color=\"secondary\" className={classes.errorMessage}>\r\n                  Something is wrong with your login or password :(\r\n                </Typography>\r\n              </Fade>\r\n              <TextField\r\n                id=\"name\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={nameValue}\r\n                onChange={(e) => setNameValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Full Name\"\r\n                type=\"text\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"mobile\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={mobileNumber}\r\n                onChange={(e) => setMobileNumber(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Mobile Number\"\r\n                type=\"number\"\r\n                fullWidth\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                InputProps={{\r\n                  classes: {\r\n                    underline: classes.textFieldUnderline,\r\n                    input: classes.textField,\r\n                  },\r\n                }}\r\n                value={password}\r\n                onChange={(e) => setPasswordValue(e.target.value)}\r\n                margin=\"normal\"\r\n                placeholder=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n              />\r\n              <div className={classes.creatingButtonContainer}>\r\n                {isLoading ? (\r\n                  <CircularProgress size={26} />\r\n                ) : (\r\n                  <Button\r\n                    onClick={() => login(mobileNumber, password)}\r\n                    size=\"large\"\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    fullWidth\r\n                    className={classes.createAccountButton}\r\n                  >\r\n                    Create your account\r\n                  </Button>\r\n                )}\r\n              </div>\r\n              <div className={classes.formDividerContainer}>\r\n                <div className={classes.formDivider} />\r\n                <Typography className={classes.formDividerWord}>or</Typography>\r\n                <div className={classes.formDivider} />\r\n              </div>\r\n              <Button\r\n                size=\"large\"\r\n                className={classnames(\r\n                  classes.googleButton,\r\n                  classes.googleButtonCreating,\r\n                )}\r\n              >\r\n                <img src={google} alt=\"google\" className={classes.googleIcon} />\r\n                &nbsp;Sign in with Google\r\n              </Button>\r\n            </React.Fragment>\r\n          )}\r\n        </div>\r\n        <Typography color=\"primary\" className={classes.copyright}>\r\n          © 2014-{new Date().getFullYear()}{\" \"}\r\n          <a\r\n            style={{ textDecoration: \"none\", color: \"inherit\" }}\r\n            href=\"https://flatlogic.com\"\r\n            rel=\"noopener noreferrer\"\r\n            target=\"_blank\"\r\n          >\r\n            Flatlogic\r\n          </a>\r\n          , LLC. All rights reserved.\r\n        </Typography>\r\n      </div>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withRouter(Login);\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\themes\\default.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\driverConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\adminConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\journeyConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\Layout\\LayoutConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\expenseConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\carConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\login\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\adminActions.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\constants\\appConstants.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\error\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Edit\\EditMaintenance.js",["389","390","391","392","393","394","395","396","397","398","399","400","401","402","403","404","405"],"import { Divider, Grid, Paper, Snackbar } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Modal, Box, Chip } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useStyle from \"../../dashboard/styles\";\r\nimport { Button, Stack, TextField } from \"@mui/material\";\r\nimport {\r\n  AddCircle as AddIcon,\r\n  CloseRounded as CloseIcon,\r\n  BackupRounded as SubmitIcon,\r\n  Save as SaveIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nimport PageTitle from \"../../../components/PageTitle\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\nimport EditMaintenanceType from \"./EditMaintenanceType\";\r\nimport {\r\n  getCarDetails,\r\n  getCarMaintenance,\r\n  updateMaintenance,\r\n} from \"../../../Actions/carActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport CalculateCost from \"../Add/CalculateCost\";\r\nimport Notification from \"../../../components/Notification/Notification\";\r\nimport AddMaintenanceType from \"../Add/AddMaintenanceType\";\r\nimport { CAR_UPDATE_MAINTENANCE_RESET } from \"../../../constants/carConstants\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n  pl: 4,\r\n  pr: 4,\r\n  pb: 4,\r\n};\r\n\r\nconst EditMaintenance = () => {\r\n  const classes = useStyle();\r\n  const [position] = useState({\r\n    vertical: \"top\",\r\n    horizontal: \"right\",\r\n  });\r\n  const { vertical, horizontal } = position;\r\n  const dispatch = useDispatch();\r\n  const { carId, maintenanceId } = useParams();\r\n  const [date, setDate] = useState(\"\");\r\n  const [modalMaintenance, setModalMaintenance] = useState({});\r\n  const [maintenanceTypeModal, setMaintenanceTypeModal] = useState(false);\r\n  const [maintenanceEditTypeModal, setMaintenanceEditTypeModal] = useState(\r\n    false,\r\n  );\r\n  const [paymentMode, setPaymentMode] = useState(\"\");\r\n  const [servicingCenterName, setServicingCenterName] = useState(\"\");\r\n  const [reading, setReading] = useState(\"\");\r\n  const [invoiceNumber, setInvoiceNumber] = useState(\"\");\r\n  const [CGST, setCGST] = useState(\"\");\r\n  const [SGST, setSGST] = useState(\"\");\r\n  //   const [maintenanceArr, setMaintenanceArr] = useState([]);\r\n  const [maintenanceTypes, setMaintenanceTypes] = useState([]);\r\n  const [amountAddition, setAmountAddition] = useState(0);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [success, setSuccess] = useState(false);\r\n  const [totalAmount, setTotalAmount] = useState(0);\r\n\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const {\r\n    loading: carDetailsLoading,\r\n    error: carDetailsError,\r\n    car,\r\n  } = carDetails;\r\n\r\n  const carMaintenanceDetails = useSelector(\r\n    (state) => state.carMaintenanceDetails,\r\n  );\r\n  const {\r\n    loading: carMaintenanceDetailsLoading,\r\n    error: carMaintenanceDetailsError,\r\n    maintenance: maintenanceObj,\r\n  } = carMaintenanceDetails;\r\n\r\n  const carUpdateMaintenance = useSelector(\r\n    (state) => state.carUpdateMaintenance,\r\n  );\r\n  const {\r\n    loading: carUpdateMaintenanceLoading,\r\n    error: carUpdateMaintenanceError,\r\n    success: successUpdate,\r\n  } = carUpdateMaintenance;\r\n\r\n  useEffect(() => {\r\n    if (successUpdate) {\r\n      setShowToast(true);\r\n      setSuccess(true);\r\n      console.log(\"Maintenance Updated Successfully..!!\");\r\n      setMessage(\"Maintenance Updated Successfully..!!\");\r\n      dispatch({ type: CAR_UPDATE_MAINTENANCE_RESET });\r\n    } else if (carUpdateMaintenanceError) {\r\n      setSuccess(false);\r\n      setMessage(carUpdateMaintenanceError);\r\n    } else {\r\n      if (!car.carName || car._id !== carId) {\r\n        dispatch(getCarDetails(carId));\r\n        dispatch(getCarMaintenance(carId, maintenanceId));\r\n      } else {\r\n        setDate(maintenanceObj.date);\r\n        setServicingCenterName(maintenanceObj.servicingCenterName);\r\n        setReading(maintenanceObj.reading);\r\n        setInvoiceNumber(maintenanceObj.invoiceNumber);\r\n        setMaintenanceTypes(maintenanceObj.maintenances);\r\n        setSGST(maintenanceObj.SGST);\r\n        setCGST(maintenanceObj.CGST);\r\n        setPaymentMode(maintenanceObj.paymentMode);\r\n      }\r\n    }\r\n    setAmountAddition(\r\n      maintenanceTypes?.reduce((acc, cur) => acc + Number(cur.basicAmount), 0),\r\n    );\r\n  }, [dispatch, maintenanceObj, successUpdate]);\r\n\r\n  const calculatedAmount = (amount) => {\r\n    setTotalAmount(amount);\r\n  };\r\n\r\n  const maintenance = (list) => {\r\n    setMaintenanceTypes([...maintenanceTypes, list]);\r\n  };\r\n\r\n  const removeMaintenance = (m) => {\r\n    setMaintenanceTypes(maintenanceTypes.filter((main) => main !== m));\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    dispatch(\r\n      updateMaintenance(carId, maintenanceId, {\r\n        date,\r\n        reading,\r\n        servicingCenterName,\r\n        invoiceNumber,\r\n        maintenances: maintenanceTypes,\r\n        CGST,\r\n        SGST,\r\n        paymentMode,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Edit Maintenance\" />\r\n      <Paper>\r\n        <></>\r\n        <Grid\r\n          container\r\n          justify=\"center\"\r\n          alignItems=\"center\"\r\n          style={{ padding: \"10px\" }}\r\n        >\r\n          <Typography variant=\"h4\">\r\n            Selected Car:{\" \"}\r\n            <span\r\n              style={{\r\n                color: \"green\",\r\n              }}\r\n            >{`${car?.carName}-${car?.carNumber}`}</span>{\" \"}\r\n          </Typography>\r\n        </Grid>\r\n        <form style={{ padding: \"10px\" }} onSubmit={updateHandler}>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Maintenance Date\"\r\n                    renderInput={(params) => <TextField {...params} required />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={date}\r\n                    onChange={(newValue) => {\r\n                      setDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"servicing-center\"\r\n                  name=\"servicing\"\r\n                  label=\"Servicing Center\"\r\n                  type=\"text\"\r\n                  value={servicingCenterName}\r\n                  onChange={(e) => setServicingCenterName(e.target.value)}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"reading\"\r\n                  name=\"reading\"\r\n                  label=\"Reading\"\r\n                  type=\"number\"\r\n                  value={reading}\r\n                  onChange={(e) => setReading(e.target.value)}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  // error\r\n                  id=\"invoice-number\"\r\n                  name=\"invoice\"\r\n                  label=\"Invoice Number\"\r\n                  type=\"text\"\r\n                  value={invoiceNumber}\r\n                  onChange={(e) => setInvoiceNumber(e.target.value)}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Divider />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={2}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                startIcon={<AddIcon />}\r\n                onClick={() => {\r\n                  setMaintenanceTypeModal(true);\r\n                }}\r\n                disabled={!date}\r\n              >\r\n                ADD\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Stack direction=\"row\" spacing={2}>\r\n              {maintenanceTypes?.map((m) => {\r\n                return (\r\n                  <Chip\r\n                    style={{ margin: \"8px\" }}\r\n                    // deleteIcon={<TbEditCircle />}\r\n                    label={`${m.type}-${m.basicAmount}`}\r\n                    variant=\"outlined\"\r\n                    color=\"error\"\r\n                    onDelete={() => removeMaintenance(m)}\r\n                  />\r\n                );\r\n              })}\r\n            </Stack>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Divider />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  // error\r\n                  id=\"cgst\"\r\n                  name=\"CGST\"\r\n                  label=\"CGST\"\r\n                  type=\"number\"\r\n                  value={CGST}\r\n                  onChange={(e) => setCGST(e.target.value)}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  // error\r\n                  id=\"sgst\"\r\n                  name=\"SGST\"\r\n                  label=\"SGST\"\r\n                  type=\"number\"\r\n                  value={SGST}\r\n                  onChange={(e) => setSGST(e.target.value)}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  // error\r\n                  id=\"payment-mode\"\r\n                  name=\"payment\"\r\n                  label=\"Payment Mode\"\r\n                  value={paymentMode}\r\n                  onChange={(e) => setPaymentMode(e.target.value)}\r\n                  type=\"text\"\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Divider />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={12}>\r\n              {\" \"}\r\n              Total Amount:\r\n              <CalculateCost\r\n                SGST={SGST}\r\n                CGST={CGST}\r\n                basicAmount={amountAddition}\r\n                totalAmount={totalAmount}\r\n                calculatedAmount={calculatedAmount}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={12}>\r\n              <Divider />\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ padding: \"10px\" }}\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<SaveIcon />}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n      <Modal\r\n        open={maintenanceTypeModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"flex-end\"\r\n          >\r\n            <Grid item xs={10}></Grid>\r\n            <Grid item xs={1}>\r\n              <Typography\r\n                style={{\r\n                  margin: \"6px\",\r\n                  fontWidth: \"bold\",\r\n                }}\r\n              >\r\n                <CloseIcon\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => setMaintenanceTypeModal(false)}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <AddMaintenanceType maintenance={maintenance} />\r\n            </Grid>\r\n          </Grid>{\" \"}\r\n        </Box>\r\n      </Modal>{\" \"}\r\n      <Modal\r\n        open={maintenanceEditTypeModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"flex-end\"\r\n          >\r\n            <Grid item xs={10}></Grid>\r\n            <Grid item xs={1}>\r\n              <Typography\r\n                style={{\r\n                  margin: \"6px\",\r\n                  fontWidth: \"bold\",\r\n                }}\r\n              >\r\n                <CloseIcon\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => setMaintenanceEditTypeModal(false)}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <EditMaintenanceType maintenance={maintenance} />\r\n            </Grid>\r\n          </Grid>{\" \"}\r\n        </Box>\r\n      </Modal>{\" \"}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditMaintenance;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\MaintenanceList.js",["406","407"],"import {\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Select,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport Widget from \"../../components/Widget/Widget\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCarDetails, getCarList } from \"../../Actions/carActions\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { AiOutlineFileAdd } from \"react-icons/ai\";\r\nimport {\r\n  CloudDownload as DownloadIcon,\r\n  AddCircle as AddIcon,\r\n} from \"@material-ui/icons\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\nimport moment from \"moment\";\r\nimport { dateFormate } from \"../../Services/DateFormate\";\r\nimport MaintenanceTable from \"./MaintenanceTable\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst MaintenanceList = () => {\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [carMaintenanceTypes, setCarMaintenanceTypes] = useState([]);\r\n\r\n  const carList = useSelector((state) => state.carList);\r\n  const { cars, loading } = carList;\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const { car } = carDetails;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n    searchMaintenance();\r\n  }, [dispatch, car, startDate, endDate]);\r\n\r\n  const searchMaintenance = () => {\r\n    if (startDate !== null && endDate !== null) {\r\n      let carArr = [];\r\n      // let start = moment(startDate).subtract(1, \"days\");\r\n      let end = moment(endDate).add(1, \"days\");\r\n      car?.carMaintenance.forEach((fuel) => {\r\n        if (dateFormate(startDate) <= dateFormate(fuel.date)) {\r\n          if (dateFormate(end) >= dateFormate(fuel.date)) {\r\n            carArr.push(fuel);\r\n          }\r\n        }\r\n      });\r\n      setCarMaintenanceTypes(carArr);\r\n    } else {\r\n      setCarMaintenanceTypes(car?.carMaintenance);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Maintenance List\" />\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid item xs={4}></Grid>\r\n        <Grid item xs={4}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={12}>\r\n              <FormControl\r\n                style={{\r\n                  width: \"210px\",\r\n                }}\r\n                variant=\"outlined\"\r\n              >\r\n                <InputLabel id=\"select-label\">\r\n                  <em>Choose Car</em>\r\n                </InputLabel>\r\n                <Select\r\n                  labelId=\"select-label\"\r\n                  label=\"Choose Car\"\r\n                  onChange={(e) => {\r\n                    dispatch(getCarDetails(e.target.value));\r\n                  }}\r\n                  autoWidth\r\n                >\r\n                  <MenuItem value=\"\">\r\n                    <em>Choose Car</em>\r\n                  </MenuItem>\r\n                  {cars.map((c) => {\r\n                    return (\r\n                      <MenuItem value={c._id} key={c._id}>\r\n                        {c.carName + \"-\" + c.carNumber}\r\n                      </MenuItem>\r\n                    );\r\n                  })}\r\n                </Select>\r\n              </FormControl>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item xs={4}></Grid>\r\n        {carMaintenanceTypes?.length > 0 ? (\r\n          <>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                marginTop: \"2%\",\r\n              }}\r\n            >\r\n              <Widget\r\n                style={{\r\n                  height: \"500px\",\r\n                }}\r\n                header={\r\n                  <div className={classes.mainChartHeader}>\r\n                    <div className={classes.mainChartHeaderLabels}>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <div>\r\n                          <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                            <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                              <DatePicker\r\n                                label=\"Start Date\"\r\n                                renderInput={(params) => (\r\n                                  <TextField {...params} />\r\n                                )}\r\n                                inputFormat=\"dd/MM/yyyy\"\r\n                                clearable={true}\r\n                                value={startDate}\r\n                                onChange={(newValue) => {\r\n                                  setStartDate(newValue);\r\n                                }}\r\n                              />\r\n                            </Stack>\r\n                          </LocalizationProvider>\r\n                        </div>\r\n                      </div>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                          <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                            <DatePicker\r\n                              label=\"End Date\"\r\n                              minDate={startDate}\r\n                              renderInput={(params) => (\r\n                                <TextField {...params} />\r\n                              )}\r\n                              clearable={true}\r\n                              value={endDate}\r\n                              inputFormat=\"dd/MM/yyyy\"\r\n                              onChange={(newValue) => {\r\n                                setEndDate(newValue);\r\n                              }}\r\n                            />\r\n                          </Stack>\r\n                        </LocalizationProvider>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className={classes.mainChartHeaderLabels}>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <div>\r\n                          <Link\r\n                            to={`/app/carMaintenance/add/${car._id}`}\r\n                            style={{\r\n                              textDecoration: \"none\",\r\n                            }}\r\n                          >\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              color=\"primary\"\r\n                              startIcon={<AddIcon />}\r\n                            >\r\n                              ADD MAINTENANCE\r\n                            </Button>\r\n                          </Link>\r\n                        </div>\r\n                      </div>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <></>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                }\r\n                upperTitle\r\n                noBodyPadding\r\n                // bodyClass={classes.tableWidget}\r\n              >\r\n                <MaintenanceTable\r\n                  maintenanceList={carMaintenanceTypes}\r\n                  car={car}\r\n                  loading={loading}\r\n                />\r\n              </Widget>\r\n            </Grid>\r\n          </>\r\n        ) : (\r\n          <>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                marginTop: \"2%\",\r\n              }}\r\n            >\r\n              {Object.keys(car).length !== 0 ? (\r\n                <Widget\r\n                  upperTitle\r\n                  noBodyPadding\r\n                  // bodyClass={classes.tableWidget}\r\n                >\r\n                  <Paper sx={{ width: \"100%\", overflow: \"hidden\" }}>\r\n                    <Grid\r\n                      container\r\n                      direction=\"column\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid item xs={12}>\r\n                        <AiOutlineFileAdd size={100} />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid\r\n                      container\r\n                      direction=\"column\"\r\n                      justify=\"center\"\r\n                      alignItems=\"center\"\r\n                      style={{\r\n                        paddingBottom: \"4px\",\r\n                      }}\r\n                    >\r\n                      <Grid item xs={12}>\r\n                        <Typography>\r\n                          {\" \"}\r\n                          No maintenances! Please add some maintenances{\" \"}\r\n                          <Link\r\n                            to={`/app/carMaintenance/add/${car._id}`}\r\n                            style={{\r\n                              textDecoration: \"none\",\r\n                            }}\r\n                          >\r\n                            {\" \"}\r\n                            <Button variant=\"text\" color=\"primary\">\r\n                              Add Maintenance\r\n                            </Button>{\" \"}\r\n                          </Link>\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Paper>\r\n                </Widget>\r\n              ) : (\r\n                <></>\r\n              )}\r\n            </Grid>\r\n          </>\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MaintenanceList;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Add\\AddMaintenance.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\fuel\\FuelHistory.js",["408","409","410","411","412","413","414","415","416"],"import {\r\n  FormControl,\r\n  Grid,\r\n  IconButton,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport moment from \"moment\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport fs from \"file-saver\";\r\nimport {\r\n  getCarDetails,\r\n  getCarList,\r\n  getCarReading,\r\n} from \"../../Actions/carActions\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport { CloudDownload as DownloadIcon } from \"@material-ui/icons\";\r\nimport FuelHistoryTable from \"./FuelHistoryTable\";\r\nimport Widget from \"../../components/Widget/Widget\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { Modal, Stack, TextField } from \"@mui/material\";\r\nimport { dateFormate, displayDateFormate } from \"../../Services/DateFormate\";\r\nimport { Workbook } from \"exceljs\";\r\n\r\nconst FuelHistory = () => {\r\n  var classes = useStyles();\r\n  const [selectCar, setSelectCar] = useState(\"\");\r\n  const [carFuel, setCarFuel] = useState([]);\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n\r\n  var [isSearchOpen, setSearchOpen] = useState(true);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const carList = useSelector((state) => state.carList);\r\n  const { cars, loading } = carList;\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const { car } = carDetails;\r\n  const carReading = useSelector((state) => state.carReading);\r\n  const { reading } = carReading;\r\n\r\n  //   const deleteFuel = useSelector((state) => state.deleteFuel);\r\n  //   const { success: deleteSuccess } = deleteFuel;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n    searchMaintenance();\r\n  }, [dispatch, selectCar, car, endDate, startDate]);\r\n\r\n  const exportToCsv = () => {\r\n    let workbook = new Workbook();\r\n    let totalAmount = 0;\r\n    let totalFuel = 0;\r\n    carFuel.map((car) => {\r\n      totalAmount = totalAmount + car.amount;\r\n      totalFuel = totalFuel + car.quantity;\r\n    });\r\n    let title = `${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\"Fuel Maintenance \"}`;\r\n    let subTitle = `${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\"Fuel Maintenance for\"} ${\r\n      car?.carName\r\n    }-${car?.carNumber}`;\r\n    let headers = [\"Date\", \" \", \"Reading\", \"Amount\", \"Fuel Qty(liter)\"];\r\n    // Convert users data to a csv\r\n    let usersCsv = carFuel?.reduce((acc, car, i) => {\r\n      acc.push([\r\n        `${displayDateFormate(car?.date)}`,\r\n        ` `,\r\n        `${car?.reading}`,\r\n        `${car?.amount}`,\r\n        `${car?.quantity}`,\r\n      ]);\r\n      return acc;\r\n    }, []);\r\n    let workSheet = workbook.addWorksheet(\"Fuel Data\");\r\n    let titleRow = workSheet.addRow([title]);\r\n    titleRow.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 12,\r\n      bold: true,\r\n    };\r\n    let headerDescription = workSheet.addRow([subTitle]);\r\n    headerDescription.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 8,\r\n    };\r\n    workSheet.addRow([]);\r\n    let headerRow = workSheet.addRow(headers);\r\n    headerRow.eachCell((cell, number) => {\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFFFFF00\" },\r\n        bgColor: { argb: \"FF0000FF\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n    const dateCol = workSheet.getColumn(1);\r\n    dateCol.width = 15;\r\n    usersCsv.forEach((d) => {\r\n      let row = workSheet.addRow(d);\r\n      let qty = row.getCell(5);\r\n    });\r\n    let footerTotal = [\r\n      \" \",\r\n      \"Total\",\r\n      \"\",\r\n      `${totalAmount}`,\r\n      `${totalFuel.toFixed(2)}`,\r\n    ];\r\n    let footerStart = [\r\n      \" \",\r\n      \"\",\r\n      \"\",\r\n      \"Start Km\",\r\n      `${reading?.readings?.startReading}`,\r\n    ];\r\n    let footerEnd = [\" \", \"\", \"\", \"End Km\", `${reading?.readings?.endReading}`];\r\n    let footerTotalReading = [\r\n      \" \",\r\n      \"\",\r\n      \"\",\r\n      \"Total Reading\",\r\n      `${reading?.readings?.endReading - reading?.readings?.startReading}`,\r\n    ];\r\n\r\n    let footerAvg = [\r\n      \" \",\r\n      \"\",\r\n      \"\",\r\n      \"Average\",\r\n      `${(\r\n        (reading?.readings?.endReading - reading?.readings?.startReading) /\r\n        totalFuel\r\n      ).toFixed(2)}`,\r\n    ];\r\n    workSheet.addRow(footerTotal);\r\n    workSheet.addRow([]);\r\n    workSheet.addRow(footerStart);\r\n    workSheet.addRow(footerEnd);\r\n    workSheet.addRow(footerTotalReading);\r\n    workSheet.addRow(footerAvg);\r\n    workbook.xlsx.writeBuffer().then((data) => {\r\n      let blob = new Blob([data], {\r\n        type:\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      });\r\n      fs.saveAs(\r\n        blob,\r\n        `${car?.carName}-${car?.carNumber}_Maintenance_History.xlsx`,\r\n      );\r\n    });\r\n  };\r\n\r\n  const sortFuelByDate = () => {\r\n    carFuel?.sort((a, b) => {\r\n      return moment(b?.date, \"DD-MM-YYYY\").diff(moment(a?.date, \"DD-MM-YYYY\"));\r\n    });\r\n  };\r\n\r\n  const searchMaintenance = () => {\r\n    if (startDate !== null && endDate !== null) {\r\n      let start = moment(startDate).subtract(1, \"days\");\r\n      let carArr = [];\r\n      car?.fuelMaintenance.forEach((fuel) => {\r\n        if (dateFormate(start) <= dateFormate(fuel.date)) {\r\n          if (dateFormate(endDate) >= dateFormate(fuel.date)) {\r\n            carArr.push(fuel);\r\n          }\r\n        }\r\n      });\r\n\r\n      setCarFuel(carArr);\r\n      sortFuelByDate();\r\n    } else {\r\n      setCarFuel(car?.fuelMaintenance);\r\n      sortFuelByDate();\r\n    }\r\n    dispatch(\r\n      getCarReading(dateFormate(startDate), dateFormate(endDate), car._id),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Fuel History\" />\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid xs={4}></Grid>\r\n        <Grid xs={4}>\r\n          <FormControl\r\n            style={{\r\n              width: \"210px\",\r\n            }}\r\n            variant=\"outlined\"\r\n            autoWidth\r\n          >\r\n            <InputLabel id=\"select-label\">\r\n              <em>Choose Car</em>\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"select-label\"\r\n              label=\"Choose Car\"\r\n              onChange={(e) => {\r\n                dispatch(getCarDetails(e.target.value));\r\n              }}\r\n              autoWidth\r\n            >\r\n              <MenuItem value=\"\">\r\n                <em>Choose Car</em>\r\n              </MenuItem>\r\n              {cars.map((c) => {\r\n                return (\r\n                  <MenuItem value={c._id} key={c._id}>\r\n                    {c.carName + \"-\" + c.carNumber}\r\n                  </MenuItem>\r\n                );\r\n              })}\r\n            </Select>\r\n          </FormControl>\r\n        </Grid>\r\n        <Grid xs={4}></Grid>\r\n        {\r\n          car?.fuelMaintenance?.length > 0 && (\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              style={{\r\n                marginTop: \"2%\",\r\n              }}\r\n            >\r\n              <Widget\r\n                style={{\r\n                  height: \"500px\",\r\n                }}\r\n                header={\r\n                  <div className={classes.mainChartHeader}>\r\n                    <div className={classes.mainChartHeaderLabels}>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <div>\r\n                          <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                            <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                              <DatePicker\r\n                                label=\"Start Date\"\r\n                                renderInput={(params) => (\r\n                                  <TextField {...params} />\r\n                                )}\r\n                                inputFormat=\"dd/MM/yyyy\"\r\n                                clearable={true}\r\n                                value={startDate}\r\n                                onChange={(newValue) => {\r\n                                  setStartDate(newValue);\r\n                                }}\r\n                              />\r\n                            </Stack>\r\n                          </LocalizationProvider>\r\n                        </div>\r\n                      </div>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                          <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                            <DatePicker\r\n                              label=\"End Date\"\r\n                              minDate={startDate}\r\n                              renderInput={(params) => (\r\n                                <TextField {...params} />\r\n                              )}\r\n                              clearable={true}\r\n                              value={endDate}\r\n                              inputFormat=\"dd/MM/yyyy\"\r\n                              onChange={(newValue) => {\r\n                                setEndDate(newValue);\r\n                                searchMaintenance();\r\n                              }}\r\n                            />\r\n                          </Stack>\r\n                        </LocalizationProvider>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className={classes.mainChartHeaderLabels}>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <div>\r\n                          <IconButton\r\n                            onClick={exportToCsv}\r\n                            disabled={endDate ? false : true}\r\n                          >\r\n                            <DownloadIcon />\r\n                          </IconButton>\r\n                        </div>\r\n                      </div>\r\n                      <div className={classes.mainChartHeaderLabel}>\r\n                        <></>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                }\r\n                upperTitle\r\n                noBodyPadding\r\n                // bodyClass={classes.tableWidget}\r\n              >\r\n                {carFuel?.length > 0 && (\r\n                  <FuelHistoryTable\r\n                    carFuel={carFuel}\r\n                    loading={loading}\r\n                    car={car}\r\n                  />\r\n                )}\r\n              </Widget>\r\n            </Grid>\r\n          )\r\n          // <FuelHistoryTable car={car} />\r\n        }\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default FuelHistory;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\expenses\\ExpenseList.js",["417","418"],"import React, { useEffect, useState } from \"react\";\r\nimport fs from \"file-saver\";\r\nimport moment from \"moment\";\r\nimport { Search as SearchIcon } from \"@material-ui/icons\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport classNames from \"classnames\";\r\nimport { Workbook } from \"exceljs\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport Widget from \"../../components/Widget/Widget\";\r\nimport { Grid, IconButton, InputBase } from \"@material-ui/core\";\r\nimport ExpenseTable from \"./ExpenseTable\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\nimport { LocalizationProvider, DatePicker } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { CloudDownload as DownloadIcon } from \"@material-ui/icons\";\r\nimport { dateFormate, displayDateFormate } from \"../../Services/DateFormate\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getExpense } from \"../../Actions/expenseActions\";\r\n\r\nconst ExpenseList = () => {\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  var [isSearchOpen, setSearchOpen] = useState(false);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n\r\n  const expenseList = useSelector((state) => state.expenseList);\r\n  const { loading, expenses } = expenseList;\r\n\r\n  const updateDepartment = useSelector((state) => state.updateDepartment);\r\n  const { success } = updateDepartment;\r\n\r\n  useEffect(() => {\r\n    dispatch(getExpense(keyword));\r\n  }, [dispatch, keyword]);\r\n\r\n  const exportToCsv = () => {\r\n    let workbook = new Workbook();\r\n    let title = `${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"}${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\"Driver Expenses\"}${\" \"}`;\r\n\r\n    let headers = [\r\n      \"Driver\",\r\n      \"Date\",\r\n      \"Expense Type\",\r\n      \"Department\",\r\n      \"Expense Amount\",\r\n    ];\r\n\r\n    let usersCsv = expenses?.reduce((acc, ex, i) => {\r\n      if (ex.status === \"accepted\") {\r\n        acc.push([\r\n          `${ex.driver.firstName} ${ex.driver.lastName}`,\r\n          `${displayDateFormate(ex.date)}`,\r\n          `${ex.expenseType.toString().replace(\",\", \" \")}`, // `${ex.expenseType}`,,\r\n          `${ex.department === \"\" ? \"-\" : ex.department}`,\r\n          `${ex.expenseAmount}`,\r\n        ]);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    let workSheet = workbook.addWorksheet(\"Expense Data\");\r\n\r\n    let titleRow = workSheet.addRow([title]);\r\n    titleRow.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 12,\r\n      bold: true,\r\n    };\r\n\r\n    workSheet.addRow([]);\r\n\r\n    const driverCol = workSheet.getColumn(1);\r\n    const dateCol = workSheet.getColumn(2);\r\n    const tripCol = workSheet.getColumn(3);\r\n    const departmentCol = workSheet.getColumn(4);\r\n\r\n    driverCol.width = 20;\r\n    dateCol.width = 15;\r\n    tripCol.width = 30;\r\n    departmentCol.width = 30;\r\n\r\n    let headerRow = workSheet.addRow(headers);\r\n    headerRow.eachCell((cell, number) => {\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFFFFF00\" },\r\n        bgColor: { argb: \"FF0000FF\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n\r\n    usersCsv.forEach((d) => {\r\n      let row = workSheet.addRow(d);\r\n      let qty = row.getCell(5);\r\n    });\r\n\r\n    workbook.xlsx.writeBuffer().then((data) => {\r\n      let blob = new Blob([data], {\r\n        type:\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      });\r\n      fs.saveAs(blob, `Expense_List.xlsx`);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Expenses List\" />\r\n      <Grid item xs={12}>\r\n        <Widget\r\n          style={{\r\n            height: \"800px\",\r\n          }}\r\n          header={\r\n            <div className={classes.mainChartHeader}>\r\n              <div className={classes.mainChartHeaderLabels}>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <div>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                      <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                        <DatePicker\r\n                          label=\"Start Date\"\r\n                          renderInput={(params) => <TextField {...params} />}\r\n                          inputFormat=\"dd/MM/yyyy\"\r\n                          clearable={true}\r\n                          value={startDate}\r\n                          onChange={(newValue) => {\r\n                            setStartDate(newValue);\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </LocalizationProvider>\r\n                  </div>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                      <DatePicker\r\n                        label=\"End Date\"\r\n                        minDate={startDate}\r\n                        renderInput={(params) => <TextField {...params} />}\r\n                        clearable={true}\r\n                        value={endDate}\r\n                        inputFormat=\"dd/MM/yyyy\"\r\n                        onChange={(newValue) => {\r\n                          setEndDate(newValue);\r\n                          dispatch(\r\n                            getExpense(\r\n                              \"\",\r\n                              dateFormate(startDate),\r\n                              dateFormate(moment(newValue).add(1, \"days\")),\r\n                            ),\r\n                          );\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                  </LocalizationProvider>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={classes.mainChartHeaderLabels}>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <div\r\n                    className={classNames(classes.search, {\r\n                      [classes.searchFocused]: isSearchOpen,\r\n                    })}\r\n                  >\r\n                    <div\r\n                      className={classNames(classes.searchIcon, {\r\n                        [classes.searchIconOpened]: isSearchOpen,\r\n                      })}\r\n                      onClick={() => setSearchOpen(!isSearchOpen)}\r\n                    >\r\n                      <SearchIcon classes={{ root: classes.headerIcon }} />\r\n                    </div>\r\n                    <InputBase\r\n                      placeholder=\"Search by Driver…\"\r\n                      value={keyword}\r\n                      onChange={(e) => setKeyword(e.target.value)}\r\n                      classes={{\r\n                        root: classes.inputRoot,\r\n                        input: classes.inputInput,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <IconButton onClick={exportToCsv}>\r\n                      <DownloadIcon />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <></>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          upperTitle\r\n          noBodyPadding\r\n          // bodyClass={classes.tableWidget}\r\n        >\r\n          <ExpenseTable expenses={expenses} loading={loading} />\r\n        </Widget>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpenseList;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\History\\CarsHistory.js",["419","420","421","422","423","424"],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Workbook } from \"exceljs\";\r\nimport useStyles from \"../../dashboard/styles\";\r\nimport fs from \"file-saver\";\r\nimport { getCarDetails } from \"../../../Actions/carActions\";\r\nimport { getJourneyDetails } from \"../../../Actions/journeyActions\";\r\nimport { dateFormate, displayDateFormate } from \"../../../Services/DateFormate\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\nimport { Grid, IconButton } from \"@material-ui/core\";\r\nimport Widget from \"../../../components/Widget/Widget\";\r\nimport { CloudDownload as DownloadIcon } from \"@material-ui/icons\";\r\nimport { DatePicker, LocalizationProvider } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\nimport moment from \"moment\";\r\nimport HistoryTable from \"./HistoryTable\";\r\n\r\nconst CarsHistory = () => {\r\n  const { id } = useParams();\r\n\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  var [isSearchOpen, setSearchOpen] = useState(true);\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const journeyDetails = useSelector((state) => state.journeyDetails);\r\n  const { loading, journeys } = journeyDetails;\r\n\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const { loading: carLoading, car } = carDetails;\r\n\r\n  useState(() => {\r\n    dispatch(getJourneyDetails(id));\r\n    dispatch(getCarDetails(id));\r\n  }, [journeys, id]);\r\n\r\n  const exportToCsv = (e) => {\r\n    e.preventDefault();\r\n    let workbook = new Workbook();\r\n    let title = `${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"}   ${\"Movement of Vehicle\"} ${\r\n      journeys[0]?.car.carName\r\n    }-${journeys[0]?.car.carNumber}`;\r\n\r\n    // `${\" \"},${\" \"},${\"Agrawwaal Telecomm Services Kasba Peth Pune-411011\"} `,\r\n\r\n    // Headers for each column\r\n    let headers = [\r\n      \"sr.No\",\r\n      \"Date\",\r\n      \"Journey Description\",\r\n      \"Start ODM Reading(KM)\",\r\n      \"End ODM Reading(KM)\",\r\n      \"Total Day Km Running(KM)\",\r\n      \"Start Time\",\r\n      \"End Time\",\r\n      \"Total Hours\",\r\n      \"Officer Signature\",\r\n    ];\r\n\r\n    // Convert users data to a csv\r\n    let usersCsv = journeys.reduce((acc, journey, i) => {\r\n      const {\r\n        journeyDate,\r\n        startReading,\r\n        endReading,\r\n        status,\r\n        startDestination,\r\n      } = journey.journey;\r\n\r\n      if (status !== \"pending\" && status !== \"rejected\") {\r\n        acc.push([\r\n          `${i + 1}`,\r\n          `${displayDateFormate(journeyDate)}`,\r\n          `${startDestination.replace(/,/g, \" \").trim()}`,\r\n          `${startReading}`,\r\n          `${endReading}`,\r\n          `${endReading - startReading}`,\r\n          10,\r\n          8,\r\n          10,\r\n        ]);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    let totalKM = journeys.reduce(\r\n      (acc, j) => acc + (j.journey.endReading - j.journey.startReading),\r\n      0,\r\n    );\r\n\r\n    // let reading = [\r\n    // \t`${\" \"}`,\r\n    // \t`${\" \"}`,\r\n    // \t`${\" \"}`,\r\n    // \t`${\" \"}`,\r\n    // \t`${\"Total Running:\"} ${totalReading}`,\r\n    // ];\r\n\r\n    let workSheet = workbook.addWorksheet(\"CarHistory Data\");\r\n\r\n    let titleRow = workSheet.addRow([title]);\r\n    titleRow.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 12,\r\n      bold: true,\r\n    };\r\n\r\n    let headerRow = workSheet.addRow(headers);\r\n    headerRow.eachCell((cell, number) => {\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFFFFF00\" },\r\n        bgColor: { argb: \"FF0000FF\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n\r\n    usersCsv.forEach((d) => {\r\n      workSheet.addRow(d);\r\n    });\r\n    workSheet.addRow([]);\r\n\r\n    workSheet.addRow([\"\", \"\", \"\", \"\", \"Total KM\", `${totalKM}`]);\r\n\r\n    workSheet.mergeCells(\"A4:B5\");\r\n    const dateCol = workSheet.getColumn(2);\r\n    const tripCol = workSheet.getColumn(3);\r\n\r\n    dateCol.width = 15;\r\n    tripCol.width = 40;\r\n\r\n    workbook.xlsx.writeBuffer().then((data) => {\r\n      let blob = new Blob([data], {\r\n        type:\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      });\r\n      fs.saveAs(\r\n        blob,\r\n        `${journeys[0]?.car.carName}-${journeys[0]?.car.carNumber}_Trips.xlsx`,\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title={`${car.carName}-${car.carNumber}'s History`} />\r\n      <Grid item xs={12}>\r\n        <Widget\r\n          style={{\r\n            height: \"800px\",\r\n          }}\r\n          header={\r\n            <>\r\n              <div className={classes.mainChartHeader}>\r\n                <div className={classes.mainChartHeaderLabels}>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <div>\r\n                      <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                        <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                          <DatePicker\r\n                            label=\"Start Date\"\r\n                            renderInput={(params) => <TextField {...params} />}\r\n                            inputFormat=\"dd/MM/yyyy\"\r\n                            clearable={true}\r\n                            value={startDate}\r\n                            onChange={(newValue) => {\r\n                              setStartDate(newValue);\r\n                            }}\r\n                          />\r\n                        </Stack>\r\n                      </LocalizationProvider>\r\n                    </div>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                      <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                        <DatePicker\r\n                          label=\"End Date\"\r\n                          minDate={startDate}\r\n                          renderInput={(params) => <TextField {...params} />}\r\n                          clearable={true}\r\n                          value={endDate}\r\n                          inputFormat=\"dd/MM/yyyy\"\r\n                          onChange={(newValue) => {\r\n                            setEndDate(newValue);\r\n                            dispatch(\r\n                              getJourneyDetails(\r\n                                id,\r\n                                \"\",\r\n                                dateFormate(startDate),\r\n                                dateFormate(moment(newValue).add(1, \"days\")),\r\n                                // dateFormate(moment(newValue).add(2, \"days\")),\r\n                              ),\r\n                            );\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </LocalizationProvider>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className={classes.mainChartHeaderLabels}>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <div>\r\n                      <IconButton onClick={exportToCsv}>\r\n                        <DownloadIcon />\r\n                      </IconButton>\r\n                    </div>\r\n                  </div>\r\n                  <div className={classes.mainChartHeaderLabel}>\r\n                    <></>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </>\r\n          }\r\n          upperTitle\r\n          noBodyPadding\r\n          // bodyClass={classes.tableWidget}\r\n        >\r\n          <HistoryTable\r\n            journeys={journeys}\r\n            car={car}\r\n            loading={loading}\r\n            carLoading={carLoading}\r\n          />\r\n        </Widget>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CarsHistory;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Edit\\EditCarForm1.js",["425","426","427","428","429","430","431","432","433","434","435","436","437","438","439"],"import { Button, Grid } from \"@material-ui/core\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Box,\r\n  InputAdornment,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { DatePicker, LocalizationProvider, LoadingButton } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport CarFormSteps from \"../../../components/CarForm/CarEditFormSteps\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\nimport {\r\n  getCarDetails,\r\n  getCarList,\r\n  saveStep1Details,\r\n  updateCar,\r\n} from \"../../../Actions/carActions\";\r\nimport { FaCar as CarIcon } from \"react-icons/fa\";\r\nimport { AiOutlineFieldNumber as NumberIcon } from \"react-icons/ai\";\r\nimport {\r\n  PermContactCalendar as ContactIcon,\r\n  Person as PersonIcon,\r\n  Assignment as LicenseIcon,\r\n  CameraFront as ImageIcon,\r\n  NavigateNext as NextIcon,\r\n  Cancel as CloseIcon,\r\n  Save as SaveIcon,\r\n} from \"@material-ui/icons\";\r\nimport { AppConst } from \"../../../constants/appConstants\";\r\nimport axios from \"axios\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\nimport { CAR_UPDATE_RESET } from \"../../../constants/carConstants\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst EditCarForm1 = () => {\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [carStatus, setCarStatus] = useState(\"\");\r\n  const [carName, setCarName] = useState(\"\");\r\n  const [carNumber, setCarNumber] = useState(\"\");\r\n  const [carImage, setCarImage] = useState(\"\");\r\n  const [carImageUploading, setCarImageUploading] = useState(\"\");\r\n  const [imageModal, setImageModal] = useState(false);\r\n  const [modalImage, setModalImage] = useState(\"\");\r\n\r\n  const [carFitnessStartDate, setCarFitnessStartDate] = useState(null);\r\n  const [carFitnessEndDate, setCarFitnessEndDate] = useState(null);\r\n  const [carFitnessImage, setCarFitnessImage] = useState(\"\");\r\n  const [carFitnessImageUploading, setCarFitnessImageUploading] = useState(\"\");\r\n\r\n  const [carPurchaseInvoice, setCarPurchaseInvoice] = useState(\"\");\r\n  const [carPurchaseInvoiceDate, setCarPurchaseInvoiceDate] = useState(null);\r\n  const [\r\n    carPurchaseInvoiceUploading,\r\n    setCarPurchaseInvoiceUploading,\r\n  ] = useState(\"\");\r\n\r\n  const [PUCNumber, setPUCNumber] = useState(\"\");\r\n  const [PUCStartDate, setPUCStartDate] = useState(null);\r\n  const [PUCEndDate, setPUCEndDate] = useState(null);\r\n  const [PUCImageUploading, setPUCImageUploading] = useState(\"\");\r\n  const [PUCImage, setPUCImage] = useState(\"\");\r\n\r\n  const [insuranceNumber, setInsuranceNumber] = useState(\"\");\r\n  const [insuranceStartDate, setInsuranceStartDate] = useState(null);\r\n  const [insuranceEndDate, setInsuranceEndDate] = useState(null);\r\n  const [insuranceImage, setInsuranceImage] = useState(\"\");\r\n  const [insuranceImageUploading, setInsuranceImageUploading] = useState(\"\");\r\n\r\n  const [carRCTCNo, setCarRCTCNo] = useState(\"\");\r\n  const [carRCTCImage, setCarRCTCImage] = useState(\"\");\r\n  const [carRCTCImageUploading, setCarRCTCImageUploading] = useState(\"\");\r\n\r\n  const [RCBookImage, setRCBookImage] = useState(\"\");\r\n  const [RCNumber, setRCNumber] = useState(\"\");\r\n  const [carRCImageUploading, setCarRCImageUploading] = useState(\"\");\r\n\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const { loading, error, car } = carDetails;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n\r\n    if (!car.carName || car._id !== id) {\r\n      dispatch(getCarDetails(id));\r\n    } else {\r\n      setCarName(car.carName);\r\n      setCarNumber(car.carNumber);\r\n      setCarImage(car.carImage);\r\n\r\n      setCarPurchaseInvoiceDate(car.carPurchaseInvoiceDate);\r\n      setCarPurchaseInvoice(car.carPurchaseInvoice);\r\n\r\n      setCarFitnessStartDate(car.carFitnessStartDate);\r\n      setCarFitnessEndDate(car.carFitnessEndDate);\r\n\r\n      setCarFitnessImage(car.carFitnessImage);\r\n      setPUCStartDate(car.PUCStartDate);\r\n      setPUCEndDate(car.PUCEndDate);\r\n      setPUCNumber(car.PUCNumber);\r\n      setPUCImage(car.PUCImage);\r\n      setRCNumber(car.RCNumber);\r\n      setInsuranceNumber(car.insuranceNumber);\r\n      setInsuranceStartDate(car.insuranceStartDate);\r\n      setInsuranceEndDate(car.insuranceEndDate);\r\n      setInsuranceImage(car.insuranceImage);\r\n\r\n      setCarRCTCNo(car.carRCTCNo);\r\n      setCarRCTCImage(car.carRCTCImage);\r\n      setRCNumber(car.RCNumber);\r\n      setRCBookImage(car.RCBookImage);\r\n      setCarStatus(car.carStatus);\r\n    }\r\n  }, [id, dispatch, car, error]);\r\n\r\n  const updateForm1 = () => {\r\n    dispatch(\r\n      updateCar({\r\n        _id: id,\r\n        carName,\r\n        carNumber,\r\n        carImage,\r\n        carRCTCNo,\r\n        carRCTCImage,\r\n        RCNumber,\r\n        RCBookImage,\r\n        PUCNumber,\r\n        PUCImage,\r\n        PUCStartDate,\r\n        PUCEndDate,\r\n        insuranceNumber,\r\n        insuranceImage,\r\n        insuranceStartDate,\r\n        insuranceEndDate,\r\n        carFitnessImage,\r\n        carFitnessStartDate,\r\n        carFitnessEndDate,\r\n        carPurchaseInvoice,\r\n        carPurchaseInvoiceDate,\r\n        carStatus,\r\n      }),\r\n    );\r\n  };\r\n  const hasNumber = (str) => {\r\n    return /\\d/.test(str);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Edit Car Form\" />\r\n      <Stack>\r\n        {/* <Snackbar\r\n          open={success}\r\n          autoHideDuration={1000}\r\n          onClose={() => setSuccess(false)}\r\n          anchorOrigin={{ vertical, horizontal }}\r\n        >\r\n          <Notification\r\n            className={classes.notificationItem}\r\n            shadowless\r\n            type={success ? \"info\" : \"delivered\"}\r\n            message={`${message}`}\r\n            variant=\"contained\"\r\n            color={success ? \"success\" : \"secondary\"}\r\n          />\r\n        </Snackbar> */}\r\n      </Stack>\r\n      <Paper>\r\n        <CarFormSteps step1 step2 id={id} />\r\n\r\n        <form\r\n          style={{\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"4%\",\r\n            paddingRight: \"4%\",\r\n          }}\r\n          onSubmit={updateForm1}\r\n        >\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"car-name\"\r\n                  name=\"carName\"\r\n                  label=\"Car Name\"\r\n                  type=\"text\"\r\n                  value={carName}\r\n                  helperText={\r\n                    carName\r\n                      ? !hasNumber(carName)\r\n                        ? \"\"\r\n                        : \"Only Numbers are allowed\"\r\n                      : \"\"\r\n                  }\r\n                  error={carName ? (!hasNumber(carName) ? false : true) : false}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <CarIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setCarName(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"car-number\"\r\n                  name=\"carNumber\"\r\n                  label=\"Car Number\"\r\n                  type=\"text\"\r\n                  value={carNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <NumberIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setCarNumber(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              {carImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carImage);\r\n                    }}\r\n                    src={`${carImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"car-image\"\r\n                    name=\"carImage\"\r\n                    label=\"Car Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      carName.length > 0 && carNumber.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      carName.length > 0 && carNumber.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter Car Name and Number\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${carName}_${carNumber}_image`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarImage(data);\r\n\r\n                        setCarImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Fitness Start Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={carFitnessStartDate}\r\n                    onChange={(newValue) => {\r\n                      setCarFitnessStartDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Fitness End Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    minDate={carFitnessStartDate}\r\n                    value={carFitnessEndDate}\r\n                    onChange={(newValue) => {\r\n                      setCarFitnessEndDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              {carFitnessImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarFitnessImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carFitnessImage);\r\n                    }}\r\n                    src={`${carFitnessImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carFitnessImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"fitness-image\"\r\n                    name=\"fitness\"\r\n                    label=\"Fitness Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      carName.length > 0 && carNumber.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      carName.length > 0 && carNumber.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter Car Name and Number\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${carName}_${carNumber}_Fitness`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarFitnessImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarFitnessImage(data);\r\n\r\n                        setCarFitnessImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarFitnessImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Purchase Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={carPurchaseInvoiceDate}\r\n                    onChange={(newValue) => {\r\n                      setCarPurchaseInvoiceDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n              {carPurchaseInvoice ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarPurchaseInvoice(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carPurchaseInvoice);\r\n                    }}\r\n                    src={`${carPurchaseInvoice}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carPurchaseInvoiceUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"Purchase-image\"\r\n                    name=\"Purchase\"\r\n                    label=\"Purchase Invoice Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      carName.length > 0 && carNumber.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      carName.length > 0 && carNumber.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter Car Name and Number\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${carName}_${carNumber}_Purchase`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarPurchaseInvoiceUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarPurchaseInvoice(data);\r\n\r\n                        setCarPurchaseInvoiceUploading(false);\r\n                      } catch (error) {\r\n                        setCarPurchaseInvoiceUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={4}></Grid>\r\n          </Grid>\r\n          {/* <Grid\r\n            container\r\n            direction=\"column\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ padding: \"2%\" }}\r\n            spacing={4}\r\n          >\r\n            <Grid>\r\n              {\" \"}\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                endIcon={<SaveIcon />}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n            <Grid>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                endIcon={<NextIcon />}\r\n              ></Button>\r\n            </Grid>\r\n          </Grid> */}\r\n          <Grid\r\n            container\r\n            align=\"center\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            spacing={1}\r\n            style={{\r\n              padding: \"6px\",\r\n            }}\r\n          >\r\n            <Grid item xs={4}></Grid>\r\n\r\n            <Grid item xs={1}>\r\n              <Button\r\n                type=\"submit\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                endIcon={<SaveIcon />}\r\n              >\r\n                Update\r\n              </Button>\r\n            </Grid>\r\n\r\n            <Grid item xs={1}></Grid>\r\n\r\n            <Grid item xs={1}>\r\n              <Link to={`/app/cars/edit2/${id}`}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  endIcon={<NextIcon />}\r\n                ></Button>\r\n              </Link>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}></Grid>\r\n          </Grid>\r\n        </form>\r\n        <Modal\r\n          open={imageModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={11}></Grid>\r\n              <Grid item xs={1}>\r\n                <Typography\r\n                  style={{\r\n                    margin: \"6px\",\r\n                    fontWidth: \"bold\",\r\n                  }}\r\n                >\r\n                  <CloseIcon\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => setImageModal(false)}\r\n                  />\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <img\r\n              alt=\"\"\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n              src={`${modalImage}`}\r\n            />\r\n          </Box>\r\n        </Modal>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditCarForm1;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Edit\\EditCarForm2.js",["440","441","442","443","444","445","446","447","448","449","450","451","452","453","454","455","456"],"import { Button, Grid } from \"@material-ui/core\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Box,\r\n  InputAdornment,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { DatePicker, LocalizationProvider, LoadingButton } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport CarFormSteps from \"../../../components/CarForm/CarEditFormSteps\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\n\r\nimport {\r\n  PermContactCalendar as ContactIcon,\r\n  Person as PersonIcon,\r\n  Save as SaveIcon,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Assignment as DocumentIcon,\r\n  CameraFront as ImageIcon,\r\n  NavigateNext as NextIcon,\r\n  Cancel as CloseIcon,\r\n  BackupRounded as SubmitIcon,\r\n} from \"@material-ui/icons\";\r\nimport { AppConst } from \"../../../constants/appConstants\";\r\nimport axios from \"axios\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  getCarDetails,\r\n  getCarList,\r\n  updateCar,\r\n} from \"../../../Actions/carActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\nimport { CAR_UPDATE_RESET } from \"../../../constants/carConstants\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst EditCarForm2 = () => {\r\n  const { id } = useParams();\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [step1, setStep1] = useState({});\r\n\r\n  const [carStatus, setCarStatus] = useState(\"\");\r\n  const [carName, setCarName] = useState(\"\");\r\n  const [carNumber, setCarNumber] = useState(\"\");\r\n  const [carImage, setCarImage] = useState(\"\");\r\n  const [carImageUploading, setCarImageUploading] = useState(\"\");\r\n  const [imageModal, setImageModal] = useState(false);\r\n  const [modalImage, setModalImage] = useState(\"\");\r\n\r\n  const [carFitnessStartDate, setCarFitnessStartDate] = useState(null);\r\n  const [carFitnessEndDate, setCarFitnessEndDate] = useState(null);\r\n  const [carFitnessImage, setCarFitnessImage] = useState(\"\");\r\n  const [carFitnessImageUploading, setCarFitnessImageUploading] = useState(\"\");\r\n\r\n  const [carPurchaseInvoice, setCarPurchaseInvoice] = useState(\"\");\r\n  const [carPurchaseInvoiceDate, setCarPurchaseInvoiceDate] = useState(null);\r\n  const [\r\n    carPurchaseInvoiceUploading,\r\n    setCarPurchaseInvoiceUploading,\r\n  ] = useState(\"\");\r\n\r\n  const [PUCNumber, setPUCNumber] = useState(\"\");\r\n  const [PUCStartDate, setPUCStartDate] = useState(null);\r\n  const [PUCEndDate, setPUCEndDate] = useState(null);\r\n  const [PUCImageUploading, setPUCImageUploading] = useState(\"\");\r\n  const [PUCImage, setPUCImage] = useState(\"\");\r\n\r\n  const [insuranceNumber, setInsuranceNumber] = useState(\"\");\r\n  const [insuranceStartDate, setInsuranceStartDate] = useState(null);\r\n  const [insuranceEndDate, setInsuranceEndDate] = useState(null);\r\n  const [insuranceImage, setInsuranceImage] = useState(\"\");\r\n  const [insuranceImageUploading, setInsuranceImageUploading] = useState(\"\");\r\n\r\n  const [carRCTCNo, setCarRCTCNo] = useState(\"\");\r\n  const [carRCTCImage, setCarRCTCImage] = useState(\"\");\r\n  const [carRCTCImageUploading, setCarRCTCImageUploading] = useState(\"\");\r\n\r\n  const [RCBookImage, setRCBookImage] = useState(\"\");\r\n  const [RCNumber, setRCNumber] = useState(\"\");\r\n  const [carRCImageUploading, setCarRCImageUploading] = useState(\"\");\r\n\r\n  const carUpdate = useSelector((state) => state.carUpdate);\r\n  const {\r\n    loading: loadingUpdate,\r\n    error: errorUpdate,\r\n    success: successUpdate,\r\n  } = carUpdate;\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const { loading, error, car } = carDetails;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n    if (successUpdate) {\r\n      dispatch({ type: CAR_UPDATE_RESET });\r\n    } else if (error) {\r\n      // setSuccess(false);\r\n      // setMessage(error);\r\n    } else {\r\n      if (!car.carName || car._id !== id) {\r\n        dispatch(getCarDetails(id));\r\n      } else {\r\n        setCarName(car.carName);\r\n        setCarNumber(car.carNumber);\r\n        setCarImage(car.carImage);\r\n\r\n        setCarPurchaseInvoiceDate(car.carPurchaseInvoiceDate);\r\n        setCarPurchaseInvoice(car.carPurchaseInvoice);\r\n\r\n        setCarFitnessStartDate(car.carFitnessStartDate);\r\n        setCarFitnessEndDate(car.carFitnessEndDate);\r\n\r\n        setCarFitnessImage(car.carFitnessImage);\r\n        setPUCStartDate(car.PUCStartDate);\r\n        setPUCEndDate(car.PUCEndDate);\r\n        setPUCNumber(car.PUCNumber);\r\n        setPUCImage(car.PUCImage);\r\n        setRCNumber(car.RCNumber);\r\n        setInsuranceNumber(car.insuranceNumber);\r\n        setInsuranceStartDate(car.insuranceStartDate);\r\n        setInsuranceEndDate(car.insuranceEndDate);\r\n        setInsuranceImage(car.insuranceImage);\r\n\r\n        setCarRCTCNo(car.carRCTCNo);\r\n        setCarRCTCImage(car.carRCTCImage);\r\n        setRCNumber(car.RCNumber);\r\n        setRCBookImage(car.RCBookImage);\r\n        setCarStatus(car.carStatus);\r\n      }\r\n    }\r\n  }, [id, dispatch, car, successUpdate, error]);\r\n\r\n  const updateHandler = () => {\r\n    dispatch(\r\n      updateCar({\r\n        _id: id,\r\n        carName,\r\n        carNumber,\r\n        carImage,\r\n        carRCTCNo,\r\n        carRCTCImage,\r\n        RCNumber,\r\n        RCBookImage,\r\n        PUCNumber,\r\n        PUCImage,\r\n        PUCStartDate,\r\n        PUCEndDate,\r\n        insuranceNumber,\r\n        insuranceImage,\r\n        insuranceStartDate,\r\n        insuranceEndDate,\r\n        carFitnessImage,\r\n        carFitnessStartDate,\r\n        carFitnessEndDate,\r\n        carPurchaseInvoice,\r\n        carPurchaseInvoiceDate,\r\n        carStatus,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Edit Car Form\" />\r\n      <Stack>\r\n        {/* <Snackbar\r\n          open={success}\r\n          autoHideDuration={1000}\r\n          onClose={() => setSuccess(false)}\r\n          anchorOrigin={{ vertical, horizontal }}\r\n        >\r\n          <Notification\r\n            className={classes.notificationItem}\r\n            shadowless\r\n            type={success ? \"info\" : \"delivered\"}\r\n            message={`${message}`}\r\n            variant=\"contained\"\r\n            color={success ? \"success\" : \"secondary\"}\r\n          />\r\n        </Snackbar> */}\r\n      </Stack>\r\n      <Paper>\r\n        <CarFormSteps step1 step2 id={id} />\r\n\r\n        <form\r\n          style={{\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"4%\",\r\n            paddingRight: \"4%\",\r\n          }}\r\n          onSubmit={updateHandler}\r\n        >\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            {\" \"}\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"PUC-name\"\r\n                  name=\"pucName\"\r\n                  label=\"PUC Number\"\r\n                  type=\"text\"\r\n                  value={PUCNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setPUCNumber(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"PUC Start Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={PUCStartDate}\r\n                    onChange={(newValue) => {\r\n                      setPUCStartDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"PUC End Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    minDate={PUCStartDate}\r\n                    value={PUCEndDate}\r\n                    onChange={(newValue) => {\r\n                      setPUCEndDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {PUCImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setPUCImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(PUCImage);\r\n                    }}\r\n                    src={`${PUCImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !PUCImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"puc-image\"\r\n                    name=\"pucImage\"\r\n                    label=\"PUC Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_PUC`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setPUCImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setPUCImage(data);\r\n\r\n                        setPUCImageUploading(false);\r\n                      } catch (error) {\r\n                        setPUCImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            {\" \"}\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"Insurance-name\"\r\n                  name=\"insuranceName\"\r\n                  label=\"Insurance Number\"\r\n                  type=\"text\"\r\n                  value={insuranceNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setInsuranceNumber(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Insurance Start Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={insuranceStartDate}\r\n                    onChange={(newValue) => {\r\n                      setInsuranceStartDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Insurance End Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    minDate={insuranceStartDate}\r\n                    value={insuranceEndDate}\r\n                    onChange={(newValue) => {\r\n                      setInsuranceEndDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {insuranceImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setInsuranceImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(insuranceImage);\r\n                    }}\r\n                    src={`${insuranceImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !insuranceImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"insurance-image\"\r\n                    name=\"insuranceImage\"\r\n                    label=\"Insurance Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_insurance`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setInsuranceImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setInsuranceImage(data);\r\n\r\n                        setInsuranceImageUploading(false);\r\n                      } catch (error) {\r\n                        setInsuranceImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            {\" \"}\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"RCTC-number\"\r\n                  name=\"rctcNumber\"\r\n                  label=\"RCTC Number\"\r\n                  type=\"text\"\r\n                  value={carRCTCNo}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setCarRCTCNo(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {carRCTCImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarRCTCImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carRCTCImage);\r\n                    }}\r\n                    src={`${carRCTCImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carRCTCImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"rctc-image\"\r\n                    name=\"rctcImage\"\r\n                    label=\"RCTC Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_RCTC`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarRCTCImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarRCTCImage(data);\r\n\r\n                        setCarRCTCImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarRCTCImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"RC-number\"\r\n                  name=\"rcNumber\"\r\n                  label=\"RC Number\"\r\n                  type=\"text\"\r\n                  value={RCNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setRCNumber(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {RCBookImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setRCBookImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(RCBookImage);\r\n                    }}\r\n                    src={`${RCBookImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carRCImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"rc-image\"\r\n                    name=\"rcImage\"\r\n                    label=\"RC Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_RC`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarRCImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setRCBookImage(data);\r\n\r\n                        setCarRCImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarRCImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ padding: \"2%\" }}\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<SaveIcon />}\r\n            >\r\n              Update\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n        <Modal\r\n          open={imageModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={11}></Grid>\r\n              <Grid item xs={1}>\r\n                <Typography\r\n                  style={{\r\n                    margin: \"6px\",\r\n                    fontWidth: \"bold\",\r\n                  }}\r\n                >\r\n                  <CloseIcon\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => setImageModal(false)}\r\n                  />\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <img\r\n              alt=\"\"\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n              src={`${modalImage}`}\r\n            />\r\n          </Box>\r\n        </Modal>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditCarForm2;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Add\\AddCarForm2.js",["457","458","459","460","461","462","463","464"],"import { Button, Grid } from \"@material-ui/core\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Box,\r\n  InputAdornment,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { DatePicker, LocalizationProvider, LoadingButton } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport CarFormSteps from \"../../../components/CarForm/CarFormSteps\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\n\r\nimport { FaCar as CarIcon } from \"react-icons/fa\";\r\nimport { AiOutlineFieldNumber as NumberIcon } from \"react-icons/ai\";\r\nimport {\r\n  PermContactCalendar as ContactIcon,\r\n  Person as PersonIcon,\r\n  Save as SaveIcon,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Assignment as DocumentIcon,\r\n  CameraFront as ImageIcon,\r\n  NavigateNext as NextIcon,\r\n  Cancel as CloseIcon,\r\n  BackupRounded as SubmitIcon,\r\n} from \"@material-ui/icons\";\r\nimport { AppConst } from \"../../../constants/appConstants\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { registerCar } from \"../../../Actions/carActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst AddCarForm2 = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [step1, setStep1] = useState({});\r\n\r\n  const [PUCNumber, setPUCNumber] = useState(\"\");\r\n  const [PUCStartDate, setPUCStartDate] = useState(null);\r\n  const [PUCEndDate, setPUCEndDate] = useState(null);\r\n  const [PUCImageUploading, setPUCImageUploading] = useState(\"\");\r\n  const [PUCImage, setPUCImage] = useState(\"\");\r\n\r\n  const [insuranceNumber, setInsuranceNumber] = useState(\"\");\r\n  const [insuranceStartDate, setInsuranceStartDate] = useState(null);\r\n  const [insuranceEndDate, setInsuranceEndDate] = useState(null);\r\n  const [insuranceImage, setInsuranceImage] = useState(\"\");\r\n  const [insuranceImageUploading, setInsuranceImageUploading] = useState(\"\");\r\n\r\n  const [carRCTCNo, setCarRCTCNo] = useState(\"\");\r\n  const [carRCTCImage, setCarRCTCImage] = useState(\"\");\r\n  const [carRCTCImageUploading, setCarRCTCImageUploading] = useState(\"\");\r\n\r\n  const [RCBookImage, setRCBookImage] = useState(\"\");\r\n  const [RCNumber, setRCNumber] = useState(\"\");\r\n  const [carRCImageUploading, setCarRCImageUploading] = useState(\"\");\r\n\r\n  const [imageModal, setImageModal] = useState(false);\r\n  const [modalImage, setModalImage] = useState(\"\");\r\n\r\n  const carRegister = useSelector((state) => state.carRegister);\r\n  let { error, carInfo } = carRegister;\r\n\r\n  useEffect(() => {\r\n    const step1Obj = localStorage.getItem(\"step1Details\");\r\n    if (carInfo) {\r\n      if (Object.keys(carInfo).length !== 0) {\r\n        setTimeout(() => {\r\n          history.push(`/app/cars/list?carInfo`);\r\n        }, 1000);\r\n      }\r\n    }\r\n    if (!step1Obj) {\r\n      history.push(\"/app/cars/add\");\r\n    } else {\r\n      setStep1(JSON.parse(step1Obj));\r\n    }\r\n  }, [history, carInfo]);\r\n\r\n  const submitHandler = (e) => {\r\n    const {\r\n      carName,\r\n      carNumber,\r\n      carImage,\r\n      carFitnessImage,\r\n      carFitnessStartDate,\r\n      carFitnessEndDate,\r\n      carPurchaseInvoice,\r\n      carPurchaseInvoiceDate,\r\n    } = step1;\r\n\r\n    dispatch(\r\n      registerCar({\r\n        carName,\r\n        carNumber,\r\n        carImage,\r\n        carFitnessImage,\r\n        carFitnessStartDate,\r\n        carFitnessEndDate,\r\n        carPurchaseInvoice,\r\n        carPurchaseInvoiceDate,\r\n        carRCTCNo,\r\n        carRCTCImage,\r\n        RCNumber,\r\n        RCBookImage,\r\n        PUCNumber,\r\n        PUCImage,\r\n        PUCStartDate,\r\n        PUCEndDate,\r\n        insuranceNumber,\r\n        insuranceImage,\r\n        insuranceStartDate,\r\n        insuranceEndDate,\r\n      }),\r\n    );\r\n\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Car Form\" />\r\n      <Stack>\r\n        {/* <Snackbar\r\n          open={success}\r\n          autoHideDuration={1000}\r\n          onClose={() => setSuccess(false)}\r\n          anchorOrigin={{ vertical, horizontal }}\r\n        >\r\n          <Notification\r\n            className={classes.notificationItem}\r\n            shadowless\r\n            type={success ? \"info\" : \"delivered\"}\r\n            message={`${message}`}\r\n            variant=\"contained\"\r\n            color={success ? \"success\" : \"secondary\"}\r\n          />\r\n        </Snackbar> */}\r\n      </Stack>\r\n      <Paper>\r\n        <CarFormSteps step1 step2 />\r\n\r\n        <form\r\n          style={{\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"4%\",\r\n            paddingRight: \"4%\",\r\n          }}\r\n          onSubmit={submitHandler}\r\n        >\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            {\" \"}\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"PUC-name\"\r\n                  name=\"pucName\"\r\n                  label=\"PUC Number\"\r\n                  type=\"text\"\r\n                  value={PUCNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setPUCNumber(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"PUC Start Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={PUCStartDate}\r\n                    onChange={(newValue) => {\r\n                      setPUCStartDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"PUC End Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    minDate={PUCStartDate}\r\n                    value={PUCEndDate}\r\n                    onChange={(newValue) => {\r\n                      setPUCEndDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {PUCImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setPUCImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(PUCImage);\r\n                    }}\r\n                    src={`${PUCImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !PUCImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"puc-image\"\r\n                    name=\"pucImage\"\r\n                    label=\"PUC Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_PUC`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setPUCImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setPUCImage(data);\r\n\r\n                        setPUCImageUploading(false);\r\n                      } catch (error) {\r\n                        setPUCImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            {\" \"}\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"Insurance-name\"\r\n                  name=\"insuranceName\"\r\n                  label=\"Insurance Number\"\r\n                  type=\"text\"\r\n                  value={insuranceNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setInsuranceNumber(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Insurance Start Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={insuranceStartDate}\r\n                    onChange={(newValue) => {\r\n                      setInsuranceStartDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Insurance End Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    minDate={insuranceStartDate}\r\n                    value={insuranceEndDate}\r\n                    onChange={(newValue) => {\r\n                      setInsuranceEndDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {insuranceImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setInsuranceImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(insuranceImage);\r\n                    }}\r\n                    src={`${insuranceImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !insuranceImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"insurance-image\"\r\n                    name=\"insuranceImage\"\r\n                    label=\"Insurance Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_insurance`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setInsuranceImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setInsuranceImage(data);\r\n\r\n                        setInsuranceImageUploading(false);\r\n                      } catch (error) {\r\n                        setInsuranceImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            {\" \"}\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"RCTC-number\"\r\n                  name=\"rctcNumber\"\r\n                  label=\"RCTC Number\"\r\n                  type=\"text\"\r\n                  value={carRCTCNo}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setCarRCTCNo(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {carRCTCImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarRCTCImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carRCTCImage);\r\n                    }}\r\n                    src={`${carRCTCImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carRCTCImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"rctc-image\"\r\n                    name=\"rctcImage\"\r\n                    label=\"RCTC Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_RCTC`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarRCTCImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarRCTCImage(data);\r\n\r\n                        setCarRCTCImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarRCTCImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {\" \"}\r\n              <Stack>\r\n                <TextField\r\n                  id=\"RC-number\"\r\n                  name=\"rcNumber\"\r\n                  label=\"RC Number\"\r\n                  type=\"text\"\r\n                  value={RCNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <DocumentIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setRCNumber(e.target.value);\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n              {RCBookImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setRCBookImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(RCBookImage);\r\n                    }}\r\n                    src={`${RCBookImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carRCImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"rc-image\"\r\n                    name=\"rcImage\"\r\n                    label=\"RC Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${step1.carName}_${step1.carNumber}_RC`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarRCImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${step1.carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setRCBookImage(data);\r\n\r\n                        setCarRCImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarRCImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ padding: \"2%\" }}\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<SubmitIcon />}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n        <Modal\r\n          open={imageModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={11}></Grid>\r\n              <Grid item xs={1}>\r\n                <Typography\r\n                  style={{\r\n                    margin: \"6px\",\r\n                    fontWidth: \"bold\",\r\n                  }}\r\n                >\r\n                  <CloseIcon\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => setImageModal(false)}\r\n                  />\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <img\r\n              alt=\"\"\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n              src={`${modalImage}`}\r\n            />\r\n          </Box>\r\n        </Modal>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCarForm2;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\CarsList.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\Add\\AddCarForm1.js",["465","466","467","468"],"import { Button, Grid } from \"@material-ui/core\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Box,\r\n  InputAdornment,\r\n  Modal,\r\n  Paper,\r\n  Stack,\r\n  TextField,\r\n} from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { DatePicker, LocalizationProvider, LoadingButton } from \"@mui/lab\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport CarFormSteps from \"../../../components/CarForm/CarFormSteps\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\nimport { saveStep1Details } from \"../../../Actions/carActions\";\r\nimport { FaCar as CarIcon } from \"react-icons/fa\";\r\nimport { AiOutlineFieldNumber as NumberIcon } from \"react-icons/ai\";\r\nimport {\r\n  PermContactCalendar as ContactIcon,\r\n  Person as PersonIcon,\r\n  Save as SaveIcon,\r\n  Assignment as LicenseIcon,\r\n  CameraFront as ImageIcon,\r\n  NavigateNext as NextIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport { AppConst } from \"../../../constants/appConstants\";\r\nimport axios from \"axios\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst AddCarForm1 = () => {\r\n  const history = useHistory();\r\n  const dispatch = useDispatch();\r\n  const [carName, setCarName] = useState(\"\");\r\n  const [carNumber, setCarNumber] = useState(\"\");\r\n  const [carImage, setCarImage] = useState(\"\");\r\n  const [carImageUploading, setCarImageUploading] = useState(\"\");\r\n  const [imageModal, setImageModal] = useState(false);\r\n  const [modalImage, setModalImage] = useState(\"\");\r\n\r\n  const [carFitnessStartDate, setCarFitnessStartDate] = useState(null);\r\n  const [carFitnessEndDate, setCarFitnessEndDate] = useState(null);\r\n  const [carFitnessImage, setCarFitnessImage] = useState(\"\");\r\n  const [carFitnessImageUploading, setCarFitnessImageUploading] = useState(\"\");\r\n\r\n  const [carPurchaseInvoice, setCarPurchaseInvoice] = useState(\"\");\r\n  const [carPurchaseInvoiceDate, setCarPurchaseInvoiceDate] = useState(null);\r\n  const [\r\n    carPurchaseInvoiceUploading,\r\n    setCarPurchaseInvoiceUploading,\r\n  ] = useState(\"\");\r\n\r\n  const carForm = useSelector((state) => state.carForm);\r\n  const { formDetails } = carForm;\r\n\r\n  useEffect(() => {\r\n    let step1Exist = JSON.parse(localStorage.getItem(\"step1Details\"));\r\n    if (step1Exist) {\r\n      setCarName(step1Exist.carName);\r\n      setCarNumber(step1Exist.carNumber);\r\n      setCarImage(step1Exist.carImage);\r\n      setCarFitnessStartDate(step1Exist.carFitnessStartDate);\r\n      setCarFitnessEndDate(step1Exist.carFitnessEndDate);\r\n      setCarFitnessImage(step1Exist.carFitnessEndDate);\r\n      setCarPurchaseInvoice(step1Exist.carPurchaseInvoice);\r\n      setCarPurchaseInvoiceDate(step1Exist.setCarPurchaseInvoiceDate);\r\n    }\r\n  }, []);\r\n\r\n  const step1FormHandler = () => {\r\n    dispatch(\r\n      saveStep1Details({\r\n        carName,\r\n        carNumber,\r\n        carImage,\r\n        carFitnessStartDate,\r\n        carFitnessEndDate,\r\n        carFitnessImage,\r\n        carPurchaseInvoice,\r\n        carPurchaseInvoiceDate,\r\n      }),\r\n    );\r\n    history.push(\"/app/cars/add/step2\");\r\n  };\r\n  const hasNumber = (str) => {\r\n    return /\\d/.test(str);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Car Form\" />\r\n      <Stack>\r\n        {/* <Snackbar\r\n          open={success}\r\n          autoHideDuration={1000}\r\n          onClose={() => setSuccess(false)}\r\n          anchorOrigin={{ vertical, horizontal }}\r\n        >\r\n          <Notification\r\n            className={classes.notificationItem}\r\n            shadowless\r\n            type={success ? \"info\" : \"delivered\"}\r\n            message={`${message}`}\r\n            variant=\"contained\"\r\n            color={success ? \"success\" : \"secondary\"}\r\n          />\r\n        </Snackbar> */}\r\n      </Stack>\r\n      <Paper>\r\n        <CarFormSteps step1 />\r\n\r\n        <form\r\n          style={{\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"4%\",\r\n            paddingRight: \"4%\",\r\n          }}\r\n          onSubmit={step1FormHandler}\r\n        >\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"car-name\"\r\n                  name=\"carName\"\r\n                  label=\"Car Name\"\r\n                  type=\"text\"\r\n                  value={carName}\r\n                  helperText={\r\n                    carName\r\n                      ? !hasNumber(carName)\r\n                        ? \"\"\r\n                        : \"Only Numbers are allowed\"\r\n                      : \"\"\r\n                  }\r\n                  error={carName ? (!hasNumber(carName) ? false : true) : false}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <CarIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setCarName(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"car-number\"\r\n                  name=\"carNumber\"\r\n                  label=\"Car Number\"\r\n                  type=\"text\"\r\n                  value={carNumber}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <NumberIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setCarNumber(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              {carImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carImage);\r\n                    }}\r\n                    src={`${carImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"car-image\"\r\n                    name=\"carImage\"\r\n                    label=\"Car Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      carName.length > 0 && carNumber.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      carName.length > 0 && carNumber.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter Car Name and Number\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${carName}_${carNumber}_image`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarImage(data);\r\n\r\n                        setCarImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Fitness Start Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={carFitnessStartDate}\r\n                    onChange={(newValue) => {\r\n                      setCarFitnessStartDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Fitness End Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    minDate={carFitnessStartDate}\r\n                    value={carFitnessEndDate}\r\n                    onChange={(newValue) => {\r\n                      setCarFitnessEndDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              {carFitnessImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarFitnessImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carFitnessImage);\r\n                    }}\r\n                    src={`${carFitnessImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carFitnessImageUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"fitness-image\"\r\n                    name=\"fitness\"\r\n                    label=\"Fitness Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      carName.length > 0 && carNumber.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      carName.length > 0 && carNumber.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter Car Name and Number\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${carName}_${carNumber}_Fitness`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarFitnessImageUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarFitnessImage(data);\r\n\r\n                        setCarFitnessImageUploading(false);\r\n                      } catch (error) {\r\n                        setCarFitnessImageUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={4}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Purchase Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    value={carPurchaseInvoiceDate}\r\n                    onChange={(newValue) => {\r\n                      setCarPurchaseInvoiceDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n\r\n            <Grid item xs={4}>\r\n              {carPurchaseInvoice ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setCarPurchaseInvoice(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(carPurchaseInvoice);\r\n                    }}\r\n                    src={`${carPurchaseInvoice}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !carPurchaseInvoiceUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"Purchase-image\"\r\n                    name=\"Purchase\"\r\n                    label=\"Purchase Invoice Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      carName.length > 0 && carNumber.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      carName.length > 0 && carNumber.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter Car Name and Number\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${carName}_${carNumber}_Purchase`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n                      setCarPurchaseInvoiceUploading(true);\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/car/profile/${carNumber}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setCarPurchaseInvoice(data);\r\n\r\n                        setCarPurchaseInvoiceUploading(false);\r\n                      } catch (error) {\r\n                        setCarPurchaseInvoiceUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n            <Grid item xs={4}></Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ padding: \"2%\" }}\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<NextIcon />}\r\n            >\r\n              Next\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n        <Modal\r\n          open={imageModal}\r\n          aria-labelledby=\"modal-modal-title\"\r\n          aria-describedby=\"modal-modal-description\"\r\n        >\r\n          <Box sx={style}>\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={11}></Grid>\r\n              <Grid item xs={1}>\r\n                <Typography\r\n                  style={{\r\n                    margin: \"6px\",\r\n                    fontWidth: \"bold\",\r\n                  }}\r\n                >\r\n                  <CloseIcon\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => setImageModal(false)}\r\n                  />\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <img\r\n              alt=\"\"\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n              src={`${modalImage}`}\r\n            />\r\n          </Box>\r\n        </Modal>\r\n      </Paper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddCarForm1;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Layout\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\DriversList.js",["469","470"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  InputBase,\r\n  Grid,\r\n  Select,\r\n  MenuItem,\r\n  OutlinedInput,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nimport { Search as SearchIcon, AddCircle as AddIcon } from \"@material-ui/icons\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport classNames from \"classnames\";\r\nimport PageTitle from \"../../components/PageTitle/PageTitle\";\r\nimport Widget from \"../../components/Widget/Widget\";\r\nimport DriversTable from \"./DriversTable\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\n\r\nconst DriversList = () => {\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  var [isSearchOpen, setSearchOpen] = useState(true);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [status, setStatus] = useState(\"active\");\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Drivers List\" />\r\n      <Grid item xs={12}>\r\n        <Widget\r\n          style={{\r\n            height: \"800px\",\r\n          }}\r\n          header={\r\n            <div className={classes.mainChartHeader}>\r\n              <div\r\n                className={classNames(classes.search, {\r\n                  [classes.searchFocused]: isSearchOpen,\r\n                })}\r\n              >\r\n                <div\r\n                  className={classNames(classes.searchIcon, {\r\n                    [classes.searchIconOpened]: isSearchOpen,\r\n                  })}\r\n                  onClick={() => setSearchOpen(!isSearchOpen)}\r\n                >\r\n                  <SearchIcon classes={{ root: classes.headerIcon }} />\r\n                </div>\r\n                <InputBase\r\n                  placeholder=\"Search by Driver…\"\r\n                  value={keyword}\r\n                  onChange={(e) => setKeyword(e.target.value)}\r\n                  classes={{\r\n                    root: classes.inputRoot,\r\n                    input: classes.inputInput,\r\n                  }}\r\n                />\r\n              </div>\r\n              <div className={classes.mainChartHeaderLabels}>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <div>\r\n                    <Select\r\n                      value={status}\r\n                      onChange={(e) => setStatus(e.target.value)}\r\n                      input={\r\n                        <OutlinedInput\r\n                          labelWidth={0}\r\n                          classes={{\r\n                            notchedOutline: classes.mainChartSelectRoot,\r\n                            input: classes.mainChartSelect,\r\n                          }}\r\n                        />\r\n                      }\r\n                      autoWidth\r\n                    >\r\n                      <MenuItem value=\"active\">Active</MenuItem>\r\n                      <MenuItem value=\"inactive\">Inactive</MenuItem>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <Link\r\n                    to={`/app/drivers/add`}\r\n                    style={{ textDecoration: \"none\" }}\r\n                  >\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      color=\"primary\"\r\n                      startIcon={<AddIcon />}\r\n                    >\r\n                      ADD DRIVER\r\n                    </Button>\r\n                  </Link>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          upperTitle\r\n          noBodyPadding\r\n          // bodyClass={classes.tableWidget}\r\n        >\r\n          <DriversTable keyword={keyword} status={status} />\r\n        </Widget>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriversList;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\History\\DriversHistory.js",["471","472","473","474","475","476"],"import { Grid, IconButton } from \"@material-ui/core\";\r\nimport React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport useStyles from \"../../dashboard/styles\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { CloudDownload as DownloadIcon } from \"@material-ui/icons\";\r\nimport moment from \"moment\";\r\nimport { Workbook } from \"exceljs\";\r\nimport { Stack, TextField } from \"@mui/material\";\r\nimport { DatePicker } from \"@mui/lab\";\r\nimport fs from \"file-saver\";\r\nimport { getDriverDetails } from \"../../../Actions/driverActions\";\r\nimport { getJourneyDetails } from \"../../../Actions/journeyActions\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\nimport Widget from \"../../../components/Widget/Widget\";\r\nimport HistoryTable from \"./HistoryTable\";\r\nimport { dateFormate, displayDateFormate } from \"../../../Services/DateFormate\";\r\nimport { LocalizationProvider } from \"@mui/lab\";\r\n\r\nconst DriversHistory = () => {\r\n  const { id } = useParams();\r\n\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const [startDate, setStartDate] = useState(null);\r\n  const [endDate, setEndDate] = useState(null);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  var [isSearchOpen, setSearchOpen] = useState(true);\r\n\r\n  const [showModal, setShowModal] = useState(false);\r\n\r\n  const journeyDetails = useSelector((state) => state.journeyDetails);\r\n  const { loading, journeys } = journeyDetails;\r\n\r\n  const driverDetails = useSelector((state) => state.driverDetails);\r\n  const { loading: driverLoading, driver } = driverDetails;\r\n\r\n  useState(() => {\r\n    dispatch(getJourneyDetails(id));\r\n    dispatch(getDriverDetails(id));\r\n  }, [journeys, id]);\r\n\r\n  const exportToCsv = (e) => {\r\n    e.preventDefault();\r\n\r\n    let workbook = new Workbook();\r\n\r\n    let title = `${\" \"} ${\" \"} ${\" \"} ${\" \"}${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"}${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"}${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\" \"} ${\"Trip History of\"} ${\r\n      driver.firstName\r\n    } ${driver.lastName}`;\r\n\r\n    // Headers for each column\r\n    let reading = `${\" \"} ${\" \"} ${\" \"} ${\" \"}\r\n\t\t    Monthly reading:${driver.monthlyTripReading}\r\n\t\t\t${\" \"}`;\r\n\r\n    let headers = [\r\n      \"Driver\",\r\n      \"Date\",\r\n      \"Description\",\r\n      \"Trip KM\",\r\n      \" Car\",\r\n      \"Status\",\r\n    ];\r\n\r\n    // Convert users data to a csv\r\n    let journey;\r\n    let usersCsv = journeys.reduce((acc, journey) => {\r\n      const {\r\n        journeyDate,\r\n        startDestination,\r\n\r\n        startReading,\r\n        endReading,\r\n        status,\r\n      } = journey.journey;\r\n\r\n      const { carName } = journey.car;\r\n      const { firstName, lastName } = journey.driver;\r\n      let dest = startDestination.replace(/s+/g, \"\").trim();\r\n      if (status !== \"pending\") {\r\n        acc.push([\r\n          `${firstName} ${lastName}`,\r\n          `${displayDateFormate(journeyDate)}`,\r\n          `${dest.replace(/,/g, \"\").trim()}`,\r\n          `${endReading - startReading}`,\r\n          carName,\r\n          status,\r\n        ]);\r\n      }\r\n      return acc;\r\n    }, []);\r\n\r\n    let workSheet = workbook.addWorksheet(\"DriverHistory Data\");\r\n\r\n    let titleRow = workSheet.addRow([title]);\r\n    titleRow.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 12,\r\n      bold: true,\r\n    };\r\n    let monthlyR = workSheet.addRow([reading]);\r\n    monthlyR.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 10,\r\n    };\r\n\r\n    workSheet.addRow([]);\r\n\r\n    const driverCol = workSheet.getColumn(1);\r\n    const dateCol = workSheet.getColumn(2);\r\n    const tripCol = workSheet.getColumn(3);\r\n    const carCol = workSheet.getColumn(5);\r\n\r\n    driverCol.width = 20;\r\n    dateCol.width = 15;\r\n    tripCol.width = 40;\r\n    carCol.width = 20;\r\n\r\n    let headerRow = workSheet.addRow(headers);\r\n    headerRow.eachCell((cell, number) => {\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFFFFF00\" },\r\n        bgColor: { argb: \"FF0000FF\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n\r\n    usersCsv.forEach((d) => {\r\n      workSheet.addRow(d);\r\n    });\r\n\r\n    workbook.xlsx.writeBuffer().then((data) => {\r\n      let blob = new Blob([data], {\r\n        type:\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      });\r\n      fs.saveAs(\r\n        blob,\r\n        `${journeys[0]?.driver.firstName} ${journeys[0]?.driver.lastName}_Trips.xlsx`,\r\n      );\r\n    });\r\n\r\n    setShowModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title={`${driver.firstName} ${driver.lastName}'s History`} />\r\n      <Grid item xs={12}>\r\n        <Widget\r\n          style={{\r\n            height: \"800px\",\r\n          }}\r\n          header={\r\n            <div className={classes.mainChartHeader}>\r\n              <div className={classes.mainChartHeaderLabels}>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <div>\r\n                    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                      <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                        <DatePicker\r\n                          label=\"Start Date\"\r\n                          renderInput={(params) => <TextField {...params} />}\r\n                          inputFormat=\"dd/MM/yyyy\"\r\n                          clearable={true}\r\n                          value={startDate}\r\n                          onChange={(newValue) => {\r\n                            setStartDate(newValue);\r\n                          }}\r\n                        />\r\n                      </Stack>\r\n                    </LocalizationProvider>\r\n                  </div>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <Stack spacing={4} sx={{ width: \"180px\" }}>\r\n                      <DatePicker\r\n                        label=\"End Date\"\r\n                        minDate={startDate}\r\n                        renderInput={(params) => <TextField {...params} />}\r\n                        clearable={true}\r\n                        value={endDate}\r\n                        inputFormat=\"dd/MM/yyyy\"\r\n                        onChange={(newValue) => {\r\n                          setEndDate(newValue);\r\n                          dispatch(\r\n                            getJourneyDetails(\r\n                              id,\r\n                              \"\",\r\n                              dateFormate(startDate),\r\n                              dateFormate(moment(newValue).add(1, \"days\")),\r\n                            ),\r\n                          );\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                  </LocalizationProvider>\r\n                </div>\r\n              </div>\r\n\r\n              <div className={classes.mainChartHeaderLabels}>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <div>\r\n                    <IconButton onClick={exportToCsv}>\r\n                      <DownloadIcon />\r\n                    </IconButton>\r\n                  </div>\r\n                </div>\r\n                <div className={classes.mainChartHeaderLabel}>\r\n                  <></>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          }\r\n          upperTitle\r\n          noBodyPadding\r\n          // bodyClass={classes.tableWidget}\r\n        >\r\n          <HistoryTable\r\n            journeys={journeys}\r\n            driver={driver}\r\n            loading={loading}\r\n            driverLoading={driverLoading}\r\n          />\r\n        </Widget>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriversHistory;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\Edit\\EditDriverForm.js",["477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Button,\r\n  InputAdornment,\r\n  Stack,\r\n  TextField,\r\n  Box,\r\n  Modal,\r\n  Skeleton,\r\n} from \"@mui/material\";\r\nimport {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Snackbar,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport useStyle from \"../../dashboard/styles\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport {\r\n  PermContactCalendar as ContactIcon,\r\n  Person as PersonIcon,\r\n  Save as SaveIcon,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Assignment as LicenseIcon,\r\n  CameraFront as ImageIcon,\r\n  Delete as DeleteIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport { FaSave } from \"react-icons/fa\";\r\nimport { DatePicker, LoadingButton, LocalizationProvider } from \"@mui/lab\";\r\nimport { AppConst } from \"../../../constants/appConstants\";\r\nimport axios from \"axios\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\nimport { DRIVER_UPDATE_RESET } from \"../../../constants/driverConstants\";\r\nimport { CAR_UPDATE_RESET } from \"../../../constants/carConstants\";\r\nimport { getDriverDetails, updateDriver } from \"../../../Actions/driverActions\";\r\nimport { getCarDetails, getCarList } from \"../../../Actions/carActions\";\r\nimport AssignCar from \"../../../components/AssignCar/AssignCar\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst EditDriverForm = () => {\r\n  const dispatch = useDispatch();\r\n  const classes = useStyle();\r\n  const history = useHistory();\r\n  const { id } = useParams();\r\n  const [position] = useState({\r\n    vertical: \"top\",\r\n    horizontal: \"right\",\r\n  });\r\n  const { vertical, horizontal } = position;\r\n  const [imageModal, setImageModal] = useState(false);\r\n  const [modalImage, setModalImage] = useState(\"\");\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [birthDate, setBirthDate] = useState(null);\r\n  const [image, setImage] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [carId, setCarId] = useState(\"\");\r\n  const [password, setPassword] = useState({\r\n    password: \"\",\r\n    showPassword: false,\r\n  });\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [designation, setDesignation] = useState(\"\");\r\n  const [license, setLicense] = useState(\"\");\r\n  const [licenseImage, setLicenseImage] = useState(\"\");\r\n  const [uploading, setUploading] = useState(false);\r\n  const [licenseUploading, setLicenseUploading] = useState(false);\r\n  const [carAssignedDate, setCarAssignedDate] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const driverDetails = useSelector((state) => state.driverDetails);\r\n  const { loading, error, driver } = driverDetails;\r\n\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const {\r\n    loading: carDetailsLoading,\r\n    error: carDetailsError,\r\n    car,\r\n  } = carDetails;\r\n\r\n  const carList = useSelector((state) => state.carList);\r\n  const { loading: carListLoading, error: carListError, cars } = carList;\r\n\r\n  const driverUpdate = useSelector((state) => state.driverUpdate);\r\n  const {\r\n    loading: driverUpdateLoading,\r\n    error: driverUpdateError,\r\n    success: driverUpdateSuccess,\r\n  } = driverUpdate;\r\n\r\n  const carUpdate = useSelector((state) => state.carUpdate);\r\n  const {\r\n    loading: carUpdateLoading,\r\n    error: carUpdateError,\r\n    success: carUpdateSuccess,\r\n  } = carUpdate;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n    if (driverUpdateSuccess) {\r\n      setSuccess(true);\r\n      setMessage(\"Driver Updated Successfully..!!\");\r\n      dispatch({ type: DRIVER_UPDATE_RESET });\r\n    } else if (carUpdateSuccess) {\r\n      setSuccess(true);\r\n      setMessage(\"Car Assigned Successfully..!!\");\r\n      dispatch({ type: CAR_UPDATE_RESET });\r\n    } else {\r\n      if (!driver.firstName || driver._id !== id) {\r\n        dispatch(getDriverDetails(id));\r\n      } else {\r\n        if (driver.carId) {\r\n          dispatch(getCarDetails(driver.carId));\r\n        }\r\n        setFirstName(driver.firstName);\r\n        setLastName(driver.lastName);\r\n        setMobileNumber(driver.mobileNumber);\r\n        setCarAssignedDate(driver.carAssignedDate);\r\n        setPassword({\r\n          ...password,\r\n          password: driver.password,\r\n        });\r\n        setConfirmPassword(driver.password);\r\n        setLicense(driver.licence);\r\n        setCarId(driver.carId);\r\n        setImage(driver.photo);\r\n        setLicenseImage(driver.licenceImage);\r\n        setBirthDate(driver.birthDate);\r\n        setDesignation(driver.designation);\r\n        setStatus(driver.status);\r\n      }\r\n    }\r\n  }, [dispatch, driver, driverUpdateSuccess, carUpdateSuccess, id]);\r\n\r\n  const hasNumber = (str) => {\r\n    return /\\d/.test(str);\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setPassword({\r\n      ...password,\r\n      showPassword: !password.showPassword,\r\n    });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n  const updateHandler = () => {\r\n    dispatch(\r\n      updateDriver({\r\n        _id: id,\r\n        firstName,\r\n        lastName,\r\n        mobileNumber,\r\n        carAssignedDate,\r\n        licence: license,\r\n        password: password.password,\r\n        image,\r\n        licenceImage: licenseImage,\r\n        designation,\r\n        birthDate,\r\n        carId,\r\n        status,\r\n      }),\r\n    );\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <>\r\n          <PageTitle title=\"Edit Driver\" />\r\n          <Paper>\r\n            <div\r\n              style={{\r\n                paddingLeft: \"4%\",\r\n                paddingRight: \"4%\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Typography variant=\"h1\">\r\n                        {\" \"}\r\n                        <Skeleton variant=\"text\" />\r\n                      </Typography>\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Skeleton variant=\"circular\" width={40} height={40} />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"circular\" width={40} height={40} />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <Typography variant=\"h1\">\r\n                      {\" \"}\r\n                      <Skeleton variant=\"text\" />\r\n                    </Typography>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n            </div>\r\n          </Paper>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <PageTitle title=\"Edit Driver\" />\r\n\r\n          <Paper>\r\n            {/* <Grid\r\n              container\r\n              direction=\"row\"\r\n              justify=\"space-between\"\r\n              alignItems=\"center\"\r\n              spacing={2}\r\n              style={{\r\n                paddingLeft: \"4%\",\r\n                paddingRight: \"4%\",\r\n                paddingTop: \"2%\",\r\n                paddingBottom: \"2%\",\r\n              }}\r\n            >\r\n              <Grid item xs={12}> */}\r\n            <AssignCar driver={driver} id={id} car={{ ...car }} cars={cars} />\r\n            {/* </Grid>\r\n            </Grid> */}\r\n            <form\r\n              onSubmit={updateHandler}\r\n              style={{\r\n                paddingLeft: \"4%\",\r\n                paddingRight: \"4%\",\r\n              }}\r\n            >\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <TextField\r\n                      id=\"first-name\"\r\n                      name=\"firstName\"\r\n                      label=\"First Name\"\r\n                      type=\"text\"\r\n                      value={firstName}\r\n                      helperText={\r\n                        firstName\r\n                          ? !hasNumber(firstName)\r\n                            ? \"\"\r\n                            : \"Only Numbers are allowed\"\r\n                          : \"\"\r\n                      }\r\n                      error={\r\n                        firstName\r\n                          ? !hasNumber(firstName)\r\n                            ? false\r\n                            : true\r\n                          : false\r\n                      }\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <PersonIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setFirstName(e.target.value);\r\n                      }}\r\n                      required\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <TextField\r\n                      id=\"last-name\"\r\n                      name=\"lastName\"\r\n                      label=\"Last Name\"\r\n                      type=\"text\"\r\n                      value={lastName}\r\n                      helperText={\r\n                        lastName\r\n                          ? !hasNumber(lastName)\r\n                            ? \"\"\r\n                            : \"Only Numbers are allowed\"\r\n                          : \"\"\r\n                      }\r\n                      error={\r\n                        lastName ? (!hasNumber(lastName) ? false : true) : false\r\n                      }\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <PersonIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setLastName(e.target.value);\r\n                      }}\r\n                      required\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <TextField\r\n                      id=\"contact\"\r\n                      name=\"contact\"\r\n                      label=\"Mobile Number\"\r\n                      type=\"number\"\r\n                      value={mobileNumber}\r\n                      onChange={(e) => {\r\n                        setMobileNumber(e.target.value);\r\n                      }}\r\n                      inputProps={{\r\n                        inputMode: \"numeric\",\r\n                        pattern: \"[0-9]*\",\r\n                      }}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <ContactIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      helperText={\r\n                        mobileNumber\r\n                          ? mobileNumber.length > 10\r\n                            ? \"Mobile Number is greater than 10 digits\"\r\n                            : mobileNumber.length === 10\r\n                            ? \"\"\r\n                            : \"Mobile Number is less than 10 digits\"\r\n                          : \"\"\r\n                      }\r\n                      error={\r\n                        mobileNumber\r\n                          ? mobileNumber.length > 10\r\n                            ? true\r\n                            : mobileNumber.length === 10\r\n                            ? false\r\n                            : true\r\n                          : false\r\n                      }\r\n                      required\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  {image ? (\r\n                    <Badge\r\n                      overlap=\"circular\"\r\n                      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                      badgeContent={\r\n                        <CloseIcon\r\n                          onClick={() => setImage(\"\")}\r\n                          style={{\r\n                            fontSize: \"18px\",\r\n                            color: \"red\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                        />\r\n                      }\r\n                    >\r\n                      <Avatar\r\n                        alt=\"Remy Sharp\"\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => {\r\n                          setImageModal(true);\r\n                          setModalImage(image);\r\n                        }}\r\n                        src={`${image}`}\r\n                        sx={{ boxShadow: 4 }}\r\n                      />\r\n                    </Badge>\r\n                  ) : !uploading ? (\r\n                    <Stack>\r\n                      <TextField\r\n                        id=\"profile-image\"\r\n                        name=\"profile\"\r\n                        label=\"Profile Image\"\r\n                        accept=\"image/*\"\r\n                        type=\"file\"\r\n                        disabled={\r\n                          firstName.length > 0 && lastName.length > 0\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        helperText={\r\n                          firstName.length > 0 && lastName.length > 0\r\n                            ? \"\"\r\n                            : \"Please Enter First and Last Name\"\r\n                        }\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                              <ImageIcon />\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        onChange={async (e) => {\r\n                          const file = e.target.files[0];\r\n\r\n                          var blob = file.slice(0, file.size, file.type);\r\n                          var newFile = new File(\r\n                            [blob],\r\n                            `${firstName}_${mobileNumber}_Profile`,\r\n                            {\r\n                              type: file.type,\r\n                            },\r\n                          );\r\n                          const formData = new FormData();\r\n                          formData.append(\"image\", newFile);\r\n\r\n                          setUploading(true);\r\n\r\n                          try {\r\n                            const config = {\r\n                              headers: {\r\n                                \"Content-Type\": \"multipart/form-data\",\r\n                              },\r\n                            };\r\n                            const { data } = await axios.post(\r\n                              `${AppConst.BASE_URL}/api/upload/driver/${firstName}/${lastName}`,\r\n                              formData,\r\n                              config,\r\n                            );\r\n                            setImage(data);\r\n                            setUploading(false);\r\n                          } catch (error) {\r\n                            setUploading(false);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                  ) : (\r\n                    <Stack direction=\"row\" spacing={2}>\r\n                      <LoadingButton\r\n                        loading\r\n                        loadingPosition=\"start\"\r\n                        startIcon={<SaveIcon />}\r\n                        variant=\"outlined\"\r\n                        style={{\r\n                          color: \"green\",\r\n                        }}\r\n                      >\r\n                        Uploading...\r\n                      </LoadingButton>\r\n                    </Stack>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <Stack>\r\n                      <DatePicker\r\n                        label=\"Birth Date\"\r\n                        renderInput={(params) => <TextField {...params} />}\r\n                        inputFormat=\"dd/MM/yyyy\"\r\n                        clearable={true}\r\n                        value={birthDate}\r\n                        onChange={(newValue) => {\r\n                          setBirthDate(newValue);\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                  </LocalizationProvider>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <FormControl variant=\"outlined\" fullWidth>\r\n                      <InputLabel id=\"select-label\">\r\n                        <em>Choose Designation</em>\r\n                      </InputLabel>\r\n                      <Select\r\n                        labelId=\"select-label\"\r\n                        label=\"Choose Designation\"\r\n                        defaultValue={designation}\r\n                        value={designation}\r\n                        onChange={(e) => {\r\n                          setDesignation(e.target.value);\r\n                        }}\r\n                        autoWidth\r\n                      >\r\n                        <MenuItem value=\"\">\r\n                          <em>Choose Designation</em>\r\n                        </MenuItem>\r\n\r\n                        <MenuItem value=\"Driver\">Driver</MenuItem>\r\n                      </Select>\r\n                    </FormControl>\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <TextField\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      label=\"Password\"\r\n                      type={password.showPassword ? \"text\" : \"password\"}\r\n                      value={password.password}\r\n                      InputProps={{\r\n                        endAdornment: (\r\n                          <InputAdornment\r\n                            onMouseDown={handleMouseDownPassword}\r\n                            onClick={handleClickShowPassword}\r\n                            edge=\"end\"\r\n                          >\r\n                            {password.showPassword ? (\r\n                              <VisibilityOff />\r\n                            ) : (\r\n                              <Visibility />\r\n                            )}\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                      onChange={(e) => {\r\n                        setPassword({\r\n                          ...password,\r\n                          password: e.target.value,\r\n                        });\r\n                      }}\r\n                      required\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <TextField\r\n                      id=\"cnf-password\"\r\n                      name=\"confirmPassword\"\r\n                      label=\"Confirm Password\"\r\n                      type=\"password\"\r\n                      value={confirmPassword}\r\n                      onChange={(e) => {\r\n                        setConfirmPassword(e.target.value);\r\n                      }}\r\n                      color={\r\n                        password && confirmPassword\r\n                          ? password.password === confirmPassword\r\n                            ? \"success\"\r\n                            : \"\"\r\n                          : \"\"\r\n                      }\r\n                      error={\r\n                        password && confirmPassword\r\n                          ? password.password === confirmPassword\r\n                            ? false\r\n                            : true\r\n                          : false\r\n                      }\r\n                      helperText={\r\n                        password && confirmPassword\r\n                          ? password.password === confirmPassword\r\n                            ? \"Password Matched\"\r\n                            : \"Password does not match\"\r\n                          : \"\"\r\n                      }\r\n                      required\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <Stack>\r\n                    <TextField\r\n                      id=\"license\"\r\n                      name=\"license\"\r\n                      label=\"License Number\"\r\n                      type=\"text\"\r\n                      value={license}\r\n                      onChange={(e) => {\r\n                        setLicense(e.target.value);\r\n                      }}\r\n                      InputProps={{\r\n                        startAdornment: (\r\n                          <InputAdornment position=\"start\">\r\n                            <LicenseIcon />\r\n                          </InputAdornment>\r\n                        ),\r\n                      }}\r\n                    />\r\n                  </Stack>\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  {licenseImage ? (\r\n                    <Badge\r\n                      overlap=\"circular\"\r\n                      anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                      badgeContent={\r\n                        <CloseIcon\r\n                          onClick={() => setLicenseImage(\"\")}\r\n                          style={{\r\n                            fontSize: \"18px\",\r\n                            color: \"red\",\r\n                            cursor: \"pointer\",\r\n                          }}\r\n                        />\r\n                      }\r\n                    >\r\n                      <Avatar\r\n                        alt=\"Remy Sharp\"\r\n                        style={{\r\n                          cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => {\r\n                          setImageModal(true);\r\n                          setModalImage(licenseImage);\r\n                        }}\r\n                        src={`${licenseImage}`}\r\n                        sx={{ boxShadow: 4 }}\r\n                      />\r\n                    </Badge>\r\n                  ) : !licenseUploading ? (\r\n                    <Stack>\r\n                      <TextField\r\n                        id=\"license-image\"\r\n                        name=\"license\"\r\n                        label=\"License Image\"\r\n                        accept=\"image/*\"\r\n                        type=\"file\"\r\n                        InputProps={{\r\n                          startAdornment: (\r\n                            <InputAdornment position=\"start\">\r\n                              <ImageIcon />\r\n                            </InputAdornment>\r\n                          ),\r\n                        }}\r\n                        disabled={\r\n                          firstName.length > 0 && lastName.length > 0\r\n                            ? false\r\n                            : true\r\n                        }\r\n                        helperText={\r\n                          firstName.length > 0 && lastName.length > 0\r\n                            ? \"\"\r\n                            : \"Please Enter First and Last Name\"\r\n                        }\r\n                        onChange={async (e) => {\r\n                          const file = e.target.files[0];\r\n\r\n                          var blob = file.slice(0, file.size, file.type);\r\n                          var newFile = new File(\r\n                            [blob],\r\n                            `${firstName}_${mobileNumber}_License`,\r\n                            {\r\n                              type: file.type,\r\n                            },\r\n                          );\r\n                          const formData = new FormData();\r\n                          formData.append(\"image\", newFile);\r\n\r\n                          setLicenseUploading(true);\r\n\r\n                          try {\r\n                            const config = {\r\n                              headers: {\r\n                                \"Content-Type\": \"multipart/form-data\",\r\n                              },\r\n                            };\r\n\r\n                            const { data } = await axios.post(\r\n                              `${AppConst.BASE_URL}/api/upload/driver/${firstName}/${lastName}`,\r\n                              formData,\r\n                              config,\r\n                            );\r\n                            setLicenseImage(data);\r\n                            setLicenseUploading(false);\r\n                          } catch (error) {\r\n                            setLicenseUploading(false);\r\n                          }\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                  ) : (\r\n                    <Stack direction=\"row\" spacing={2}>\r\n                      <LoadingButton\r\n                        loading\r\n                        loadingPosition=\"start\"\r\n                        startIcon={<SaveIcon />}\r\n                        variant=\"outlined\"\r\n                        style={{\r\n                          color: \"green\",\r\n                        }}\r\n                      >\r\n                        Uploading...\r\n                      </LoadingButton>\r\n                    </Stack>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                alignItems=\"center\"\r\n                justify=\"space-between\"\r\n                direction=\"row\"\r\n                spacing={4}\r\n              >\r\n                <Grid item xs={6}>\r\n                  <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                    <Stack>\r\n                      <DatePicker\r\n                        label=\"Joining Date\"\r\n                        renderInput={(params) => <TextField {...params} />}\r\n                        inputFormat=\"dd/MM/yyyy\"\r\n                        clearable={true}\r\n                        value={carAssignedDate}\r\n                        onChange={(newValue) => {\r\n                          setCarAssignedDate(newValue);\r\n                        }}\r\n                      />\r\n                    </Stack>\r\n                  </LocalizationProvider>\r\n                </Grid>\r\n                <Grid item xs={6}></Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n                style={{ padding: \"2%\" }}\r\n              >\r\n                <Button\r\n                  type=\"submit\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  endIcon={<FaSave />}\r\n                >\r\n                  Save\r\n                </Button>\r\n              </Grid>\r\n            </form>\r\n          </Paper>\r\n          <Modal\r\n            open={imageModal}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box sx={style}>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item xs={11}></Grid>\r\n                <Grid item xs={1}>\r\n                  <Typography\r\n                    style={{\r\n                      margin: \"6px\",\r\n                      fontWidth: \"bold\",\r\n                    }}\r\n                  >\r\n                    <CloseIcon\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => setImageModal(false)}\r\n                    />\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item xs={12}>\r\n                  <img\r\n                    alt=\"\"\r\n                    style={{ height: \"50%\", width: \"50%\" }}\r\n                    src={`${modalImage}`}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Modal>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditDriverForm;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\Add\\AddDriverForm.js",["495"],"import {\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Paper,\r\n  Snackbar,\r\n  Select,\r\n} from \"@material-ui/core\";\r\nimport { DatePicker, LocalizationProvider, LoadingButton } from \"@mui/lab\";\r\nimport {\r\n  Avatar,\r\n  Badge,\r\n  Button,\r\n  InputAdornment,\r\n  Stack,\r\n  TextField,\r\n  Box,\r\n  Modal,\r\n} from \"@mui/material\";\r\nimport {\r\n  PermContactCalendar as ContactIcon,\r\n  Person as PersonIcon,\r\n  Save as SaveIcon,\r\n  Visibility,\r\n  VisibilityOff,\r\n  Assignment as LicenseIcon,\r\n  CameraFront as ImageIcon,\r\n  BackupRounded as SubmitIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nimport useStyle from \"../../dashboard/styles\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport PageTitle from \"../../../components/PageTitle/PageTitle\";\r\nimport axios from \"axios\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCarList } from \"../../../Actions/carActions\";\r\nimport { registerDriver } from \"../../../Actions/driverActions\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Notification from \"../../../components/Notification/Notification\";\r\nimport { AppConst } from \"../../../constants/appConstants\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst AddDriverForm = () => {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n  const classes = useStyle();\r\n  const [position] = useState({\r\n    vertical: \"top\",\r\n    horizontal: \"right\",\r\n  });\r\n  const [alert, setAlert] = useState(false);\r\n  const { vertical, horizontal } = position;\r\n  const [imageModal, setImageModal] = useState(false);\r\n  const [modalImage, setModalImage] = useState(\"\");\r\n  const [mobileNumber, setMobileNumber] = useState(\"\");\r\n  const [firstName, setFirstName] = useState(\"\");\r\n  const [lastName, setLastName] = useState(\"\");\r\n  const [birthDate, setBirthDate] = useState(null);\r\n  const [image, setImage] = useState(\"\");\r\n  const [carId, setCarId] = useState(\"\");\r\n  const [password, setPassword] = useState({\r\n    password: \"\",\r\n    showPassword: false,\r\n  });\r\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\r\n  const [designation, setDesignation] = useState(\"\");\r\n  const [license, setLicense] = useState(\"\");\r\n  const [licenseImage, setLicenseImage] = useState(\"\");\r\n  const [uploading, setUploading] = useState(false);\r\n  const [licenseUploading, setLicenseUploading] = useState(false);\r\n  const [carAssignedDate, setCarAssignedDate] = useState(null);\r\n  const [success, setSuccess] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const carList = useSelector((state) => state.carList);\r\n  const { cars } = carList;\r\n\r\n  const driverRegister = useSelector((state) => state.driverRegister);\r\n  const { error, driverInfo } = driverRegister;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n    if (driverInfo) {\r\n      if (Object.keys(driverInfo).length !== 0) {\r\n        setSuccess(true);\r\n        setAlert(true);\r\n        setMessage(\"Driver added successfully...!\");\r\n        setTimeout(() => {\r\n          history.push(`/app/drivers/list?driverInfo`);\r\n        }, 1000);\r\n      }\r\n    } else if (error) {\r\n      setAlert(true);\r\n      setSuccess(false);\r\n      setMessage(error);\r\n    }\r\n  }, [dispatch, driverInfo, birthDate, error, history]);\r\n\r\n  const hasNumber = (str) => {\r\n    return /\\d/.test(str);\r\n  };\r\n\r\n  const handleClickShowPassword = () => {\r\n    setPassword({\r\n      ...password,\r\n      showPassword: !password.showPassword,\r\n    });\r\n  };\r\n\r\n  const handleMouseDownPassword = (event) => {\r\n    event.preventDefault();\r\n  };\r\n\r\n  const submitHandler = (e) => {\r\n    dispatch(\r\n      registerDriver(\r\n        firstName,\r\n        lastName,\r\n        mobileNumber,\r\n        password,\r\n        image,\r\n        license,\r\n        licenseImage,\r\n        designation,\r\n        birthDate,\r\n        carAssignedDate,\r\n        carId,\r\n      ),\r\n    );\r\n\r\n    e.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Driver Form\" />\r\n      <Stack>\r\n        <Snackbar\r\n          open={alert}\r\n          autoHideDuration={1000}\r\n          onClose={() => setAlert(false)}\r\n          anchorOrigin={{ vertical, horizontal }}\r\n        >\r\n          <Notification\r\n            className={classes.notificationItem}\r\n            shadowless\r\n            type={success ? \"info\" : \"delivered\"}\r\n            message={`${message}`}\r\n            variant=\"contained\"\r\n            color={success ? \"success\" : \"secondary\"}\r\n          />\r\n        </Snackbar>\r\n      </Stack>\r\n      <Paper>\r\n        <form\r\n          onSubmit={submitHandler}\r\n          style={{\r\n            paddingTop: \"4%\",\r\n            paddingLeft: \"4%\",\r\n            paddingRight: \"4%\",\r\n          }}\r\n        >\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"first-name\"\r\n                  name=\"firstName\"\r\n                  label=\"First Name\"\r\n                  type=\"text\"\r\n                  value={firstName}\r\n                  helperText={\r\n                    firstName\r\n                      ? !hasNumber(firstName)\r\n                        ? \"\"\r\n                        : \"Only Numbers are allowed\"\r\n                      : \"\"\r\n                  }\r\n                  error={\r\n                    firstName ? (!hasNumber(firstName) ? false : true) : false\r\n                  }\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <PersonIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setFirstName(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"last-name\"\r\n                  name=\"lastName\"\r\n                  label=\"Last Name\"\r\n                  type=\"text\"\r\n                  value={lastName}\r\n                  helperText={\r\n                    lastName\r\n                      ? !hasNumber(lastName)\r\n                        ? \"\"\r\n                        : \"Only Numbers are allowed\"\r\n                      : \"\"\r\n                  }\r\n                  error={\r\n                    lastName ? (!hasNumber(lastName) ? false : true) : false\r\n                  }\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <PersonIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setLastName(e.target.value);\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"contact\"\r\n                  name=\"contact\"\r\n                  label=\"Mobile Number\"\r\n                  type=\"number\"\r\n                  onChange={(e) => {\r\n                    setMobileNumber(e.target.value);\r\n                  }}\r\n                  inputProps={{\r\n                    inputMode: \"numeric\",\r\n                    pattern: \"[0-9]*\",\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <ContactIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  helperText={\r\n                    mobileNumber\r\n                      ? mobileNumber.length > 10\r\n                        ? \"Mobile Number is greater than 10 digits\"\r\n                        : mobileNumber.length === 10\r\n                        ? \"\"\r\n                        : \"Mobile Number is less than 10 digits\"\r\n                      : \"\"\r\n                  }\r\n                  error={\r\n                    mobileNumber\r\n                      ? mobileNumber.length > 10\r\n                        ? true\r\n                        : mobileNumber.length === 10\r\n                        ? false\r\n                        : true\r\n                      : false\r\n                  }\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {image ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(image);\r\n                    }}\r\n                    src={`${image}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !uploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"profile-image\"\r\n                    name=\"profile\"\r\n                    label=\"Profile Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    disabled={\r\n                      firstName.length > 0 && lastName.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      firstName.length > 0 && lastName.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter First and Last Name\"\r\n                    }\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${firstName}_${mobileNumber}_Profile`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n\r\n                      setUploading(true);\r\n\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/driver/${firstName}/${lastName}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setImage(data);\r\n                        setUploading(false);\r\n                      } catch (error) {\r\n                        setUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={6}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Birth Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={birthDate}\r\n                    onChange={(newValue) => {\r\n                      setBirthDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel id=\"select-label\">\r\n                    <em>Choose Designation</em>\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId=\"select-label\"\r\n                    label=\"Choose Designation\"\r\n                    value={designation}\r\n                    onChange={(e) => {\r\n                      setDesignation(e.target.value);\r\n                    }}\r\n                    autoWidth\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>Choose Designation</em>\r\n                    </MenuItem>\r\n\r\n                    <MenuItem value=\"Driver\">Driver</MenuItem>\r\n                  </Select>\r\n                </FormControl>\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  label=\"Password\"\r\n                  type={password.showPassword ? \"text\" : \"password\"}\r\n                  value={password.password}\r\n                  InputProps={{\r\n                    endAdornment: (\r\n                      <InputAdornment\r\n                        onMouseDown={handleMouseDownPassword}\r\n                        onClick={handleClickShowPassword}\r\n                        edge=\"end\"\r\n                      >\r\n                        {password.showPassword ? (\r\n                          <VisibilityOff />\r\n                        ) : (\r\n                          <Visibility />\r\n                        )}\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                  onChange={(e) => {\r\n                    setPassword({\r\n                      ...password,\r\n                      password: e.target.value,\r\n                    });\r\n                  }}\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"cnf-password\"\r\n                  name=\"confirmPassword\"\r\n                  label=\"Confirm Password\"\r\n                  type=\"password\"\r\n                  value={confirmPassword}\r\n                  onChange={(e) => {\r\n                    setConfirmPassword(e.target.value);\r\n                  }}\r\n                  color={\r\n                    password && confirmPassword\r\n                      ? password.password === confirmPassword\r\n                        ? \"success\"\r\n                        : \"\"\r\n                      : \"\"\r\n                  }\r\n                  error={\r\n                    password && confirmPassword\r\n                      ? password.password === confirmPassword\r\n                        ? false\r\n                        : true\r\n                      : false\r\n                  }\r\n                  helperText={\r\n                    password && confirmPassword\r\n                      ? password.password === confirmPassword\r\n                        ? \"Password Matched\"\r\n                        : \"Password does not match\"\r\n                      : \"\"\r\n                  }\r\n                  required\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <TextField\r\n                  id=\"license\"\r\n                  name=\"license\"\r\n                  label=\"License Number\"\r\n                  type=\"text\"\r\n                  value={license}\r\n                  onChange={(e) => {\r\n                    setLicense(e.target.value);\r\n                  }}\r\n                  InputProps={{\r\n                    startAdornment: (\r\n                      <InputAdornment position=\"start\">\r\n                        <LicenseIcon />\r\n                      </InputAdornment>\r\n                    ),\r\n                  }}\r\n                />\r\n              </Stack>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              {licenseImage ? (\r\n                <Badge\r\n                  overlap=\"circular\"\r\n                  anchorOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                  badgeContent={\r\n                    <CloseIcon\r\n                      onClick={() => setLicenseImage(\"\")}\r\n                      style={{\r\n                        fontSize: \"18px\",\r\n                        color: \"red\",\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                    />\r\n                  }\r\n                >\r\n                  <Avatar\r\n                    alt=\"Remy Sharp\"\r\n                    style={{\r\n                      cursor: \"pointer\",\r\n                    }}\r\n                    onClick={() => {\r\n                      setImageModal(true);\r\n                      setModalImage(licenseImage);\r\n                    }}\r\n                    src={`${licenseImage}`}\r\n                    sx={{ boxShadow: 4 }}\r\n                  />\r\n                </Badge>\r\n              ) : !licenseUploading ? (\r\n                <Stack>\r\n                  <TextField\r\n                    id=\"license-image\"\r\n                    name=\"license\"\r\n                    label=\"License Image\"\r\n                    accept=\"image/*\"\r\n                    type=\"file\"\r\n                    InputProps={{\r\n                      startAdornment: (\r\n                        <InputAdornment position=\"start\">\r\n                          <ImageIcon />\r\n                        </InputAdornment>\r\n                      ),\r\n                    }}\r\n                    disabled={\r\n                      firstName.length > 0 && lastName.length > 0 ? false : true\r\n                    }\r\n                    helperText={\r\n                      firstName.length > 0 && lastName.length > 0\r\n                        ? \"\"\r\n                        : \"Please Enter First and Last Name\"\r\n                    }\r\n                    onChange={async (e) => {\r\n                      const file = e.target.files[0];\r\n\r\n                      var blob = file.slice(0, file.size, file.type);\r\n                      var newFile = new File(\r\n                        [blob],\r\n                        `${firstName}_${mobileNumber}_License`,\r\n                        {\r\n                          type: file.type,\r\n                        },\r\n                      );\r\n                      const formData = new FormData();\r\n                      formData.append(\"image\", newFile);\r\n\r\n                      setLicenseUploading(true);\r\n\r\n                      try {\r\n                        const config = {\r\n                          headers: {\r\n                            \"Content-Type\": \"multipart/form-data\",\r\n                          },\r\n                        };\r\n\r\n                        const { data } = await axios.post(\r\n                          `${AppConst.BASE_URL}/api/upload/driver/${firstName}/${lastName}`,\r\n                          formData,\r\n                          config,\r\n                        );\r\n                        setLicenseImage(data);\r\n                        setLicenseUploading(false);\r\n                      } catch (error) {\r\n                        setLicenseUploading(false);\r\n                      }\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              ) : (\r\n                <Stack direction=\"row\" spacing={2}>\r\n                  <LoadingButton\r\n                    loading\r\n                    loadingPosition=\"start\"\r\n                    startIcon={<SaveIcon />}\r\n                    variant=\"outlined\"\r\n                    style={{\r\n                      color: \"green\",\r\n                    }}\r\n                  >\r\n                    Uploading...\r\n                  </LoadingButton>\r\n                </Stack>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            justify=\"space-between\"\r\n            direction=\"row\"\r\n            spacing={4}\r\n          >\r\n            <Grid item xs={6}>\r\n              <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n                <Stack>\r\n                  <DatePicker\r\n                    label=\"Joining Date\"\r\n                    renderInput={(params) => <TextField {...params} />}\r\n                    inputFormat=\"dd/MM/yyyy\"\r\n                    clearable={true}\r\n                    value={carAssignedDate}\r\n                    onChange={(newValue) => {\r\n                      setCarAssignedDate(newValue);\r\n                    }}\r\n                  />\r\n                </Stack>\r\n              </LocalizationProvider>\r\n            </Grid>\r\n            <Grid item xs={6}>\r\n              <Stack>\r\n                <FormControl variant=\"outlined\" fullWidth>\r\n                  <InputLabel id=\"select-label\">\r\n                    <em>Assign Car</em>\r\n                  </InputLabel>\r\n                  <Select\r\n                    labelId=\"select-label\"\r\n                    label=\"Choose Car\"\r\n                    value={carId}\r\n                    onChange={(e) => {\r\n                      setCarId(e.target.value);\r\n                    }}\r\n                    autoWidth\r\n                  >\r\n                    <MenuItem value=\"\">\r\n                      <em>Choose Car</em>\r\n                    </MenuItem>\r\n\r\n                    {cars.map((c) => {\r\n                      if (c.carStatus === false) {\r\n                        return (\r\n                          <MenuItem value={c} key={c._id}>\r\n                            {c.carName + \"-\" + c.carNumber}\r\n                          </MenuItem>\r\n                        );\r\n                      }\r\n                    })}\r\n                  </Select>\r\n                </FormControl>\r\n              </Stack>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid\r\n            container\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            style={{ padding: \"2%\" }}\r\n          >\r\n            <Button\r\n              type=\"submit\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<SubmitIcon />}\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Grid>\r\n        </form>\r\n      </Paper>\r\n      <Modal\r\n        open={imageModal}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\"\r\n      >\r\n        <Box sx={style}>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item xs={11}></Grid>\r\n            <Grid item xs={1}>\r\n              <Typography\r\n                style={{\r\n                  margin: \"6px\",\r\n                  fontWidth: \"bold\",\r\n                }}\r\n              >\r\n                <CloseIcon\r\n                  style={{\r\n                    cursor: \"pointer\",\r\n                  }}\r\n                  onClick={() => setImageModal(false)}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <img\r\n            alt=\"\"\r\n            style={{ height: \"100%\", width: \"100%\" }}\r\n            src={`${modalImage}`}\r\n          />\r\n        </Box>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddDriverForm;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\expenseActions.js",["496"],"import axios from \"axios\";\r\nimport { AppConst, BASE_URL } from \"../constants/appConstants\";\r\nimport {\r\n  ADD_EXPENSE_REQUEST,\r\n  ADD_EXPENSE_SUCCESS,\r\n  ADD_EXPENSE_FAIL,\r\n  EXPENSE_LIST_REQUEST,\r\n  EXPENSE_LIST_SUCCESS,\r\n  EXPENSE_LIST_FAIL,\r\n  EXPENSE_UPDATE_REQUEST,\r\n  EXPENSE_UPDATE_SUCCESS,\r\n  EXPENSE_UPDATE_FAIL,\r\n  EXPENSE_UPDATE_DEPARTMENT_REQUEST,\r\n  EXPENSE_UPDATE_DEPARTMENT_SUCCESS,\r\n  EXPENSE_UPDATE_DEPARTMENT_FAIL,\r\n} from \"../constants/expenseConstants\";\r\n\r\nexport const addExpense = (expense) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: ADD_EXPENSE_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    const { data } = await axios.post(\"/api/admin/expense\", expense, config);\r\n\r\n    dispatch({\r\n      type: ADD_EXPENSE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ADD_EXPENSE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateExpense = (expense, status, id, driver) => async (\r\n  dispatch,\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: EXPENSE_UPDATE_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const expenseStatus = {\r\n      expense: expense,\r\n      status: status,\r\n      driverId: driver,\r\n    };\r\n\r\n    const { data } = await axios.put(\r\n      `/api/admin/expense/${id}`,\r\n      expenseStatus,\r\n\r\n      config,\r\n    );\r\n\r\n    dispatch({\r\n      type: EXPENSE_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: EXPENSE_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateExpenseDepartment = (id, department) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: EXPENSE_UPDATE_DEPARTMENT_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    const { data } = await axios.put(\r\n      `/api/admin/expense/department/${id}?department=${department}`,\r\n      config,\r\n    );\r\n\r\n    dispatch({\r\n      type: EXPENSE_UPDATE_DEPARTMENT_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: EXPENSE_UPDATE_DEPARTMENT_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getExpense = (\r\n  keyword = \"\",\r\n  startDate = \"\",\r\n  endDate = \"\",\r\n) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: EXPENSE_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      adminLogin: { adminInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${adminInfo.token}`,\r\n      },\r\n    };\r\n    const { data } = await axios.get(\r\n      `${AppConst.BASE_URL}/api/admin/expense?keyword=${keyword}&endDate=${endDate}&startDate=${startDate}`,\r\n      config,\r\n    );\r\n\r\n    dispatch({\r\n      type: EXPENSE_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: EXPENSE_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\expenses\\ExpenseTable.js",["497","498","499","500","501","502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Chip,\r\n  Dialog,\r\n  DialogActions,\r\n  DialogTitle,\r\n  FormControl,\r\n  IconButton,\r\n  InputLabel,\r\n  MenuItem,\r\n  Grid,\r\n  Paper,\r\n  Select,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\n\r\nimport {\r\n  CheckCircle as AcceptIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport {\r\n  getExpense,\r\n  updateExpenseDepartment,\r\n} from \"../../Actions/expenseActions\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { displayDateFormate } from \"../../Services/DateFormate\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport { AppConst } from \"../../constants/appConstants\";\r\nimport { Slide } from \"react-toastify\";\r\nimport { Skeleton } from \"@mui/material\";\r\n\r\nconst states = {\r\n  accepted: \"success\",\r\n  pending: \"warning\",\r\n  rejected: \"secondary\",\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst ExpenseTable = ({ expenses, loading }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  var classes = useStyles();\r\n\r\n  const [department, setDepartment] = useState(\"Department\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [expenseImage, setExpenseImage] = useState(\"\");\r\n  const [showDownloadModal, setShowDownloadModal] = useState(false);\r\n  const [startDate, setStartDate] = useState(\"\");\r\n  const [endDate, setEndDate] = useState(\"\");\r\n  const [status, setStatus] = useState(\"Department\");\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [expense, setExpense] = useState(\"\");\r\n  const [statusId, setStatusId] = useState(\"\");\r\n  const [driver, setDriver] = useState(\"\");\r\n  const [loader, setLoader] = useState(false);\r\n\r\n  const updateStatus = () => {\r\n    // dispatch(\r\n    //   updateJourney(\r\n    //     journey,\r\n    //     status,\r\n    //     statusId,\r\n    //   ),\r\n    // );\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const updateDepartmentHandler = (e, ex) => {\r\n    // dispatch(updateExpenseDepartment(ex._id, e.target.value)).then(() => {\r\n    //   dispatch(getExpense());\r\n    // });\r\n  };\r\n\r\n  const exportToCsv = (e) => {\r\n    let title = [`${\" \"},${\" \"},${\"Driver Expenses\"}`, `${\" \"}`];\r\n\r\n    let headers = [\"sr.No,Driver,Department,Date,Expense Type,Expense Amount\"];\r\n    let expenseTypes;\r\n    // Convert users data to a csv\r\n    let usersCsv = expenses.reduce((acc, ex, i) => {\r\n      acc.push(\r\n        [\r\n          `${i + 1}`,\r\n          `${ex.driver.firstName} ${ex.driver.lastName}`,\r\n          `${ex.department === \"\" ? \"-\" : ex.department}`,\r\n          `${displayDateFormate(ex.date)}`,\r\n          `${ex.expenseType.toString().replace(\",\", \" \")}`, // `${ex.expenseType}`,,\r\n          `${ex.expenseAmount}`,\r\n        ].join(\",\"),\r\n      );\r\n      return acc;\r\n    }, []);\r\n    // downloadFile({\r\n    //   data: [...title, ...headers, ...usersCsv].join(\"\\n\"),\r\n    //   fileName: `expense_history.csv`,\r\n    //   fileType: \"text/csv\",\r\n    // });\r\n    setShowDownloadModal(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <TableContainer>\r\n          <Table stickyHeader className=\"mb-0\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Driver</TableCell>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell>Type</TableCell>\r\n                <TableCell>Amount</TableCell>\r\n                <TableCell>Department</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {[...Array(10)].map((_, i) => {\r\n                return (\r\n                  <TableRow key={i}>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Driver</TableCell>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Type</TableCell>\r\n                  <TableCell>Amount</TableCell>\r\n                  <TableCell>Department</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {expenses.map((ex, i) => {\r\n                  return (\r\n                    <TableRow key={i}>\r\n                      <TableCell>\r\n                        {ex.driver?.firstName} {ex.driver?.lastName}{\" \"}\r\n                      </TableCell>\r\n                      <TableCell>{displayDateFormate(ex.date)}</TableCell>\r\n\r\n                      {ex.expenseType.length > 20 ? (\r\n                        <TableCell>{ex.expenseType.slice(0, 20)}...</TableCell>\r\n                      ) : (\r\n                        <TableCell>{ex.expenseType}</TableCell>\r\n                      )}\r\n                      <TableCell>{ex.expenseAmount}</TableCell>\r\n                      {ex?.department ? (\r\n                        <TableCell>{ex?.department}</TableCell>\r\n                      ) : (\r\n                        <TableCell>\r\n                          <FormControl\r\n                            style={{\r\n                              width: \"200px\",\r\n                            }}\r\n                            variant=\"outlined\"\r\n                          >\r\n                            <InputLabel id=\"select-label\">\r\n                              <em>Choose Department</em>\r\n                            </InputLabel>\r\n                            <Select\r\n                              labelId=\"select-label\"\r\n                              id={`${ex._id}`}\r\n                              label=\"Choose Department\"\r\n                              onChange={(e) => setDepartment(e.target.value)}\r\n                              autoWidth\r\n                            >\r\n                              {AppConst.DEPARTMENT_LIST.map((d, i) => {\r\n                                return (\r\n                                  <MenuItem value={d} key={i}>\r\n                                    {d}\r\n                                  </MenuItem>\r\n                                );\r\n                              })}\r\n                            </Select>\r\n                          </FormControl>\r\n                        </TableCell>\r\n                      )}\r\n\r\n                      <TableCell>\r\n                        {/**/}\r\n                        {ex.status === \"pending\" ? (\r\n                          <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-between\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Grid item xs={6}>\r\n                              {\" \"}\r\n                              <IconButton className={classes.noPadding}>\r\n                                <AcceptIcon\r\n                                  classes={{\r\n                                    root: classes[states[\"accepted\"]],\r\n                                  }}\r\n                                />\r\n                              </IconButton>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              <IconButton className={classes.noPadding}>\r\n                                <CloseIcon\r\n                                  classes={{\r\n                                    root: classes[states[\"rejected\"]],\r\n                                  }}\r\n                                />\r\n                              </IconButton>\r\n                            </Grid>\r\n                          </Grid>\r\n                        ) : ex.status === \"accepted\" ? (\r\n                          <IconButton className={classes.noPadding}>\r\n                            <AcceptIcon\r\n                              classes={{\r\n                                root: classes[states[\"accepted\"]],\r\n                              }}\r\n                            />\r\n                          </IconButton>\r\n                        ) : (\r\n                          <IconButton className={classes.noPadding}>\r\n                            <CloseIcon\r\n                              classes={{\r\n                                root: classes[states[\"rejected\"]],\r\n                              }}\r\n                            />\r\n                          </IconButton>\r\n                        )}\r\n\r\n                        <Dialog\r\n                          onClose={() => setShowAlert(false)}\r\n                          open={showAlert}\r\n                          TransitionComponent={Transition}\r\n                        >\r\n                          <DialogTitle>{`Status will be changed to ${status?.toUpperCase()}..!!`}</DialogTitle>\r\n\r\n                          <DialogActions>\r\n                            <Button onClick={updateStatus}>OK</Button>\r\n                            <Button autoFocus>Cancel</Button>\r\n                          </DialogActions>\r\n                        </Dialog>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExpenseTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\History\\HistoryTable.js",["528","529","530","531","532"],"import {\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { Skeleton } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport {\r\n  CheckCircle as AcceptIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport { Typography } from \"../../../components/Wrappers/Wrappers\";\r\nimport { displayDateFormate } from \"../../../Services/DateFormate\";\r\nimport useStyles from \"../../dashboard/styles\";\r\n\r\nconst HistoryTable = ({ journeys, car, loading, carLoading }) => {\r\n  var classes = useStyles();\r\n  return (\r\n    <>\r\n      {loading || carLoading ? (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date </TableCell>\r\n                  <TableCell>Journey Description</TableCell>\r\n                  <TableCell>Start Reading</TableCell>\r\n                  <TableCell>End Reading</TableCell>\r\n                  <TableCell>Total Day Km Running</TableCell>\r\n                  <TableCell> Start Time</TableCell>\r\n                  <TableCell> End Time</TableCell>\r\n                  <TableCell>Total Hours</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {[...Array(10)].map((_) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      ) : (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date </TableCell>\r\n                  <TableCell>Journey Description</TableCell>\r\n                  <TableCell>Start Reading</TableCell>\r\n                  <TableCell>End Reading</TableCell>\r\n                  <TableCell>Total Day Km Running</TableCell>\r\n                  <TableCell> Start Time</TableCell>\r\n                  <TableCell> End Time</TableCell>\r\n                  <TableCell>Total Hours</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {journeys?.map((j, i) => {\r\n                  if (j.journey.status !== \"pending\") {\r\n                    return (\r\n                      <TableRow key={j._id}>\r\n                        <TableCell>\r\n                          {displayDateFormate(j.journey.journeyDate)}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {j.journey.startDestination.replace(\",\", \" \")}\r\n                        </TableCell>\r\n                        <TableCell>{j.journey.startReading}</TableCell>\r\n                        <TableCell>{j.journey.endReading}</TableCell>\r\n                        <TableCell>\r\n                          {j.journey.endReading - j.journey.startReading}\r\n                        </TableCell>\r\n\r\n                        <TableCell>10</TableCell>\r\n                        <TableCell>8</TableCell>\r\n                        <TableCell>10</TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  }\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoryTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Services\\DateFormate.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\charts\\Charts.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maps\\Maps.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\dashboard\\Dashboard.js",["533","534","535","536"],"import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { Box, Grid, InputBase } from \"@material-ui/core\";\r\nimport CountUp from \"react-countup\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\nimport { Search as SearchIcon } from \"@material-ui/icons\";\r\nimport classNames from \"classnames\";\r\n// components\r\nimport Widget from \"../../components/Widget\";\r\nimport PageTitle from \"../../components/PageTitle\";\r\nimport { Typography } from \"../../components/Wrappers\";\r\nimport JourneyTable from \"./components/journeyTable/JourneyTable\";\r\nimport { useEffect } from \"react\";\r\nimport { getJourneyList } from \"../../Actions/journeyActions\";\r\nimport { getCarList } from \"../../Actions/carActions\";\r\nimport { getDriversList } from \"../../Actions/driverActions\";\r\nimport { Skeleton } from \"@mui/material\";\r\n\r\nexport default function Dashboard(props) {\r\n  var [isSearchOpen, setSearchOpen] = useState(false);\r\n  const [keyword, setKeyword] = useState(\"\");\r\n  const [assignedCar, setAssignedCar] = useState(0);\r\n  const [unAssignedCar, setUnAssignedCar] = useState(0);\r\n  const [occupiedDrivers, setOccupiedDrivers] = useState(0);\r\n  const [freeDrivers, setFreeDrivers] = useState(0);\r\n  const [activeDrivers, setActiveDrivers] = useState(0);\r\n\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const driversList = useSelector((state) => state.driversList);\r\n  const { drivers, loading: driverListLoading } = driversList;\r\n  const carList = useSelector((state) => state.carList);\r\n  const { loading: carListLoading, error: carListError, cars } = carList;\r\n  const journeyList = useSelector((state) => state.journeyList);\r\n  const {\r\n    pendingJourneyCount,\r\n    acceptedJourneyCount,\r\n    rejectedJourneyCount,\r\n    loading,\r\n  } = journeyList;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList());\r\n    dispatch(getJourneyList());\r\n    dispatch(getDriversList());\r\n    calculateCount();\r\n  }, [dispatch]);\r\n\r\n  const calculateCount = () => {\r\n    let assignedCarCnt = 0;\r\n    let unAssignedCarCnt = 0;\r\n    cars.map((car) => {\r\n      if (car.carStatus === true) {\r\n        assignedCarCnt++;\r\n      } else {\r\n        unAssignedCarCnt++;\r\n      }\r\n    });\r\n    setAssignedCar(assignedCarCnt);\r\n    setUnAssignedCar(unAssignedCarCnt);\r\n\r\n    let occupiedCnt = 0;\r\n    let freeCnt = 0;\r\n    let activeDriverCnt = 0;\r\n    drivers.map((d) => {\r\n      if (d.carId?.length > 0) {\r\n        occupiedCnt++;\r\n      } else {\r\n        if (d.carId?.length < 0) {\r\n          freeCnt++;\r\n        }\r\n      }\r\n      if (d.status === \"active\") {\r\n        activeDriverCnt++;\r\n      }\r\n    });\r\n    setOccupiedDrivers(occupiedCnt);\r\n    setActiveDrivers(activeDriverCnt);\r\n    setFreeDrivers(freeCnt);\r\n  };\r\n  return (\r\n    <>\r\n      <PageTitle title=\"Dashboard\" />\r\n      <Grid container spacing={4}>\r\n        <Grid item lg={4} md={4} sm={6} xs={12}>\r\n          {driverListLoading ? (\r\n            <Box height={380} width={60} style={{ borderRadius: \"2px\" }}>\r\n              <Skeleton\r\n                animation=\"wave\"\r\n                variant=\"rectangular\"\r\n                width={390}\r\n                height={180}\r\n              />\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              <Widget\r\n                title=\"Drivers\"\r\n                upperTitle\r\n                bodyClass={classes.fullHeightBody}\r\n                className={classes.card}\r\n              >\r\n                <div className={classes.visitsNumberContainer}>\r\n                  <Grid container item alignItems={\"center\"}>\r\n                    <Grid item xs={6}>\r\n                      <Typography size=\"xl\" weight=\"medium\" noWrap>\r\n                        <CountUp end={drivers?.length} duration={1} />\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item xs={4}>\r\n                    <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                      Active\r\n                    </Typography>\r\n                    <Typography size=\"md\">\r\n                      {\" \"}\r\n                      <CountUp end={activeDrivers} duration={1} />\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                      Free\r\n                    </Typography>\r\n                    <Typography size=\"md\">\r\n                      {\" \"}\r\n                      <CountUp end={freeDrivers} duration={1} />\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                      Occupied\r\n                    </Typography>\r\n                    <Typography size=\"md\">\r\n                      {\" \"}\r\n                      <CountUp end={occupiedDrivers} duration={1} />\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Widget>\r\n            </>\r\n          )}\r\n        </Grid>\r\n        <Grid item lg={4} md={4} sm={6} xs={12}>\r\n          {carListLoading ? (\r\n            <Box>\r\n              {\" \"}\r\n              <Skeleton variant=\"rectangular\" width={390} height={180} />\r\n            </Box>\r\n          ) : (\r\n            <>\r\n              <Widget\r\n                title=\"Cars\"\r\n                upperTitle\r\n                bodyClass={classes.fullHeightBody}\r\n                className={classes.card}\r\n              >\r\n                <div className={classes.visitsNumberContainer}>\r\n                  <Grid container item alignItems={\"center\"}>\r\n                    <Grid item xs={12}>\r\n                      <Typography size=\"xl\" weight=\"medium\" noWrap>\r\n                        <CountUp end={cars?.length} duration={1} />\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </div>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid item xs={4}>\r\n                    <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                      Assigned\r\n                    </Typography>\r\n                    <Typography size=\"md\">\r\n                      {\" \"}\r\n                      <CountUp end={assignedCar} duration={1} />\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                      unAssigned\r\n                    </Typography>\r\n                    <Typography size=\"md\">\r\n                      {\" \"}\r\n                      <CountUp end={unAssignedCar} duration={1} />\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}></Grid>\r\n                </Grid>\r\n              </Widget>\r\n            </>\r\n          )}\r\n        </Grid>\r\n        <Grid item lg={4} md={4} sm={6} xs={12}>\r\n          {loading ? (\r\n            <Box>\r\n              {\" \"}\r\n              <Skeleton variant=\"rectangular\" width={390} height={180} />\r\n            </Box>\r\n          ) : (\r\n            <Widget\r\n              title=\"Pending Trips\"\r\n              upperTitle\r\n              bodyClass={classes.fullHeightBody}\r\n              className={classes.card}\r\n            >\r\n              <div className={classes.visitsNumberContainer}>\r\n                <Grid container item alignItems={\"center\"}>\r\n                  <Grid item xs={12}>\r\n                    <Typography size=\"xl\" weight=\"medium\" noWrap>\r\n                      <CountUp end={pendingJourneyCount} duration={1} />\r\n                      {/* {pendingJourneyCount} */}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </div>\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid item xs={4}>\r\n                  <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                    Accepted Trips\r\n                  </Typography>\r\n                  <Typography size=\"md\">\r\n                    <CountUp end={acceptedJourneyCount} duration={1} />\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                  <Typography color=\"text\" colorBrightness=\"secondary\" noWrap>\r\n                    Rejected Trips\r\n                  </Typography>\r\n                  <Typography size=\"md\">\r\n                    <CountUp end={rejectedJourneyCount} duration={1} />\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item xs={4}></Grid>\r\n              </Grid>\r\n            </Widget>\r\n          )}\r\n        </Grid>\r\n\r\n        <Grid item xs={12}>\r\n          <Widget\r\n            style={{\r\n              height: \"800px\",\r\n            }}\r\n            header={\r\n              <div className={classes.mainChartHeader}>\r\n                <Typography\r\n                  variant=\"h5\"\r\n                  color=\"text\"\r\n                  colorBrightness=\"secondary\"\r\n                >\r\n                  Pending Approval Trip\r\n                </Typography>\r\n\r\n                <div\r\n                  className={classNames(classes.search, {\r\n                    [classes.searchFocused]: isSearchOpen,\r\n                  })}\r\n                >\r\n                  <div\r\n                    className={classNames(classes.searchIcon, {\r\n                      [classes.searchIconOpened]: isSearchOpen,\r\n                    })}\r\n                    onClick={() => setSearchOpen(!isSearchOpen)}\r\n                  >\r\n                    <SearchIcon classes={{ root: classes.headerIcon }} />\r\n                  </div>\r\n                  <InputBase\r\n                    placeholder=\"Search by Driver…\"\r\n                    value={keyword}\r\n                    onChange={(e) => setKeyword(e.target.value)}\r\n                    classes={{\r\n                      root: classes.inputRoot,\r\n                      input: classes.inputInput,\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n            }\r\n            upperTitle\r\n            noBodyPadding\r\n            // bodyClass={classes.tableWidget}\r\n          >\r\n            <JourneyTable keyword={keyword} />\r\n          </Widget>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n}\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\Sidebar.js",["537","538"],"import React, { useState, useEffect } from \"react\";\r\nimport { Drawer, IconButton, List } from \"@material-ui/core\";\r\nimport {\r\n  Home as HomeIcon,\r\n  AccountBalance as ExpenseIcon,\r\n  People as DriversIcon,\r\n  TimeToLeave as CarsIcon,\r\n  LocalGasStation as FuelIcon,\r\n  ExitToApp as LogoutIcon,\r\n  ArrowBack as ArrowBackIcon,\r\n} from \"@material-ui/icons\";\r\nimport { MdEngineering as MaintenanceIcon } from \"react-icons/md\";\r\nimport { useTheme } from \"@material-ui/styles\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport classNames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\n// components\r\nimport SidebarLink from \"./components/SidebarLink/SidebarLink\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\nconst structure = [\r\n  { id: 0, label: \"Dashboard\", link: \"/app/dashboard\", icon: <HomeIcon /> },\r\n  {\r\n    id: 1,\r\n    label: \"Drivers\",\r\n    link: \"/app/drivers\",\r\n    icon: <DriversIcon />,\r\n    children: [\r\n      { label: \"List\", link: \"/app/drivers/list\" },\r\n      { label: \"Add Driver\", link: \"/app/drivers/add\" },\r\n    ],\r\n  },\r\n  {\r\n    id: 2,\r\n    label: \"Cars\",\r\n    link: \"/app/cars\",\r\n    icon: <CarsIcon />,\r\n    children: [\r\n      { label: \"List\", link: \"/app/cars/list\" },\r\n      { label: \"Add Car\", link: \"/app/cars/add\" },\r\n    ],\r\n  },\r\n  {\r\n    id: 3,\r\n    label: \"Expenses\",\r\n    link: \"/app/expenses\",\r\n    icon: <ExpenseIcon />,\r\n  },\r\n  {\r\n    id: 4,\r\n    label: \"Fuel History\",\r\n    link: \"/app/fuelhistory\",\r\n    icon: <FuelIcon />,\r\n    // children: [\r\n    //   { label: \"Icons\", link: \"/app/ui/icons\" },\r\n    //   { label: \"Charts\", link: \"/app/ui/charts\" },\r\n    //   { label: \"Maps\", link: \"/app/ui/maps\" },\r\n    // ],\r\n  },\r\n\r\n  {\r\n    id: 5,\r\n    label: \"Car Maintenance\",\r\n    link: \"/app/carmaintenance\",\r\n    icon: <MaintenanceIcon size={24} />,\r\n  },\r\n  {\r\n    id: 6,\r\n    label: \"Logout\",\r\n    link: \"https://flatlogic.com/forum\",\r\n    icon: <LogoutIcon />,\r\n  },\r\n  {\r\n    id: 7,\r\n    type: \"divider\",\r\n  },\r\n];\r\n\r\nfunction Sidebar({ location }) {\r\n  var classes = useStyles();\r\n  var theme = useTheme();\r\n  var classes = useStyles();\r\n  const dispatch = useDispatch();\r\n\r\n  const layout = useSelector((state) => state.layout);\r\n  const { isSidebarOpened } = layout;\r\n\r\n  var [isPermanent, setPermanent] = useState(true);\r\n\r\n  useEffect(function () {\r\n    window.addEventListener(\"resize\", handleWindowWidthChange);\r\n    handleWindowWidthChange();\r\n    return function cleanup() {\r\n      window.removeEventListener(\"resize\", handleWindowWidthChange);\r\n    };\r\n  });\r\n\r\n  return (\r\n    <Drawer\r\n      variant={isPermanent ? \"permanent\" : \"temporary\"}\r\n      className={classNames(classes.drawer, {\r\n        [classes.drawerOpen]: isSidebarOpened,\r\n        [classes.drawerClose]: !isSidebarOpened,\r\n      })}\r\n      classes={{\r\n        paper: classNames({\r\n          [classes.drawerOpen]: isSidebarOpened,\r\n          [classes.drawerClose]: !isSidebarOpened,\r\n        }),\r\n      }}\r\n      open={isSidebarOpened}\r\n    >\r\n      <div className={classes.toolbar} />\r\n      <div className={classes.mobileBackButton}>\r\n        <IconButton\r\n        // onClick={() => toggleSidebar(layoutDispatch)}\r\n        >\r\n          <ArrowBackIcon\r\n            classes={{\r\n              root: classNames(classes.headerIcon, classes.headerIconCollapse),\r\n            }}\r\n          />\r\n        </IconButton>\r\n      </div>\r\n      <List className={classes.sidebarList}>\r\n        {structure.map((link) => (\r\n          <SidebarLink\r\n            key={link.id}\r\n            location={location}\r\n            isSidebarOpened={isSidebarOpened}\r\n            {...link}\r\n          />\r\n        ))}\r\n      </List>\r\n    </Drawer>\r\n  );\r\n\r\n  // ##################################################################\r\n  function handleWindowWidthChange() {\r\n    var windowWidth = window.innerWidth;\r\n    var breakpointWidth = theme.breakpoints.values.md;\r\n    var isSmallScreen = windowWidth < breakpointWidth;\r\n\r\n    if (isSmallScreen && isPermanent) {\r\n      setPermanent(false);\r\n    } else if (!isSmallScreen && !isPermanent) {\r\n      setPermanent(true);\r\n    }\r\n  }\r\n}\r\n\r\nexport default withRouter(Sidebar);\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Header\\Header.js",["539","540","541","542","543","544","545","546","547","548","549","550"],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\icons\\Icons.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\carActions.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\PageTitle\\PageTitle.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Widget\\Widget.js",["551","552","553"],"import React, { useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  IconButton,\r\n  Menu,\r\n  MenuItem,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { MoreVert as MoreIcon } from \"@material-ui/icons\";\r\nimport classnames from \"classnames\";\r\n\r\n// styles\r\nimport useStyles from \"./styles\";\r\n\r\nexport default function Widget({\r\n  children,\r\n  title,\r\n  noBodyPadding,\r\n  bodyClass,\r\n  disableWidgetMenu,\r\n  header,\r\n  noHeaderPadding,\r\n  headerClass,\r\n  style,\r\n  noWidgetShadow,\r\n  ...props\r\n}) {\r\n  var classes = useStyles();\r\n\r\n  // local\r\n  var [moreButtonRef, setMoreButtonRef] = useState(null);\r\n  var [isMoreMenuOpen, setMoreMenuOpen] = useState(false);\r\n\r\n  return (\r\n    <div className={classes.widgetWrapper} style={style && { ...style }}>\r\n      <Paper\r\n        className={classes.paper}\r\n        classes={{\r\n          root: classnames(classes.widgetRoot, {\r\n            [classes.noWidgetShadow]: noWidgetShadow,\r\n          }),\r\n        }}\r\n      >\r\n        <div\r\n          className={classnames(classes.widgetHeader, {\r\n            [classes.noPadding]: noHeaderPadding,\r\n            [headerClass]: headerClass,\r\n          })}\r\n        >\r\n          {header ? (\r\n            header\r\n          ) : (\r\n            <React.Fragment>\r\n              <Typography variant=\"h5\" color=\"textSecondary\" noWrap>\r\n                {title}\r\n              </Typography>\r\n              {/* {!disableWidgetMenu && (\r\n                <IconButton\r\n                  color=\"primary\"\r\n                  classes={{ root: classes.moreButton }}\r\n                  aria-owns=\"widget-menu\"\r\n                  aria-haspopup=\"true\"\r\n                  onClick={() => setMoreMenuOpen(true)}\r\n                  buttonRef={setMoreButtonRef}\r\n                >\r\n                  <MoreIcon />\r\n                </IconButton>\r\n              )} */}\r\n            </React.Fragment>\r\n          )}\r\n        </div>\r\n        <div\r\n          className={classnames(classes.widgetBody, {\r\n            [classes.noPadding]: noBodyPadding,\r\n            [bodyClass]: bodyClass,\r\n          })}\r\n        >\r\n          {children}\r\n        </div>\r\n      </Paper>\r\n      <Menu\r\n        id=\"widget-menu\"\r\n        open={isMoreMenuOpen}\r\n        anchorEl={moreButtonRef}\r\n        onClose={() => setMoreMenuOpen(false)}\r\n        disableAutoFocusItem\r\n      >\r\n        <MenuItem>\r\n          <Typography>Edit</Typography>\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <Typography>Copy</Typography>\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <Typography>Delete</Typography>\r\n        </MenuItem>\r\n        <MenuItem>\r\n          <Typography>Print</Typography>\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\CarForm\\CarEditFormSteps.js",["554"],"import { Grid } from \"@material-ui/core\";\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from \"../Wrappers/Wrappers\";\r\n\r\nconst CarFormSteps = ({ step1, step2, id }) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      align=\"center\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n    >\r\n      <Grid item xs={5}></Grid>\r\n      {step1 ? (\r\n        <Grid item xs={1}>\r\n          <Link\r\n            to={`/app/cars/edit/${id}`}\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Button variant=\"text\" color=\"success\">\r\n              step1\r\n            </Button>\r\n          </Link>\r\n        </Grid>\r\n      ) : (\r\n        <Grid item xs={1}>\r\n          <Button variant=\"text\" color=\"success\" disabled>\r\n            step1\r\n          </Button>\r\n        </Grid>\r\n      )}\r\n      {step2 ? (\r\n        <Grid item xs={1}>\r\n          <Link\r\n            to={`/app/cars/edit2/${id}`}\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Button variant=\"text\" color=\"success\">\r\n              step2\r\n            </Button>\r\n          </Link>\r\n        </Grid>\r\n      ) : (\r\n        <Grid item xs={1}>\r\n          <Button variant=\"text\" color=\"success\" disabled>\r\n            step2\r\n          </Button>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={5}></Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CarFormSteps;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Wrappers\\Wrappers.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\CarForm\\CarFormSteps.js",["555"],"import { Grid } from \"@material-ui/core\";\r\nimport { Button } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography } from \"../Wrappers/Wrappers\";\r\n\r\nconst CarFormSteps = ({ step1, step2 }) => {\r\n  return (\r\n    <Grid\r\n      container\r\n      align=\"center\"\r\n      justify=\"center\"\r\n      alignItems=\"center\"\r\n      spacing={1}\r\n    >\r\n      <Grid item xs={5}></Grid>\r\n      {step1 ? (\r\n        <Grid item xs={1}>\r\n          <Link\r\n            to={`/app/cars/add`}\r\n            style={{\r\n              textDecoration: \"none\",\r\n            }}\r\n          >\r\n            <Button variant=\"text\" color=\"success\">\r\n              step1\r\n            </Button>\r\n          </Link>\r\n        </Grid>\r\n      ) : (\r\n        <Grid item xs={1}>\r\n          <Button variant=\"text\" color=\"success\" disabled>\r\n            step1\r\n          </Button>\r\n        </Grid>\r\n      )}\r\n      {step2 ? (\r\n        <Grid item xs={1}>\r\n          <Button variant=\"text\" color=\"success\">\r\n            step2\r\n          </Button>\r\n        </Grid>\r\n      ) : (\r\n        <Grid item xs={1}>\r\n          <Button variant=\"text\" color=\"success\" disabled>\r\n            step2\r\n          </Button>\r\n        </Grid>\r\n      )}\r\n      <Grid item xs={5}></Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CarFormSteps;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\cars\\CarsTable.js",["556"],"import {\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\nimport moment from \"moment\";\r\nimport { TbEditCircle } from \"react-icons/tb\";\r\nimport {\r\n  RemoveRedEyeRounded as ViewIcon,\r\n  HistoryRounded as HistoryIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport { Notifications as AlertIcon } from \"@material-ui/icons\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getCarList } from \"../../Actions/carActions\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Box, Modal } from \"@mui/material\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 500,\r\n  height: 500,\r\n  overflow: \"scroll\",\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst CarsTable = ({ keyword }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const classes = useStyles();\r\n  const [modalCar, setModalCar] = useState(\"\");\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [showPopover, setShowPopover] = useState(false);\r\n  const [carPopover, setCarPopover] = useState();\r\n  const driversList = useSelector((state) => state.driversList);\r\n  const { loading } = driversList;\r\n\r\n  const carList = useSelector((state) => state.carList);\r\n  const { loading: carListLoading, cars } = carList;\r\n\r\n  useEffect(() => {\r\n    dispatch(getCarList(keyword));\r\n    if (window.location.search.includes(\"driverInfo\")) {\r\n      window.location.replace(\"/app/cars/list\");\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1000);\r\n    }\r\n  }, [dispatch, keyword]);\r\n\r\n  return (\r\n    <>\r\n      {loading || carListLoading ? (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Car</TableCell>\r\n                  <TableCell>Insurance No.</TableCell>\r\n                  <TableCell>RC-TC No.</TableCell>\r\n                  <TableCell>PUC No</TableCell>\r\n                  <TableCell>Remark</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {[...Array(10)].map((_) => {\r\n                  return (\r\n                    <TableRow>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      ) : (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Car</TableCell>\r\n                  <TableCell>Insurance No.</TableCell>\r\n                  <TableCell>RC-TC No.</TableCell>\r\n                  <TableCell>PUC No</TableCell>\r\n                  <TableCell>Remark</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {cars\r\n                  ?.sort((a, b) => {\r\n                    return a?.carStatus\r\n                      ?.toString()\r\n                      ?.localeCompare(b.carStatus?.toString());\r\n                  })\r\n                  ?.map((car, i) => {\r\n                    return (\r\n                      <TableRow key={car._id}>\r\n                        <TableCell>{car.carNumber}</TableCell>\r\n                        <TableCell>{car?.insuranceNumber}</TableCell>\r\n                        {car.carRCTCNo?.length > 20 ? (\r\n                          <TableCell>\r\n                            {car.carRCTCNo?.slice(0, 20)}...\r\n                          </TableCell>\r\n                        ) : (\r\n                          <TableCell>{car.carRCTCNo}</TableCell>\r\n                        )}\r\n                        <TableCell>{car?.PUCNumber}</TableCell>\r\n                        <TableCell>\r\n                          {(moment(car?.PUCEndDate).diff(Date.now(), \"days\") <\r\n                            5 &&\r\n                            moment(car?.PUCEndDate).diff(Date.now(), \"days\") >\r\n                              0) ||\r\n                          (moment(car?.insuranceEndDate).diff(\r\n                            Date.now(),\r\n                            \"days\",\r\n                          ) < 5 &&\r\n                            moment(car?.insuranceEndDate).diff(\r\n                              Date.now(),\r\n                              \"days\",\r\n                            ) > 0) ||\r\n                          (moment(car?.carFitnessEndDate).diff(\r\n                            Date.now(),\r\n                            \"days\",\r\n                          ) < 5 &&\r\n                            moment(car?.carFitnessEndDate).diff(\r\n                              Date.now(),\r\n                              \"days\",\r\n                            ) > 0) ? (\r\n                            <IconButton color=\"secondary\">\r\n                              <AlertIcon\r\n                                onClick={() => {\r\n                                  setShowPopover(true);\r\n                                  setCarPopover(car);\r\n                                }}\r\n                              ></AlertIcon>\r\n                            </IconButton>\r\n                          ) : moment(car?.PUCEndDate).diff(Date.now(), \"days\") <\r\n                              0 ||\r\n                            moment(car?.insuranceEndDate).diff(\r\n                              Date.now(),\r\n                              \"days\",\r\n                            ) < 0 ||\r\n                            moment(carPopover?.carFitnessEndDate).diff(\r\n                              Date.now(),\r\n                              \"days\",\r\n                            ) < 0 ? (\r\n                            <IconButton color=\"secondary\">\r\n                              <AlertIcon\r\n                                onClick={() => {\r\n                                  setShowPopover(true);\r\n                                  setCarPopover(car);\r\n                                }}\r\n                              ></AlertIcon>\r\n                            </IconButton>\r\n                          ) : (\r\n                            <></>\r\n                          )}\r\n                        </TableCell>\r\n                        {car.carStatus === true ? (\r\n                          <TableCell style={{ color: \"green\" }}>\r\n                            {\" \"}\r\n                            Assigned{\" \"}\r\n                          </TableCell>\r\n                        ) : (\r\n                          <TableCell style={{ color: \"red\" }}>\r\n                            Unassigned\r\n                          </TableCell>\r\n                        )}\r\n\r\n                        <TableCell>\r\n                          {\" \"}\r\n                          <div className={classes.mainChartHeader}>\r\n                            <div className={classes.mainChartHeaderLabels}>\r\n                              <div>\r\n                                <Link to={`/app/cars/edit/${car._id}`}>\r\n                                  <IconButton\r\n                                    color=\"primary\"\r\n                                    className={classes.noPadding}\r\n                                  >\r\n                                    <TbEditCircle />\r\n                                  </IconButton>\r\n                                </Link>\r\n                              </div>\r\n                              <div>\r\n                                <IconButton\r\n                                  className={classes.noPadding}\r\n                                  onClick={() => {\r\n                                    setShowModal(true);\r\n                                    setModalCar(car);\r\n                                  }}\r\n                                >\r\n                                  <ViewIcon />\r\n                                </IconButton>\r\n                              </div>\r\n                              <div>\r\n                                <Link to={`/app/cars/history/${car._id}`}>\r\n                                  <IconButton\r\n                                    color=\"primary\"\r\n                                    className={classes.noPadding}\r\n                                  >\r\n                                    <HistoryIcon />\r\n                                  </IconButton>\r\n                                </Link>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <Modal\r\n            open={showModal}\r\n            aria-labelledby=\"modal-modal-title\"\r\n            aria-describedby=\"modal-modal-description\"\r\n          >\r\n            <Box sx={style}>\r\n              {/* <img\r\n                alt=\"\"\r\n                style={{ height: \"100%\", width: \"100%\" }}\r\n                src={`${modalCar.carImage}`}\r\n              /> */}{\" \"}\r\n              <Grid\r\n                container\r\n                direction=\"row\"\r\n                justify=\"space-between\"\r\n                alignItems=\"center\"\r\n                // style={{\r\n                //   position: \"f\",\r\n                // }}\r\n              >\r\n                <Grid item xs={11}></Grid>\r\n                <Grid item xs={1}>\r\n                  <Typography\r\n                    style={{\r\n                      margin: \"6px\",\r\n                      fontWidth: \"bold\",\r\n                      position: \"sticky\",\r\n                    }}\r\n                  >\r\n                    <CloseIcon\r\n                      style={{\r\n                        cursor: \"pointer\",\r\n                      }}\r\n                      onClick={() => setShowModal(false)}\r\n                    />\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid container spacing={2}>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid>\r\n                    <Typography>Car Image</Typography>\r\n                    <img\r\n                      alt=\"\"\r\n                      style={{ height: \"200px\", width: \"200px\" }}\r\n                      src={`${modalCar.carImage}`}\r\n                    />\r\n                  </Grid>\r\n                  <Grid>\r\n                    <Typography>RCTC Image</Typography>\r\n                    <img\r\n                      alt=\"\"\r\n                      style={{ height: \"200px\", width: \"200px\" }}\r\n                      src={`${modalCar.carRCTCImage}`}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid>\r\n                    <Typography>RC Book</Typography>\r\n                    <img\r\n                      alt=\"\"\r\n                      style={{ height: \"200px\", width: \"200px\" }}\r\n                      src={`${modalCar.RCBookImage}`}\r\n                    />\r\n                  </Grid>\r\n                  <Grid>\r\n                    <Typography>PUC Image</Typography>\r\n                    <img\r\n                      alt=\"\"\r\n                      style={{ height: \"200px\", width: \"200px\" }}\r\n                      src={`${modalCar.PUCImage}`}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justify=\"space-between\"\r\n                  alignItems=\"center\"\r\n                >\r\n                  <Grid>\r\n                    <Typography>Insurance Image</Typography>\r\n                    <img\r\n                      alt=\"\"\r\n                      style={{ height: \"200px\", width: \"200px\" }}\r\n                      src={`${modalCar.insuranceImage}`}\r\n                    />\r\n                  </Grid>\r\n                  <Grid>\r\n                    <Typography>Fitness Crt</Typography>\r\n                    <img\r\n                      alt=\"\"\r\n                      style={{ height: \"200px\", width: \"200px\" }}\r\n                      src={`${modalCar.carFitnessImage}`}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Box>\r\n          </Modal>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CarsTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\dashboard\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\driverActions.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\AssignCar\\AssignCar.js",["557","558","559","560","561"],"import React, { useEffect, useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  Button,\r\n  FormControl,\r\n  Grid,\r\n  InputLabel,\r\n  MenuItem,\r\n  Select,\r\n  Stack,\r\n} from \"@mui/material\";\r\nimport { Delete as DeleteIcon } from \"@material-ui/icons\";\r\nimport { getCarDetails, updateCar } from \"../../Actions/carActions\";\r\nimport { updateDriver } from \"../../Actions/driverActions\";\r\nimport { Typography } from \"../Wrappers/Wrappers\";\r\nimport { DialogActions, Slide, Dialog, DialogTitle } from \"@material-ui/core\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst AssignCar = ({ driver, car, cars }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [carId, setCarId] = useState(\"\");\r\n  const [previousCarId, setPreviousCarId] = useState(\"\");\r\n\r\n  const carUpdate = useSelector((state) => state.carUpdate);\r\n  const {\r\n    loading: carUpdateLoading,\r\n    error: carUpdateError,\r\n    success: carUpdateSuccess,\r\n  } = carUpdate;\r\n\r\n  const carDetails = useSelector((state) => state.carDetails);\r\n  const {\r\n    loading: carDetailsLoading,\r\n    error: carDetailsError,\r\n    car: dischargeCarStatus,\r\n  } = carDetails;\r\n\r\n  useEffect(() => {\r\n    // cars?.map((car) => {\r\n    //   if (car.carStatus === true) {\r\n    //     window.location.reload();\r\n    //   }\r\n    // });\r\n  }, []);\r\n\r\n  const dischargeCar = async (e) => {\r\n    if (driver.carId !== null) {\r\n      setPreviousCarId(car._id);\r\n\r\n      dispatch(getCarDetails(previousCarId));\r\n    }\r\n\r\n    dispatch(\r\n      updateCar({\r\n        _id: dischargeCarStatus._id,\r\n        carName: dischargeCarStatus.carName,\r\n        RCNumber: dischargeCarStatus.RCNumber,\r\n        PUCNumber: dischargeCarStatus.PUCNumber,\r\n        carNumber: dischargeCarStatus.carNumber,\r\n        insuranceNumber: dischargeCarStatus.insuranceNumber,\r\n\r\n        carImage: dischargeCarStatus.carImage,\r\n\r\n        RCBookImage: dischargeCarStatus.RCBookImage,\r\n\r\n        PUCImage: dischargeCarStatus.PUCImage,\r\n        PUCStartDate: dischargeCarStatus.PUCStartDate,\r\n        PUCEndDate: dischargeCarStatus.PUCEndDate,\r\n\r\n        insuranceImage: dischargeCarStatus.insuranceImage,\r\n        insuranceStartDate: dischargeCarStatus.insuranceStartDate,\r\n        insuranceEndDate: dischargeCarStatus.insuranceEndDate,\r\n        carFitnessImage: dischargeCarStatus.carFitnessImage,\r\n        carFitnessStartDate: dischargeCarStatus.carFitnessStartDate,\r\n        carFitnessEndDate: dischargeCarStatus.carFitnessEndDate,\r\n        carRCTCNo: dischargeCarStatus.carRCTCNo,\r\n        carRCTCImage: dischargeCarStatus.carRCTCImage,\r\n        carPurchaseInvoice: dischargeCarStatus.carPurchaseInvoice,\r\n        carPurchaseInvoiceDate: dischargeCarStatus.carPurchaseInvoiceDate,\r\n\r\n        carStatus: false,\r\n      }),\r\n    );\r\n\r\n    dispatch(\r\n      updateDriver({\r\n        _id: driver._id,\r\n        firstName: driver.firstName,\r\n        lastName: driver.lastName,\r\n        mobileNumber: driver.mobileNumber,\r\n        password: driver.password,\r\n        gender: driver.gender,\r\n        licence: driver.licence,\r\n        image: driver.photo,\r\n        licenceImage: driver.licenceImage,\r\n        carAssignedDate: driver.carAssignedDate,\r\n        designation: driver.designation,\r\n        birthDate: driver.birthDate,\r\n\r\n        carId: carId,\r\n        status: driver.status,\r\n      }),\r\n    );\r\n    window.location.reload();\r\n  };\r\n\r\n  const removeCar = (driver, car) => {\r\n    dispatch(\r\n      updateDriver({\r\n        _id: driver._id,\r\n        firstName: driver.firstName,\r\n        lastName: driver.lastName,\r\n        mobileNumber: driver.mobileNumber,\r\n        password: driver.password,\r\n        gender: driver.gender,\r\n        licence: driver.licence,\r\n        image: driver.photo,\r\n        licenceImage: driver.licenceImage,\r\n        carAssignedDate: driver.carAssignedDate,\r\n        designation: driver.designation,\r\n        birthDate: driver.birthDate,\r\n\r\n        carId: null,\r\n        status: driver.status,\r\n      }),\r\n    );\r\n    dispatch(\r\n      updateCar({\r\n        _id: car._id,\r\n        carName: car.carName,\r\n        carNumber: car.carNumber,\r\n        carImage: car.carImage,\r\n        RCNumber: car.RCNumber,\r\n        RCBookImage: car.RCBookImage,\r\n        PUCNumber: car.PUCNumber,\r\n        PUCImage: car.PUCImage,\r\n        PUCStartDate: car.PUCStartDate,\r\n        PUCEndDate: car.PUCEndDate,\r\n        insuranceNumber: car.insuranceNumber,\r\n        insuranceImage: car.insuranceImage,\r\n        insuranceStartDate: car.insuranceStartDate,\r\n        insuranceEndDate: car.insuranceEndDate,\r\n        carFitnessImage: car.carFitnessImage,\r\n        carFitnessStartDate: car.carFitnessStartDate,\r\n        carFitnessEndDate: car.carFitnessEndDate,\r\n        carRCTCNo: car.carRCTCNo,\r\n        carRCTCImage: car.carRCTCImage,\r\n        carPurchaseInvoice: car.carPurchaseInvoice,\r\n        carPurchaseInvoiceDate: car.carPurchaseInvoiceDate,\r\n        carStatus: false,\r\n      }),\r\n    );\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <form\r\n      style={{\r\n        paddingLeft: \"4%\",\r\n        paddingRight: \"4%\",\r\n        paddingTop: \"2%\",\r\n        paddingBottom: \"2%\",\r\n      }}\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-between\"\r\n        alignItems=\"center\"\r\n        spacing={2}\r\n      >\r\n        <Grid item xs={6}>\r\n          <Typography variant=\"h6\">\r\n            Assigned Car:{car.carName}-{car.carNumber}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Stack>\r\n            <FormControl variant=\"outlined\" fullWidth>\r\n              <InputLabel id=\"select-label\">\r\n                <em>Assign Car</em>\r\n              </InputLabel>\r\n              <Select\r\n                labelId=\"select-label\"\r\n                label=\"Choose Car\"\r\n                value={carId}\r\n                onChange={(e) => {\r\n                  setCarId(e.target.value);\r\n                }}\r\n                autoWidth\r\n              >\r\n                <MenuItem value=\"\">\r\n                  <em>Choose Car</em>\r\n                </MenuItem>\r\n\r\n                {cars?.map((c) => {\r\n                  if (c.carStatus === false) {\r\n                    return (\r\n                      <MenuItem value={c} key={c._id}>\r\n                        {c.carName + \"-\" + c.carNumber}\r\n                      </MenuItem>\r\n                    );\r\n                  } else {\r\n                    return \"\";\r\n                  }\r\n                })}\r\n              </Select>\r\n            </FormControl>\r\n          </Stack>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Stack>\r\n            <Button\r\n              variant=\"contained\"\r\n              className=\"rounded\"\r\n              onClick={dischargeCar}\r\n              disabled={!carId}\r\n            >\r\n              Update Car\r\n            </Button>\r\n          </Stack>\r\n        </Grid>\r\n        <Grid item xs={2}>\r\n          <Button\r\n            startIcon={<DeleteIcon />}\r\n            onClick={() => setShowAlert(true)}\r\n            variant=\"outlined\"\r\n            color=\"error\"\r\n            disabled={car._id ? false : true}\r\n          >\r\n            Remove Car\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Dialog\r\n        onClose={() => setShowAlert(false)}\r\n        open={showAlert}\r\n        TransitionComponent={Transition}\r\n      >\r\n        <DialogTitle>{`Car will be removed for the Driver..!!`}</DialogTitle>\r\n\r\n        <DialogActions>\r\n          <Button onClick={() => removeCar(driver, car)}>OK</Button>\r\n          <Button autoFocus onClick={() => setShowAlert(false)}>\r\n            Cancel\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AssignCar;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Notification\\Notification.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\History\\HistoryTable.js",["562","563"],"import {\r\n  Paper,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  CheckCircle as AcceptIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport useStyles from \"../../dashboard/styles\";\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\nimport React from \"react\";\r\nimport { displayDateFormate } from \"../../../Services/DateFormate\";\r\n\r\nconst HistoryTable = ({ journeys, driver, loading, driverLoading }) => {\r\n  var classes = useStyles();\r\n  return (\r\n    <>\r\n      {loading || driverLoading ? (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Trip Description</TableCell>\r\n                  <TableCell>Start Km</TableCell>\r\n                  <TableCell>End Km</TableCell>\r\n                  <TableCell>Total Km</TableCell>\r\n                  <TableCell>Car</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {[...Array(10)].map((_, i) => {\r\n                  return (\r\n                    <TableRow key={i}>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      ) : (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Trip Description</TableCell>\r\n                  <TableCell>Start Km</TableCell>\r\n                  <TableCell>End Km</TableCell>\r\n                  <TableCell>Total Km</TableCell>\r\n                  <TableCell>Car</TableCell>\r\n                  <TableCell>Status</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {journeys?.map((j, i) => {\r\n                  if (j.journey.status !== \"pending\") {\r\n                    return (\r\n                      <TableRow key={j._id}>\r\n                        <TableCell>\r\n                          {displayDateFormate(j.journey.journeyDate)}\r\n                        </TableCell>\r\n                        <TableCell>{j.journey.startDestination}</TableCell>\r\n                        <TableCell>{j.journey.startReading}</TableCell>\r\n                        <TableCell>{j.journey.endReading}</TableCell>\r\n                        <TableCell>\r\n                          {j.journey.endReading - j.journey.startReading}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {j.car.carName} - {j.car.carNumber}\r\n                        </TableCell>\r\n\r\n                        {j.journey.status === \"accepted\" ? (\r\n                          <TableCell>\r\n                            <AcceptIcon className={classes.successIcon} />\r\n                          </TableCell>\r\n                        ) : (\r\n                          <TableCell>\r\n                            <CloseIcon className={classes.secondaryIcon} />\r\n                          </TableCell>\r\n                        )}\r\n                      </TableRow>\r\n                    );\r\n                  }\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HistoryTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\journeyActions.js",["564"],"import axios from \"axios\";\r\nimport { AppConst, BASE_URL } from \"../constants/appConstants\";\r\nimport {\r\n  JOURNEY_LIST_REQUEST,\r\n  JOURNEY_LIST_SUCCESS,\r\n  JOURNEY_LIST_FAIL,\r\n  JOURNEY_UPDATE_REQUEST,\r\n  JOURNEY_UPDATE_SUCCESS,\r\n  JOURNEY_UPDATE_FAIL,\r\n  JOURNEY_READING_REQUEST,\r\n  JOURNEY_READING_SUCCESS,\r\n  JOURNEY_READING_FAIL,\r\n  JOURNEY_DETAILS_REQUEST,\r\n  JOURNEY_DETAILS_SUCCESS,\r\n  JOURNEY_DETAILS_FAIL,\r\n} from \"../constants/journeyConstants\";\r\n\r\nexport const getJourneyList = (keyword = \"\", pageNumber = \"\") => async (\r\n  dispatch,\r\n  getState,\r\n) => {\r\n  try {\r\n    dispatch({\r\n      type: JOURNEY_LIST_REQUEST,\r\n    });\r\n\r\n    const {\r\n      adminLogin: { adminInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${adminInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\r\n      `${AppConst.BASE_URL}/api/admin/journey?keyword=${keyword}`,\r\n      config,\r\n    );\r\n\r\n    dispatch({\r\n      type: JOURNEY_LIST_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: JOURNEY_LIST_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getJourneyDetails = (\r\n  id,\r\n  keyword = \"\",\r\n  startDate = \"\",\r\n  endDate = \"\",\r\n) => async (dispatch, getState) => {\r\n  try {\r\n    dispatch({\r\n      type: JOURNEY_DETAILS_REQUEST,\r\n    });\r\n\r\n    const {\r\n      adminLogin: { adminInfo },\r\n    } = getState();\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        Authorization: `Bearer ${adminInfo.token}`,\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.get(\r\n      `${AppConst.BASE_URL}/api/admin/journey/${id}?keyword=${keyword}&endDate=${endDate}&startDate=${startDate}`,\r\n      config,\r\n    );\r\n\r\n    dispatch({\r\n      type: JOURNEY_DETAILS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: JOURNEY_DETAILS_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateJourney = (journey, status, id) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: JOURNEY_UPDATE_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const updatedStatus = {\r\n      car: journey.car,\r\n      driver: journey.driver,\r\n      journey: Object.assign({}, journey.journey, {\r\n        status: status,\r\n      }),\r\n    };\r\n    const { data } = await axios.put(\r\n      `${AppConst.BASE_URL}/api/admin/journey/${id}`,\r\n      updatedStatus,\r\n      config,\r\n    );\r\n\r\n    dispatch({\r\n      type: JOURNEY_UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: JOURNEY_UPDATE_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const updateReading = (driverId) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: JOURNEY_READING_REQUEST,\r\n    });\r\n\r\n    const config = {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n\r\n    const { data } = await axios.post(`/api/admin/journey`, driverId, config);\r\n\r\n    dispatch({\r\n      type: JOURNEY_READING_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: JOURNEY_READING_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\icons\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Header\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maps\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\drivers\\DriversTable.js",["565","566","567","568","569","570","571"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Paper,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Typography,\r\n  Table,\r\n  IconButton,\r\n  Slide,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  Button,\r\n} from \"@material-ui/core\";\r\n\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport { TbEditCircle } from \"react-icons/tb\";\r\nimport {\r\n  RemoveCircleOutline as InactiveIcon,\r\n  HistoryRounded as HistoryIcon,\r\n} from \"@material-ui/icons\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { getDriversList, updateDriver } from \"../../Actions/driverActions\";\r\nimport { getCarList, updateCar } from \"../../Actions/carActions\";\r\nimport { displayDateFormate } from \"../../Services/DateFormate\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst DriversTable = ({ keyword, status }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  var classes = useStyles();\r\n\r\n  const [dialogue, setDialogue] = useState(false);\r\n  const [driver, setDriver] = useState({});\r\n  const [car, setCar] = useState({});\r\n\r\n  const driversList = useSelector((state) => state.driversList);\r\n  const { loading, error, drivers } = driversList;\r\n  const carList = useSelector((state) => state.carList);\r\n  const { loading: carListLoading, error: carListError, cars } = carList;\r\n\r\n  useEffect(() => {\r\n    dispatch(getDriversList(keyword));\r\n    dispatch(getCarList());\r\n    if (window.location.href.includes(\"driverInfo\")) {\r\n      window.location.replace(\"#/app/drivers/list\");\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 1000);\r\n    }\r\n  }, [dispatch, keyword]);\r\n\r\n  const dischargeDriver = (driver, car) => {\r\n    dispatch(\r\n      updateDriver({\r\n        _id: driver._id,\r\n        firstName: driver.firstName,\r\n        lastName: driver.lastName,\r\n        mobileNumber: driver.mobileNumber,\r\n        password: driver.password,\r\n        gender: driver.gender,\r\n        licence: driver.licence,\r\n        image: driver.photo,\r\n        licenceImage: driver.licenceImage,\r\n        carAssignedDate: driver.carAssignedDate,\r\n        designation: driver.designation,\r\n        birthDate: driver.birthDate,\r\n        carId: null,\r\n        status: \"inactive\",\r\n      }),\r\n      dispatch(\r\n        updateCar({\r\n          _id: car._id,\r\n          carName: car.carName,\r\n          RCNumber: car.RCNumber,\r\n          PUCNumber: car.PUCNumber,\r\n          carNumber: car.carNumber,\r\n          insuranceNumber: car.insuranceNumber,\r\n\r\n          carImage: car.carImage,\r\n          carRCTCNo: car.carRCTCNo,\r\n          carRCTCImage: car.carRCTCImage,\r\n          RCBookImage: car.RCBookImage,\r\n          PUCImage: car.PUCImage,\r\n          PUCStartDate: car.PUCStartDate,\r\n          PUCEndDate: car.PUCEndDate,\r\n          insuranceImage: car.insuranceImage,\r\n          insuranceStartDate: car.insuranceStartDate,\r\n          insuranceEndDate: car.insuranceEndDate,\r\n          carFitnessImage: car.carFitnessImage,\r\n          carFitnessStartDate: car.carFitnessStartDate,\r\n          carFitnessEndDate: car.carFitnessEndDate,\r\n          carPurchaseInvoice: car.carPurchaseInvoice,\r\n          carPurchaseInvoiceDate: car.carPurchaseInvoiceDate,\r\n\r\n          carStatus: false,\r\n        }),\r\n      ),\r\n    );\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading || carListLoading ? (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Name</TableCell>\r\n                  <TableCell>Contact</TableCell>\r\n                  <TableCell>Car</TableCell>\r\n                  <TableCell>Joining Date</TableCell>\r\n                  <TableCell>Monthly Reading</TableCell>\r\n                  {/* <TableCell>Status</TableCell> */}\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {[...Array(10)].map((_, i) => {\r\n                  return (\r\n                    <TableRow key={i}>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      ) : (\r\n        <>\r\n          <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n            <TableContainer>\r\n              <Table stickyHeader className=\"mb-0\">\r\n                <TableHead>\r\n                  <TableRow>\r\n                    <TableCell>Name</TableCell>\r\n                    <TableCell>Contact</TableCell>\r\n                    <TableCell>Car</TableCell>\r\n                    <TableCell>Joining Date</TableCell>\r\n                    <TableCell>Monthly Reading</TableCell>\r\n                    {/* <TableCell>Status</TableCell> */}\r\n                    <TableCell>Action</TableCell>\r\n                  </TableRow>\r\n                </TableHead>\r\n                {status === \"active\" ? (\r\n                  <TableBody>\r\n                    {drivers\r\n                      ?.slice(0)\r\n                      .reverse()\r\n                      .map((d, i) => {\r\n                        if (d.status === \"active\") {\r\n                          return (\r\n                            <TableRow key={d._id}>\r\n                              <TableCell>\r\n                                {d.firstName}&nbsp; {d.lastName}\r\n                              </TableCell>\r\n                              <TableCell>{d.mobileNumber}</TableCell>\r\n                              {d.carId ? (\r\n                                cars?.map((car) => {\r\n                                  if (d.carId === car._id) {\r\n                                    return (\r\n                                      <TableCell>{car.carNumber}</TableCell>\r\n                                    );\r\n                                  }\r\n                                })\r\n                              ) : (\r\n                                <TableCell>-</TableCell>\r\n                              )}\r\n\r\n                              <TableCell>\r\n                                {displayDateFormate(d.carAssignedDate)}\r\n                              </TableCell>\r\n                              <TableCell>{d.monthlyTripReading}</TableCell>\r\n\r\n                              <TableCell>\r\n                                <div className={classes.mainChartHeader}>\r\n                                  <div\r\n                                    className={classes.mainChartHeaderLabels}\r\n                                  >\r\n                                    <Link to={`/app/drivers/edit/${d._id}`}>\r\n                                      <IconButton\r\n                                        color=\"primary\"\r\n                                        className={classes.noPadding}\r\n                                      >\r\n                                        <TbEditCircle />\r\n                                      </IconButton>\r\n                                    </Link>\r\n\r\n                                    <IconButton\r\n                                      color=\"secondary\"\r\n                                      className={classes.noPadding}\r\n                                      onClick={() => {\r\n                                        setDialogue(true);\r\n                                        setDriver(d);\r\n                                        d.carId &&\r\n                                          cars.map(\r\n                                            (car) =>\r\n                                              d.carId === car._id &&\r\n                                              setCar(car),\r\n                                          );\r\n                                      }}\r\n                                    >\r\n                                      <InactiveIcon />\r\n                                    </IconButton>\r\n\r\n                                    <Link to={`/app/drivers/history/${d._id}`}>\r\n                                      <IconButton\r\n                                        color=\"primary\"\r\n                                        className={classes.noPadding}\r\n                                      >\r\n                                        <HistoryIcon />\r\n                                      </IconButton>\r\n                                    </Link>\r\n                                  </div>\r\n                                </div>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        }\r\n                      })}\r\n                  </TableBody>\r\n                ) : (\r\n                  <TableBody>\r\n                    {drivers\r\n                      .slice(0)\r\n                      .reverse()\r\n                      .map((d, i) => {\r\n                        if (d.status === \"inactive\") {\r\n                          return (\r\n                            <TableRow key={i}>\r\n                              <TableCell>\r\n                                {d.firstName}&nbsp; {d.lastName}\r\n                              </TableCell>\r\n                              <TableCell>{d.mobileNumber}</TableCell>\r\n                              {d.carId ? (\r\n                                cars?.map((car) => {\r\n                                  if (d.carId === car._id) {\r\n                                    return (\r\n                                      <TableCell>{car.carNumber}</TableCell>\r\n                                    );\r\n                                  }\r\n                                })\r\n                              ) : (\r\n                                <TableCell>-</TableCell>\r\n                              )}\r\n\r\n                              <TableCell>\r\n                                {displayDateFormate(d.carAssignedDate)}\r\n                              </TableCell>\r\n                              <TableCell>{d.monthlyTripReading}</TableCell>\r\n\r\n                              <TableCell>\r\n                                <div className={classes.mainChartHeader}>\r\n                                  <div\r\n                                    className={classes.mainChartHeaderLabels}\r\n                                  >\r\n                                    <div>\r\n                                      <IconButton\r\n                                        color=\"primary\"\r\n                                        className={classes.noPadding}\r\n                                      >\r\n                                        <TbEditCircle />\r\n                                      </IconButton>\r\n                                    </div>\r\n\r\n                                    <div>\r\n                                      <IconButton\r\n                                        color=\"primary\"\r\n                                        className={classes.noPadding}\r\n                                      >\r\n                                        <HistoryIcon />\r\n                                      </IconButton>\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </TableCell>\r\n                            </TableRow>\r\n                          );\r\n                        }\r\n                      })}\r\n                  </TableBody>\r\n                )}\r\n              </Table>\r\n            </TableContainer>\r\n            <Dialog\r\n              onClose={() => setDialogue(false)}\r\n              open={dialogue}\r\n              TransitionComponent={Transition}\r\n            >\r\n              <DialogTitle>{`Car will be removed for the Driver..!!`}</DialogTitle>\r\n\r\n              <DialogActions>\r\n                <Button onClick={() => dischargeDriver(driver, car)}>OK</Button>\r\n                <Button autoFocus onClick={() => setDialogue(false)}>\r\n                  Cancel\r\n                </Button>\r\n              </DialogActions>\r\n            </Dialog>\r\n          </Paper>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default DriversTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Widget\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\Actions\\Layout\\LayoutActions.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\charts\\components\\ApexHeatmap.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\charts\\components\\ApexLineChart.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\PageTitle\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\fuel\\FuelHistoryTable.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Add\\CalculateCost.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\MaintenanceTable.js",["572"],"import {\r\n  Grid,\r\n  IconButton,\r\n  Paper,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n} from \"@material-ui/core\";\r\nimport { TbEditCircle } from \"react-icons/tb\";\r\nimport fs from \"file-saver\";\r\nimport {\r\n  ListAltRounded as ListIcon,\r\n  CloudDownload as DownloadIcon,\r\n  CloseRounded as CloseIcon,\r\n} from \"@material-ui/icons\";\r\nimport { FaRupeeSign } from \"react-icons/fa\";\r\nimport useStyles from \"../dashboard/styles\";\r\nimport { Box, Modal, Skeleton } from \"@mui/material\";\r\nimport React, { useState } from \"react\";\r\nimport { displayDateFormate } from \"../../Services/DateFormate\";\r\nimport { Typography } from \"../../components/Wrappers/Wrappers\";\r\nimport { Workbook } from \"exceljs\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: 400,\r\n  bgcolor: \"background.paper\",\r\n  border: \"2px solid #000\",\r\n  boxShadow: 24,\r\n};\r\n\r\nconst MaintenanceTable = ({ maintenanceList, loading, car }) => {\r\n  var classes = useStyles();\r\n  const [maintenancesList, setMaintenancesList] = useState(\"\");\r\n  const [maintenancesModal, setMaintenanceModal] = useState(false);\r\n\r\n  const exportToCsv = (carObj) => {\r\n    let workbook = new Workbook();\r\n\r\n    let title = `           ${\"Fuel Maintenance of\"} ${car?.carName}-${\r\n      car?.carNumber\r\n    }`;\r\n\r\n    let descriptionCenter = [\r\n      // `${\"Servicing Details\"}`,\r\n      // `${\"Vehicle Details\"}`,\r\n      `${\" \"}`,\r\n      `Service Center Name:${carObj.servicingCenterName}`,\r\n\r\n      // ,`Invoice No:${carObj.invoiceNumber}`,\r\n      // `Service Center GSTIN:,${\" \"}`,`Invoice Date:${displayDateFormate(\r\n      // \tcarObj.date,\r\n      // )}`,\r\n      // `${\" \"},Odometer:${carObj.reading}Km,${\" \"},Vehicle Reg.:${\r\n      // \tselectCar.carNumber\r\n      // }`,\r\n      // ` `,\r\n    ];\r\n\r\n    let headers = [\r\n      \"sr.No\",\r\n      \"Details of Service\",\r\n      \"HSN SAC\",\r\n      \"Unit Price\",\r\n      \"Qty\",\r\n      \"Final Price\",\r\n    ];\r\n\r\n    let usersCsv = carObj.maintenances.reduce((acc, car, i) => {\r\n      acc.push([\r\n        `${i + 1}`,\r\n        `${car.type}`,\r\n        ` `,\r\n        `${car.basicAmount}`,\r\n        `${car.quantity}`,\r\n        `${car.basicAmount}`,\r\n      ]);\r\n      return acc;\r\n    }, []);\r\n\r\n    let totalAmount = [\r\n      `${\" \"}`,\r\n      `${\" \"}`,\r\n      `${\" \"}`,\r\n      `${\"CGST\"}:${carObj.CGST}%`,\r\n      `${\"SGST\"}:${carObj.SGST}%`,\r\n      `${\"Total\"}:${carObj.totalAmount}`,\r\n    ];\r\n\r\n    let workSheet = workbook.addWorksheet(\"Maintenance Data\");\r\n\r\n    let titleRow = workSheet.addRow([title]);\r\n    titleRow.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 12,\r\n      bold: true,\r\n    };\r\n\r\n    let headerDescription = workSheet.addRow(descriptionCenter);\r\n    headerDescription.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 8,\r\n    };\r\n    workSheet.mergeCells(\"B2:C2\");\r\n\r\n    workSheet.getCell(\"D2\").value = `Servicing Date:${displayDateFormate(\r\n      carObj.date,\r\n    )}`;\r\n    workSheet.addRow([]);\r\n\r\n    let headerRow = workSheet.addRow(headers);\r\n\r\n    headerRow.eachCell((cell, number) => {\r\n      cell.fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: \"FFFFFF00\" },\r\n        bgColor: { argb: \"FF0000FF\" },\r\n      };\r\n      cell.border = {\r\n        top: { style: \"thin\" },\r\n        left: { style: \"thin\" },\r\n        bottom: { style: \"thin\" },\r\n        right: { style: \"thin\" },\r\n      };\r\n    });\r\n\r\n    const serviceCol = workSheet.getColumn(2);\r\n\r\n    serviceCol.width = 20;\r\n\r\n    usersCsv.forEach((d) => {\r\n      let row = workSheet.addRow(d);\r\n      let qty = row.getCell(5);\r\n    });\r\n\r\n    workSheet.addRow([]);\r\n    let footer = workSheet.addRow(totalAmount);\r\n\r\n    footer.font = {\r\n      name: \"Roboto sans-serif\",\r\n      family: 4,\r\n      size: 10,\r\n    };\r\n\r\n    workbook.xlsx.writeBuffer().then((data) => {\r\n      let blob = new Blob([data], {\r\n        type:\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\r\n      });\r\n      fs.saveAs(\r\n        blob,\r\n        `${car?.carNumber}_${displayDateFormate(\r\n          carObj.date,\r\n        )}_Maintenance_History.xlsx`,\r\n      );\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <TableContainer>\r\n          <Table stickyHeader className=\"mb-0\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Date</TableCell>\r\n                <TableCell>Reading(in KM)</TableCell>\r\n                <TableCell>Servicing Center</TableCell>\r\n                <TableCell>Invoice Number</TableCell>\r\n                <TableCell>Tax</TableCell>\r\n                <TableCell>Payment Mode</TableCell>\r\n                <TableCell>Action</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {[...Array(10)].map((_, i) => {\r\n                return (\r\n                  <TableRow key={i}>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Skeleton variant=\"text\" />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      ) : (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Date</TableCell>\r\n                  <TableCell>Reading(in KM)</TableCell>\r\n                  <TableCell>Servicing Center</TableCell>\r\n                  <TableCell>Invoice Number</TableCell>\r\n                  <TableCell>Tax</TableCell>\r\n                  <TableCell>Payment Mode</TableCell>\r\n                  <TableCell>Action</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n\r\n              <TableBody>\r\n                {maintenanceList.map((m, i) => {\r\n                  return (\r\n                    <TableRow key={i}>\r\n                      <TableCell>{displayDateFormate(m.date)}</TableCell>\r\n                      <TableCell>{m.reading}</TableCell>\r\n                      <TableCell>{m.servicingCenterName}</TableCell>\r\n                      <TableCell>{m.invoiceNumber}</TableCell>\r\n                      <TableCell>\r\n                        <Typography>CSGT:{m.CGST}%</Typography>\r\n                        <Typography>SGST:{m.SGST}%</Typography>\r\n                      </TableCell>\r\n                      <TableCell>{m.paymentMode}</TableCell>\r\n                      <TableCell>\r\n                        {\" \"}\r\n                        <div className={classes.mainChartHeader}>\r\n                          <div className={classes.mainChartHeaderLabels}>\r\n                            <div>\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                className={classes.noPadding}\r\n                                onClick={() => {\r\n                                  setMaintenancesList(m);\r\n                                  setMaintenanceModal(true);\r\n                                }}\r\n                              >\r\n                                <ListIcon />\r\n                              </IconButton>\r\n                            </div>\r\n                            <div>\r\n                              <IconButton\r\n                                color=\"primary\"\r\n                                onClick={() => exportToCsv(m)}\r\n                                className={classes.noPadding}\r\n                              >\r\n                                <DownloadIcon />\r\n                              </IconButton>\r\n                            </div>\r\n                            <div>\r\n                              <Link\r\n                                to={`/app/carMaintenance/edit/${car._id}/${m._id}`}\r\n                              >\r\n                                <IconButton\r\n                                  color=\"primary\"\r\n                                  className={classes.noPadding}\r\n                                >\r\n                                  <TbEditCircle />\r\n                                </IconButton>\r\n                              </Link>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <Modal\r\n                        open={maintenancesModal}\r\n                        aria-labelledby=\"modal-modal-title\"\r\n                        aria-describedby=\"modal-modal-description\"\r\n                      >\r\n                        <Box sx={style}>\r\n                          <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-between\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Grid item xs={11}>\r\n                              <Typography\r\n                                style={{\r\n                                  margin: \"6px\",\r\n                                  fontWeight: \"bold\",\r\n                                }}\r\n                              >\r\n                                Total Amount:\r\n                                <FaRupeeSign />\r\n                                {maintenancesList?.totalAmount}\r\n                              </Typography>\r\n                            </Grid>\r\n                            <Grid item xs={1}>\r\n                              <Typography\r\n                                style={{\r\n                                  margin: \"6px\",\r\n                                  fontWidth: \"bold\",\r\n                                }}\r\n                              >\r\n                                <CloseIcon\r\n                                  style={{\r\n                                    cursor: \"pointer\",\r\n                                  }}\r\n                                  onClick={() => setMaintenanceModal(false)}\r\n                                />\r\n                              </Typography>\r\n                            </Grid>\r\n                          </Grid>\r\n                          <TableContainer>\r\n                            <Table stickyHeader className=\"mb-0\">\r\n                              <TableHead>\r\n                                <TableRow>\r\n                                  <TableCell>sr.No</TableCell>\r\n                                  <TableCell>Type</TableCell>\r\n                                  <TableCell>Quantity</TableCell>\r\n                                  <TableCell>Amount</TableCell>\r\n                                </TableRow>\r\n                              </TableHead>\r\n\r\n                              <TableBody>\r\n                                {maintenancesList?.maintenances?.map((m, i) => {\r\n                                  return (\r\n                                    <TableRow key={i}>\r\n                                      <TableCell>{i + 1}</TableCell>\r\n                                      <TableCell>{m.type}</TableCell>\r\n                                      <TableCell>{m.quantity}</TableCell>\r\n                                      <TableCell>{m.basicAmount}</TableCell>\r\n                                    </TableRow>\r\n                                  );\r\n                                })}\r\n                              </TableBody>\r\n                            </Table>\r\n                          </TableContainer>\r\n                        </Box>\r\n                      </Modal>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MaintenanceTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Add\\AddMaintenanceType.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\SidebarLink.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\dashboard\\components\\journeyTable\\JourneyTable.js",["573","574","575","576","577"],"import React, { useState, useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  getJourneyList,\r\n  updateJourney,\r\n} from \"../../../../Actions/journeyActions\";\r\nimport Skeleton from \"@mui/material/Skeleton\";\r\nimport {\r\n  Table,\r\n  TableRow,\r\n  TableHead,\r\n  TableBody,\r\n  TableCell,\r\n  Grid,\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogActions,\r\n  Button,\r\n  Slide,\r\n  TableContainer,\r\n  Paper,\r\n  Snackbar,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport {\r\n  CheckCircle as AcceptIcon,\r\n  Cancel as CloseIcon,\r\n} from \"@material-ui/icons\";\r\n\r\nimport useStyles from \"../../styles\";\r\nimport { displayDateFormate } from \"../../../../Services/DateFormate\";\r\nimport Widget from \"../../../../components/Widget/Widget\";\r\nimport Notification from \"../../../../components/Notification\";\r\n\r\nconst states = {\r\n  accepted: \"success\",\r\n  pending: \"warning\",\r\n  rejected: \"secondary\",\r\n};\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n  return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nconst JourneyTable = ({ keyword }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const [position, setPosition] = useState({\r\n    vertical: \"top\",\r\n    horizontal: \"right\",\r\n  });\r\n  const { vertical, horizontal } = position;\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [status, setStatus] = useState(\"\");\r\n  const [success, setSuccess] = useState(false);\r\n  const [statusId, setStatusId] = useState(\"\");\r\n  const [journey, setJourney] = useState(\"\");\r\n\r\n  const journeyList = useSelector((state) => state.journeyList);\r\n  const { loading, journeys, pendingJourneyCount } = journeyList;\r\n  const journeyUpdate = useSelector((state) => state.journeyUpdate);\r\n  const { loading: updateLoading } = journeyUpdate;\r\n\r\n  useEffect(() => {\r\n    dispatch(getJourneyList(keyword));\r\n  }, [dispatch, keyword]);\r\n\r\n  const classes = useStyles();\r\n\r\n  const updateStatus = () => {\r\n    dispatch(updateJourney(journey, status, statusId)).then(() =>\r\n      dispatch(getJourneyList()),\r\n    );\r\n    setShowAlert(false);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {loading ? (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Driver Name</TableCell>\r\n                  <TableCell>Date & Time</TableCell>\r\n                  <TableCell>Trip Description</TableCell>\r\n                  <TableCell>Start KM</TableCell>\r\n                  <TableCell>End KM</TableCell>\r\n                  <TableCell>Total Km</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {[...Array(10)].map((_, i) => {\r\n                  return (\r\n                    <TableRow key={i}>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Skeleton variant=\"text\" />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      ) : (\r\n        <Paper sx={{ width: \"100%\", overflow: \"hidden\", height: \"200px\" }}>\r\n          <>\r\n            <Snackbar\r\n              open={success}\r\n              autoHideDuration={1000}\r\n              onClose={() => setSuccess(false)}\r\n              anchorOrigin={{ vertical, horizontal }}\r\n            >\r\n              <Notification\r\n                className={classes.notificationItem}\r\n                shadowless\r\n                type={status === \"accepted\" ? \"info\" : \"delivered\"}\r\n                message={`Journey ${status.toUpperCase()}..!!`}\r\n                variant=\"contained\"\r\n                color={status === \"accepted\" ? \"success\" : \"secondary\"}\r\n              />\r\n            </Snackbar>\r\n          </>\r\n\r\n          <TableContainer>\r\n            <Table stickyHeader className=\"mb-0\">\r\n              <TableHead>\r\n                <TableRow>\r\n                  <TableCell>Driver Name</TableCell>\r\n                  <TableCell>Date & Time</TableCell>\r\n                  <TableCell>Trip Description</TableCell>\r\n                  <TableCell>Start KM</TableCell>\r\n                  <TableCell>End KM</TableCell>\r\n                  <TableCell>Total Km</TableCell>\r\n                  <TableCell>Actions</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {journeys?.map((j, i) => {\r\n                  if (j.journey.status === \"pending\") {\r\n                    return (\r\n                      <TableRow key={j._id}>\r\n                        <TableCell className=\"pl-3 fw-normal\">\r\n                          {j.driver.firstName} {j.driver.lastName}\r\n                        </TableCell>\r\n                        <TableCell>\r\n                          {displayDateFormate(j.journey.journeyDate)}{\" \"}\r\n                          {j.journey.journeyTime}\r\n                        </TableCell>\r\n\r\n                        {j.journey.startDestination.length >= 25 ? (\r\n                          <TableCell>\r\n                            {j.journey.startDestination.slice(0, 25)}...\r\n                          </TableCell>\r\n                        ) : (\r\n                          <TableCell>{j.journey.startDestination}</TableCell>\r\n                        )}\r\n                        {/* <TableCell>\r\n                     <p\r\n                       className=\"ellipsis\"\r\n                       data-text={j.journey.startDestination}\r\n                     >\r\n                       {j.journey.startDestination}\r\n                     </p>\r\n                   </TableCell> */}\r\n                        <TableCell>{j.journey.startReading}</TableCell>\r\n                        <TableCell>{j.journey.endReading}</TableCell>\r\n                        <TableCell>\r\n                          {j.journey.endReading - j.journey.startReading}\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <Grid\r\n                            container\r\n                            direction=\"row\"\r\n                            justify=\"space-between\"\r\n                            alignItems=\"center\"\r\n                          >\r\n                            <Grid item xs={6}>\r\n                              {\" \"}\r\n                              {/* <Chip\r\n                                onClick={() => {\r\n                                  setStatus(\"accepted\");\r\n                                  setSuccess(true);\r\n                                  // setJourney(j);\r\n                                  // setStatusId(j._id);\r\n                                  // setShowAlert(true);\r\n                                }}\r\n                                label={<AcceptIcon fontSize=\"20\" />}\r\n                                classes={{\r\n                                  root: classes[states[\"accepted\"]],\r\n                                }}\r\n                              /> */}\r\n                              <IconButton\r\n                                // classes={{\r\n                                //   root: classes[states[\"accepted\"]],\r\n                                // }}\r\n                                className={classes.noPadding}\r\n                                onClick={() => {\r\n                                  setStatus(\"accepted\");\r\n                                  // setSuccess(true);\r\n                                  setJourney(j);\r\n                                  setStatusId(j._id);\r\n                                  setShowAlert(true);\r\n                                }}\r\n                              >\r\n                                <AcceptIcon\r\n                                  classes={{\r\n                                    root: classes[states[\"accepted\"]],\r\n                                  }}\r\n                                />\r\n                              </IconButton>\r\n                            </Grid>\r\n                            <Grid item xs={6}>\r\n                              {/* <Chip\r\n                                onClick={() => {\r\n                                  setStatus(\"rejected\");\r\n                                  setSuccess(true);\r\n                                  setStatusId(j._id);\r\n                                  setJourney(j);\r\n                                  setShowAlert(true);\r\n                                }}\r\n                                label={<CloseIcon fontSize=\"20\" />}\r\n                                classes={{\r\n                                  root: classes[states[\"rejected\"]],\r\n                                }}\r\n                              /> */}\r\n                              <IconButton\r\n                                className={classes.noPadding}\r\n                                onClick={() => {\r\n                                  setStatus(\"rejected\");\r\n                                  setSuccess(true);\r\n                                  setStatusId(j._id);\r\n                                  setJourney(j);\r\n                                  setShowAlert(true);\r\n                                }}\r\n                              >\r\n                                <CloseIcon\r\n                                  classes={{\r\n                                    root: classes[states[\"rejected\"]],\r\n                                  }}\r\n                                />\r\n                              </IconButton>\r\n                            </Grid>\r\n                          </Grid>\r\n\r\n                          <Dialog\r\n                            onClose={() => setShowAlert(false)}\r\n                            open={showAlert}\r\n                            TransitionComponent={Transition}\r\n                          >\r\n                            <DialogTitle>{`Status will be changed to ${status?.toUpperCase()}..!!`}</DialogTitle>\r\n\r\n                            <DialogActions>\r\n                              <Button onClick={updateStatus}>OK</Button>\r\n                              <Button\r\n                                autoFocus\r\n                                onClick={() => setShowAlert(false)}\r\n                              >\r\n                                Cancel\r\n                              </Button>\r\n                            </DialogActions>\r\n                          </Dialog>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  }\r\n                })}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </Paper>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default JourneyTable;\r\n","C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\pages\\maintenance\\Edit\\EditMaintenanceType.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\UserAvatar\\UserAvatar.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Notification\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\UserAvatar\\styles.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\components\\Dot.js",[],"C:\\Users\\admin\\Desktop\\Deployment\\frontend\\src\\components\\Sidebar\\components\\SidebarLink\\styles.js",[],{"ruleId":"578","replacedBy":"579"},{"ruleId":"580","replacedBy":"581"},{"ruleId":"582","severity":1,"message":"583","line":54,"column":3,"nodeType":"584","messageId":"585","endLine":54,"endColumn":13},{"ruleId":"586","severity":1,"message":"587","line":1,"column":17,"nodeType":"588","messageId":"589","endLine":1,"endColumn":26},{"ruleId":"586","severity":1,"message":"590","line":1,"column":28,"nodeType":"588","messageId":"589","endLine":1,"endColumn":36},{"ruleId":"586","severity":1,"message":"591","line":3,"column":10,"nodeType":"588","messageId":"589","endLine":3,"endColumn":21},{"ruleId":"586","severity":1,"message":"592","line":23,"column":8,"nodeType":"588","messageId":"589","endLine":23,"endColumn":12},{"ruleId":"586","severity":1,"message":"593","line":25,"column":8,"nodeType":"588","messageId":"589","endLine":25,"endColumn":13},{"ruleId":"586","severity":1,"message":"594","line":26,"column":8,"nodeType":"588","messageId":"589","endLine":26,"endColumn":14},{"ruleId":"586","severity":1,"message":"591","line":14,"column":23,"nodeType":"588","messageId":"589","endLine":14,"endColumn":34},{"ruleId":"586","severity":1,"message":"595","line":30,"column":10,"nodeType":"588","messageId":"589","endLine":30,"endColumn":25},{"ruleId":"586","severity":1,"message":"596","line":30,"column":27,"nodeType":"588","messageId":"589","endLine":30,"endColumn":36},{"ruleId":"586","severity":1,"message":"597","line":36,"column":19,"nodeType":"588","messageId":"589","endLine":36,"endColumn":31},{"ruleId":"586","severity":1,"message":"598","line":37,"column":15,"nodeType":"588","messageId":"589","endLine":37,"endColumn":23},{"ruleId":"586","severity":1,"message":"599","line":1,"column":32,"nodeType":"588","messageId":"589","endLine":1,"endColumn":40},{"ruleId":"586","severity":1,"message":"600","line":10,"column":20,"nodeType":"588","messageId":"589","endLine":10,"endColumn":30},{"ruleId":"586","severity":1,"message":"601","line":26,"column":8,"nodeType":"588","messageId":"589","endLine":26,"endColumn":20},{"ruleId":"586","severity":1,"message":"602","line":45,"column":9,"nodeType":"588","messageId":"589","endLine":45,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":50,"column":11,"nodeType":"588","messageId":"589","endLine":50,"endColumn":19},{"ruleId":"586","severity":1,"message":"604","line":50,"column":21,"nodeType":"588","messageId":"589","endLine":50,"endColumn":31},{"ruleId":"586","severity":1,"message":"605","line":54,"column":10,"nodeType":"588","messageId":"589","endLine":54,"endColumn":26},{"ruleId":"586","severity":1,"message":"606","line":54,"column":28,"nodeType":"588","messageId":"589","endLine":54,"endColumn":47},{"ruleId":"586","severity":1,"message":"607","line":68,"column":10,"nodeType":"588","messageId":"589","endLine":68,"endColumn":17},{"ruleId":"586","severity":1,"message":"608","line":69,"column":10,"nodeType":"588","messageId":"589","endLine":69,"endColumn":19},{"ruleId":"586","severity":1,"message":"609","line":70,"column":10,"nodeType":"588","messageId":"589","endLine":70,"endColumn":17},{"ruleId":"586","severity":1,"message":"610","line":75,"column":14,"nodeType":"588","messageId":"589","endLine":75,"endColumn":31},{"ruleId":"586","severity":1,"message":"611","line":76,"column":12,"nodeType":"588","messageId":"589","endLine":76,"endColumn":27},{"ruleId":"586","severity":1,"message":"612","line":84,"column":14,"nodeType":"588","messageId":"589","endLine":84,"endColumn":42},{"ruleId":"586","severity":1,"message":"613","line":85,"column":12,"nodeType":"588","messageId":"589","endLine":85,"endColumn":38},{"ruleId":"586","severity":1,"message":"614","line":93,"column":14,"nodeType":"588","messageId":"589","endLine":93,"endColumn":41},{"ruleId":"615","severity":1,"message":"616","line":126,"column":6,"nodeType":"617","endLine":126,"endColumn":47,"suggestions":"618"},{"ruleId":"586","severity":1,"message":"619","line":21,"column":20,"nodeType":"588","messageId":"589","endLine":21,"endColumn":32},{"ruleId":"615","severity":1,"message":"620","line":45,"column":6,"nodeType":"617","endLine":45,"endColumn":41,"suggestions":"621"},{"ruleId":"586","severity":1,"message":"622","line":25,"column":10,"nodeType":"588","messageId":"589","endLine":25,"endColumn":15},{"ruleId":"586","severity":1,"message":"623","line":31,"column":21,"nodeType":"588","messageId":"589","endLine":31,"endColumn":33},{"ruleId":"586","severity":1,"message":"624","line":36,"column":8,"nodeType":"588","messageId":"589","endLine":36,"endColumn":20},{"ruleId":"586","severity":1,"message":"625","line":36,"column":22,"nodeType":"588","messageId":"589","endLine":36,"endColumn":35},{"ruleId":"586","severity":1,"message":"626","line":37,"column":10,"nodeType":"588","messageId":"589","endLine":37,"endColumn":17},{"ruleId":"586","severity":1,"message":"627","line":37,"column":19,"nodeType":"588","messageId":"589","endLine":37,"endColumn":29},{"ruleId":"615","severity":1,"message":"620","line":52,"column":6,"nodeType":"617","endLine":52,"endColumn":52,"suggestions":"628"},{"ruleId":"629","severity":1,"message":"630","line":58,"column":23,"nodeType":"631","messageId":"632","endLine":58,"endColumn":25},{"ruleId":"586","severity":1,"message":"633","line":112,"column":11,"nodeType":"588","messageId":"589","endLine":112,"endColumn":14},{"ruleId":"586","severity":1,"message":"609","line":33,"column":11,"nodeType":"588","messageId":"589","endLine":33,"endColumn":18},{"ruleId":"586","severity":1,"message":"633","line":104,"column":11,"nodeType":"588","messageId":"589","endLine":104,"endColumn":14},{"ruleId":"586","severity":1,"message":"626","line":27,"column":10,"nodeType":"588","messageId":"589","endLine":27,"endColumn":17},{"ruleId":"586","severity":1,"message":"627","line":27,"column":19,"nodeType":"588","messageId":"589","endLine":27,"endColumn":29},{"ruleId":"586","severity":1,"message":"624","line":28,"column":8,"nodeType":"588","messageId":"589","endLine":28,"endColumn":20},{"ruleId":"586","severity":1,"message":"625","line":28,"column":22,"nodeType":"588","messageId":"589","endLine":28,"endColumn":35},{"ruleId":"586","severity":1,"message":"634","line":30,"column":10,"nodeType":"588","messageId":"589","endLine":30,"endColumn":19},{"ruleId":"586","severity":1,"message":"635","line":30,"column":21,"nodeType":"588","messageId":"589","endLine":30,"endColumn":33},{"ruleId":"586","severity":1,"message":"636","line":21,"column":3,"nodeType":"588","messageId":"589","endLine":21,"endColumn":19},{"ruleId":"586","severity":1,"message":"637","line":27,"column":26,"nodeType":"588","messageId":"589","endLine":27,"endColumn":37},{"ruleId":"586","severity":1,"message":"638","line":28,"column":13,"nodeType":"588","messageId":"589","endLine":28,"endColumn":23},{"ruleId":"586","severity":1,"message":"639","line":29,"column":17,"nodeType":"588","messageId":"589","endLine":29,"endColumn":28},{"ruleId":"586","severity":1,"message":"640","line":39,"column":10,"nodeType":"588","messageId":"589","endLine":39,"endColumn":26},{"ruleId":"586","severity":1,"message":"641","line":54,"column":9,"nodeType":"588","messageId":"589","endLine":54,"endColumn":16},{"ruleId":"586","severity":1,"message":"642","line":80,"column":10,"nodeType":"588","messageId":"589","endLine":80,"endColumn":27},{"ruleId":"586","severity":1,"message":"643","line":80,"column":29,"nodeType":"588","messageId":"589","endLine":80,"endColumn":49},{"ruleId":"586","severity":1,"message":"644","line":87,"column":10,"nodeType":"588","messageId":"589","endLine":87,"endColumn":33},{"ruleId":"586","severity":1,"message":"645","line":87,"column":35,"nodeType":"588","messageId":"589","endLine":87,"endColumn":61},{"ruleId":"586","severity":1,"message":"646","line":91,"column":10,"nodeType":"588","messageId":"589","endLine":91,"endColumn":31},{"ruleId":"586","severity":1,"message":"647","line":91,"column":33,"nodeType":"588","messageId":"589","endLine":91,"endColumn":57},{"ruleId":"586","severity":1,"message":"648","line":95,"column":10,"nodeType":"588","messageId":"589","endLine":95,"endColumn":29},{"ruleId":"586","severity":1,"message":"649","line":95,"column":31,"nodeType":"588","messageId":"589","endLine":95,"endColumn":53},{"ruleId":"586","severity":1,"message":"650","line":98,"column":11,"nodeType":"588","messageId":"589","endLine":98,"endColumn":18},{"ruleId":"586","severity":1,"message":"637","line":19,"column":26,"nodeType":"588","messageId":"589","endLine":19,"endColumn":37},{"ruleId":"586","severity":1,"message":"638","line":20,"column":13,"nodeType":"588","messageId":"589","endLine":20,"endColumn":23},{"ruleId":"586","severity":1,"message":"651","line":22,"column":3,"nodeType":"588","messageId":"589","endLine":22,"endColumn":13},{"ruleId":"586","severity":1,"message":"652","line":23,"column":3,"nodeType":"588","messageId":"589","endLine":23,"endColumn":16},{"ruleId":"586","severity":1,"message":"653","line":26,"column":19,"nodeType":"588","messageId":"589","endLine":26,"endColumn":27},{"ruleId":"586","severity":1,"message":"600","line":28,"column":20,"nodeType":"588","messageId":"589","endLine":28,"endColumn":30},{"ruleId":"586","severity":1,"message":"641","line":55,"column":9,"nodeType":"588","messageId":"589","endLine":55,"endColumn":16},{"ruleId":"586","severity":1,"message":"654","line":58,"column":17,"nodeType":"588","messageId":"589","endLine":58,"endColumn":25},{"ruleId":"586","severity":1,"message":"655","line":64,"column":10,"nodeType":"588","messageId":"589","endLine":64,"endColumn":27},{"ruleId":"586","severity":1,"message":"656","line":64,"column":29,"nodeType":"588","messageId":"589","endLine":64,"endColumn":49},{"ruleId":"586","severity":1,"message":"657","line":71,"column":10,"nodeType":"588","messageId":"589","endLine":71,"endColumn":34},{"ruleId":"586","severity":1,"message":"658","line":71,"column":36,"nodeType":"588","messageId":"589","endLine":71,"endColumn":63},{"ruleId":"586","severity":1,"message":"659","line":76,"column":5,"nodeType":"588","messageId":"589","endLine":76,"endColumn":32},{"ruleId":"586","severity":1,"message":"660","line":77,"column":5,"nodeType":"588","messageId":"589","endLine":77,"endColumn":35},{"ruleId":"586","severity":1,"message":"661","line":102,"column":14,"nodeType":"588","messageId":"589","endLine":102,"endColumn":27},{"ruleId":"586","severity":1,"message":"662","line":103,"column":12,"nodeType":"588","messageId":"589","endLine":103,"endColumn":23},{"ruleId":"586","severity":1,"message":"650","line":107,"column":11,"nodeType":"588","messageId":"589","endLine":107,"endColumn":18},{"ruleId":"586","severity":1,"message":"663","line":18,"column":19,"nodeType":"588","messageId":"589","endLine":18,"endColumn":26},{"ruleId":"586","severity":1,"message":"664","line":19,"column":34,"nodeType":"588","messageId":"589","endLine":19,"endColumn":44},{"ruleId":"586","severity":1,"message":"637","line":21,"column":26,"nodeType":"588","messageId":"589","endLine":21,"endColumn":37},{"ruleId":"586","severity":1,"message":"638","line":22,"column":13,"nodeType":"588","messageId":"589","endLine":22,"endColumn":23},{"ruleId":"586","severity":1,"message":"651","line":24,"column":3,"nodeType":"588","messageId":"589","endLine":24,"endColumn":13},{"ruleId":"586","severity":1,"message":"652","line":25,"column":3,"nodeType":"588","messageId":"589","endLine":25,"endColumn":16},{"ruleId":"586","severity":1,"message":"653","line":28,"column":19,"nodeType":"588","messageId":"589","endLine":28,"endColumn":27},{"ruleId":"586","severity":1,"message":"665","line":80,"column":9,"nodeType":"588","messageId":"589","endLine":80,"endColumn":14},{"ruleId":"586","severity":1,"message":"637","line":22,"column":26,"nodeType":"588","messageId":"589","endLine":22,"endColumn":37},{"ruleId":"586","severity":1,"message":"638","line":23,"column":13,"nodeType":"588","messageId":"589","endLine":23,"endColumn":23},{"ruleId":"586","severity":1,"message":"639","line":25,"column":17,"nodeType":"588","messageId":"589","endLine":25,"endColumn":28},{"ruleId":"586","severity":1,"message":"666","line":69,"column":11,"nodeType":"588","messageId":"589","endLine":69,"endColumn":22},{"ruleId":"586","severity":1,"message":"587","line":1,"column":17,"nodeType":"588","messageId":"589","endLine":1,"endColumn":26},{"ruleId":"586","severity":1,"message":"667","line":21,"column":9,"nodeType":"588","messageId":"589","endLine":21,"endColumn":17},{"ruleId":"586","severity":1,"message":"626","line":28,"column":10,"nodeType":"588","messageId":"589","endLine":28,"endColumn":17},{"ruleId":"586","severity":1,"message":"627","line":28,"column":19,"nodeType":"588","messageId":"589","endLine":28,"endColumn":29},{"ruleId":"586","severity":1,"message":"624","line":29,"column":8,"nodeType":"588","messageId":"589","endLine":29,"endColumn":20},{"ruleId":"586","severity":1,"message":"625","line":29,"column":22,"nodeType":"588","messageId":"589","endLine":29,"endColumn":35},{"ruleId":"586","severity":1,"message":"634","line":31,"column":10,"nodeType":"588","messageId":"589","endLine":31,"endColumn":19},{"ruleId":"586","severity":1,"message":"668","line":68,"column":9,"nodeType":"588","messageId":"589","endLine":68,"endColumn":16},{"ruleId":"586","severity":1,"message":"599","line":20,"column":3,"nodeType":"588","messageId":"589","endLine":20,"endColumn":11},{"ruleId":"586","severity":1,"message":"669","line":34,"column":13,"nodeType":"588","messageId":"589","endLine":34,"endColumn":23},{"ruleId":"586","severity":1,"message":"602","line":62,"column":9,"nodeType":"588","messageId":"589","endLine":62,"endColumn":16},{"ruleId":"586","severity":1,"message":"641","line":63,"column":9,"nodeType":"588","messageId":"589","endLine":63,"endColumn":16},{"ruleId":"586","severity":1,"message":"603","line":69,"column":11,"nodeType":"588","messageId":"589","endLine":69,"endColumn":19},{"ruleId":"586","severity":1,"message":"604","line":69,"column":21,"nodeType":"588","messageId":"589","endLine":69,"endColumn":31},{"ruleId":"586","severity":1,"message":"609","line":90,"column":10,"nodeType":"588","messageId":"589","endLine":90,"endColumn":17},{"ruleId":"586","severity":1,"message":"607","line":91,"column":10,"nodeType":"588","messageId":"589","endLine":91,"endColumn":17},{"ruleId":"586","severity":1,"message":"665","line":94,"column":20,"nodeType":"588","messageId":"589","endLine":94,"endColumn":25},{"ruleId":"586","severity":1,"message":"610","line":98,"column":14,"nodeType":"588","messageId":"589","endLine":98,"endColumn":31},{"ruleId":"586","severity":1,"message":"611","line":99,"column":12,"nodeType":"588","messageId":"589","endLine":99,"endColumn":27},{"ruleId":"586","severity":1,"message":"670","line":104,"column":20,"nodeType":"588","messageId":"589","endLine":104,"endColumn":34},{"ruleId":"586","severity":1,"message":"671","line":104,"column":43,"nodeType":"588","messageId":"589","endLine":104,"endColumn":55},{"ruleId":"586","severity":1,"message":"672","line":108,"column":14,"nodeType":"588","messageId":"589","endLine":108,"endColumn":33},{"ruleId":"586","severity":1,"message":"673","line":109,"column":12,"nodeType":"588","messageId":"589","endLine":109,"endColumn":29},{"ruleId":"586","severity":1,"message":"674","line":115,"column":14,"nodeType":"588","messageId":"589","endLine":115,"endColumn":30},{"ruleId":"586","severity":1,"message":"675","line":116,"column":12,"nodeType":"588","messageId":"589","endLine":116,"endColumn":26},{"ruleId":"615","severity":1,"message":"676","line":155,"column":6,"nodeType":"617","endLine":155,"endColumn":67,"suggestions":"677"},{"ruleId":"629","severity":1,"message":"678","line":703,"column":35,"nodeType":"631","messageId":"679","endLine":703,"endColumn":37},{"ruleId":"586","severity":1,"message":"680","line":2,"column":20,"nodeType":"588","messageId":"589","endLine":2,"endColumn":28},{"ruleId":"586","severity":1,"message":"587","line":1,"column":27,"nodeType":"588","messageId":"589","endLine":1,"endColumn":36},{"ruleId":"586","severity":1,"message":"681","line":4,"column":3,"nodeType":"588","messageId":"589","endLine":4,"endColumn":7},{"ruleId":"586","severity":1,"message":"682","line":28,"column":3,"nodeType":"588","messageId":"589","endLine":28,"endColumn":13},{"ruleId":"586","severity":1,"message":"683","line":29,"column":3,"nodeType":"588","messageId":"589","endLine":29,"endColumn":26},{"ruleId":"586","severity":1,"message":"591","line":31,"column":23,"nodeType":"588","messageId":"589","endLine":31,"endColumn":34},{"ruleId":"586","severity":1,"message":"667","line":49,"column":9,"nodeType":"588","messageId":"589","endLine":49,"endColumn":17},{"ruleId":"586","severity":1,"message":"684","line":53,"column":10,"nodeType":"588","messageId":"589","endLine":53,"endColumn":20},{"ruleId":"586","severity":1,"message":"634","line":54,"column":10,"nodeType":"588","messageId":"589","endLine":54,"endColumn":19},{"ruleId":"586","severity":1,"message":"635","line":54,"column":21,"nodeType":"588","messageId":"589","endLine":54,"endColumn":33},{"ruleId":"586","severity":1,"message":"685","line":55,"column":10,"nodeType":"588","messageId":"589","endLine":55,"endColumn":22},{"ruleId":"586","severity":1,"message":"686","line":55,"column":24,"nodeType":"588","messageId":"589","endLine":55,"endColumn":39},{"ruleId":"586","severity":1,"message":"687","line":56,"column":10,"nodeType":"588","messageId":"589","endLine":56,"endColumn":27},{"ruleId":"586","severity":1,"message":"688","line":57,"column":10,"nodeType":"588","messageId":"589","endLine":57,"endColumn":19},{"ruleId":"586","severity":1,"message":"689","line":57,"column":21,"nodeType":"588","messageId":"589","endLine":57,"endColumn":33},{"ruleId":"586","severity":1,"message":"690","line":58,"column":10,"nodeType":"588","messageId":"589","endLine":58,"endColumn":17},{"ruleId":"586","severity":1,"message":"691","line":58,"column":19,"nodeType":"588","messageId":"589","endLine":58,"endColumn":29},{"ruleId":"586","severity":1,"message":"692","line":59,"column":18,"nodeType":"588","messageId":"589","endLine":59,"endColumn":27},{"ruleId":"586","severity":1,"message":"693","line":61,"column":10,"nodeType":"588","messageId":"589","endLine":61,"endColumn":17},{"ruleId":"586","severity":1,"message":"694","line":61,"column":19,"nodeType":"588","messageId":"589","endLine":61,"endColumn":29},{"ruleId":"586","severity":1,"message":"695","line":62,"column":10,"nodeType":"588","messageId":"589","endLine":62,"endColumn":18},{"ruleId":"586","severity":1,"message":"696","line":62,"column":20,"nodeType":"588","messageId":"589","endLine":62,"endColumn":31},{"ruleId":"586","severity":1,"message":"697","line":63,"column":10,"nodeType":"588","messageId":"589","endLine":63,"endColumn":16},{"ruleId":"586","severity":1,"message":"698","line":63,"column":18,"nodeType":"588","messageId":"589","endLine":63,"endColumn":27},{"ruleId":"586","severity":1,"message":"699","line":64,"column":10,"nodeType":"588","messageId":"589","endLine":64,"endColumn":16},{"ruleId":"586","severity":1,"message":"700","line":64,"column":18,"nodeType":"588","messageId":"589","endLine":64,"endColumn":27},{"ruleId":"586","severity":1,"message":"701","line":77,"column":9,"nodeType":"588","messageId":"589","endLine":77,"endColumn":32},{"ruleId":"586","severity":1,"message":"702","line":83,"column":9,"nodeType":"588","messageId":"589","endLine":83,"endColumn":20},{"ruleId":"586","severity":1,"message":"703","line":84,"column":9,"nodeType":"588","messageId":"589","endLine":84,"endColumn":14},{"ruleId":"586","severity":1,"message":"704","line":86,"column":9,"nodeType":"588","messageId":"589","endLine":86,"endColumn":16},{"ruleId":"586","severity":1,"message":"705","line":87,"column":9,"nodeType":"588","messageId":"589","endLine":87,"endColumn":21},{"ruleId":"586","severity":1,"message":"706","line":89,"column":9,"nodeType":"588","messageId":"589","endLine":89,"endColumn":17},{"ruleId":"586","severity":1,"message":"707","line":13,"column":18,"nodeType":"588","messageId":"589","endLine":13,"endColumn":28},{"ruleId":"586","severity":1,"message":"708","line":14,"column":13,"nodeType":"588","messageId":"589","endLine":14,"endColumn":22},{"ruleId":"586","severity":1,"message":"709","line":16,"column":10,"nodeType":"588","messageId":"589","endLine":16,"endColumn":20},{"ruleId":"586","severity":1,"message":"602","line":21,"column":7,"nodeType":"588","messageId":"589","endLine":21,"endColumn":14},{"ruleId":"629","severity":1,"message":"678","line":92,"column":39,"nodeType":"631","messageId":"679","endLine":92,"endColumn":41},{"ruleId":"586","severity":1,"message":"671","line":35,"column":43,"nodeType":"588","messageId":"589","endLine":35,"endColumn":55},{"ruleId":"615","severity":1,"message":"710","line":49,"column":6,"nodeType":"617","endLine":49,"endColumn":16,"suggestions":"711"},{"ruleId":"629","severity":1,"message":"630","line":54,"column":20,"nodeType":"631","messageId":"632","endLine":54,"endColumn":22},{"ruleId":"629","severity":1,"message":"630","line":67,"column":21,"nodeType":"631","messageId":"632","endLine":67,"endColumn":23},{"ruleId":"712","severity":1,"message":"713","line":85,"column":7,"nodeType":"588","messageId":"714","endLine":85,"endColumn":14},{"ruleId":"586","severity":1,"message":"667","line":86,"column":9,"nodeType":"588","messageId":"589","endLine":86,"endColumn":17},{"ruleId":"586","severity":1,"message":"715","line":6,"column":3,"nodeType":"588","messageId":"589","endLine":6,"endColumn":12},{"ruleId":"586","severity":1,"message":"716","line":10,"column":3,"nodeType":"588","messageId":"589","endLine":10,"endColumn":7},{"ruleId":"586","severity":1,"message":"717","line":14,"column":18,"nodeType":"588","messageId":"589","endLine":14,"endColumn":26},{"ruleId":"586","severity":1,"message":"718","line":17,"column":13,"nodeType":"588","messageId":"589","endLine":17,"endColumn":23},{"ruleId":"586","severity":1,"message":"719","line":27,"column":29,"nodeType":"588","messageId":"589","endLine":27,"endColumn":35},{"ruleId":"586","severity":1,"message":"601","line":28,"column":8,"nodeType":"588","messageId":"589","endLine":28,"endColumn":20},{"ruleId":"586","severity":1,"message":"720","line":72,"column":7,"nodeType":"588","messageId":"589","endLine":72,"endColumn":20},{"ruleId":"586","severity":1,"message":"721","line":102,"column":10,"nodeType":"588","messageId":"589","endLine":102,"endColumn":22},{"ruleId":"586","severity":1,"message":"722","line":102,"column":24,"nodeType":"588","messageId":"589","endLine":102,"endColumn":39},{"ruleId":"586","severity":1,"message":"665","line":105,"column":11,"nodeType":"588","messageId":"589","endLine":105,"endColumn":16},{"ruleId":"615","severity":1,"message":"723","line":117,"column":6,"nodeType":"617","endLine":117,"endColumn":16,"suggestions":"724"},{"ruleId":"629","severity":1,"message":"630","line":121,"column":22,"nodeType":"631","messageId":"632","endLine":121,"endColumn":24},{"ruleId":"586","severity":1,"message":"725","line":4,"column":3,"nodeType":"588","messageId":"589","endLine":4,"endColumn":13},{"ruleId":"586","severity":1,"message":"726","line":9,"column":22,"nodeType":"588","messageId":"589","endLine":9,"endColumn":30},{"ruleId":"586","severity":1,"message":"727","line":31,"column":23,"nodeType":"588","messageId":"589","endLine":31,"endColumn":39},{"ruleId":"586","severity":1,"message":"709","line":5,"column":10,"nodeType":"588","messageId":"589","endLine":5,"endColumn":20},{"ruleId":"586","severity":1,"message":"709","line":5,"column":10,"nodeType":"588","messageId":"589","endLine":5,"endColumn":20},{"ruleId":"586","severity":1,"message":"728","line":49,"column":10,"nodeType":"588","messageId":"589","endLine":49,"endColumn":21},{"ruleId":"586","severity":1,"message":"674","line":31,"column":14,"nodeType":"588","messageId":"589","endLine":31,"endColumn":30},{"ruleId":"586","severity":1,"message":"675","line":32,"column":12,"nodeType":"588","messageId":"589","endLine":32,"endColumn":26},{"ruleId":"586","severity":1,"message":"729","line":33,"column":14,"nodeType":"588","messageId":"589","endLine":33,"endColumn":30},{"ruleId":"586","severity":1,"message":"610","line":38,"column":14,"nodeType":"588","messageId":"589","endLine":38,"endColumn":31},{"ruleId":"586","severity":1,"message":"611","line":39,"column":12,"nodeType":"588","messageId":"589","endLine":39,"endColumn":27},{"ruleId":"586","severity":1,"message":"709","line":7,"column":3,"nodeType":"588","messageId":"589","endLine":7,"endColumn":13},{"ruleId":"629","severity":1,"message":"678","line":87,"column":39,"nodeType":"631","messageId":"679","endLine":87,"endColumn":41},{"ruleId":"586","severity":1,"message":"680","line":2,"column":20,"nodeType":"588","messageId":"589","endLine":2,"endColumn":28},{"ruleId":"586","severity":1,"message":"709","line":9,"column":3,"nodeType":"588","messageId":"589","endLine":9,"endColumn":13},{"ruleId":"586","severity":1,"message":"665","line":46,"column":20,"nodeType":"588","messageId":"589","endLine":46,"endColumn":25},{"ruleId":"586","severity":1,"message":"671","line":48,"column":43,"nodeType":"588","messageId":"589","endLine":48,"endColumn":55},{"ruleId":"629","severity":1,"message":"678","line":178,"column":35,"nodeType":"631","messageId":"679","endLine":178,"endColumn":37},{"ruleId":"629","severity":1,"message":"678","line":187,"column":49,"nodeType":"631","messageId":"679","endLine":187,"endColumn":51},{"ruleId":"629","severity":1,"message":"678","line":255,"column":35,"nodeType":"631","messageId":"679","endLine":255,"endColumn":37},{"ruleId":"629","severity":1,"message":"678","line":264,"column":49,"nodeType":"631","messageId":"679","endLine":264,"endColumn":51},{"ruleId":"586","severity":1,"message":"633","line":143,"column":11,"nodeType":"588","messageId":"589","endLine":143,"endColumn":14},{"ruleId":"586","severity":1,"message":"730","line":32,"column":8,"nodeType":"588","messageId":"589","endLine":32,"endColumn":14},{"ruleId":"586","severity":1,"message":"731","line":48,"column":20,"nodeType":"588","messageId":"589","endLine":48,"endColumn":31},{"ruleId":"586","severity":1,"message":"732","line":60,"column":30,"nodeType":"588","messageId":"589","endLine":60,"endColumn":49},{"ruleId":"586","severity":1,"message":"733","line":62,"column":20,"nodeType":"588","messageId":"589","endLine":62,"endColumn":33},{"ruleId":"629","severity":1,"message":"678","line":160,"column":39,"nodeType":"631","messageId":"679","endLine":160,"endColumn":41},"no-native-reassign",["734"],"no-negated-in-lhs",["735"],"no-dupe-keys","Duplicate key 'adminLogin'.","ObjectExpression","unexpected","no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'useSelector' is defined but never used.","'Maps' is defined but never used.","'Icons' is defined but never used.","'Charts' is defined but never used.","'isAuthenticated' is assigned a value but never used.","'setIsAuth' is assigned a value but never used.","'setIsLoading' is assigned a value but never used.","'setError' is assigned a value but never used.","'Snackbar' is defined but never used.","'SubmitIcon' is defined but never used.","'Notification' is defined but never used.","'classes' is assigned a value but never used.","'vertical' is assigned a value but never used.","'horizontal' is assigned a value but never used.","'modalMaintenance' is assigned a value but never used.","'setModalMaintenance' is assigned a value but never used.","'message' is assigned a value but never used.","'showToast' is assigned a value but never used.","'success' is assigned a value but never used.","'carDetailsLoading' is assigned a value but never used.","'carDetailsError' is assigned a value but never used.","'carMaintenanceDetailsLoading' is assigned a value but never used.","'carMaintenanceDetailsError' is assigned a value but never used.","'carUpdateMaintenanceLoading' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'car._id', 'car.carName', 'carId', 'carUpdateMaintenanceError', 'maintenanceId', and 'maintenanceTypes'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setAmountAddition' needs the current value of 'maintenanceTypes'.","ArrayExpression",["736"],"'DownloadIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'searchMaintenance'. Either include it or remove the dependency array.",["737"],"'Modal' is defined but never used.","'setSelectCar' is assigned a value but never used.","'isSearchOpen' is assigned a value but never used.","'setSearchOpen' is assigned a value but never used.","'keyword' is assigned a value but never used.","'setKeyword' is assigned a value but never used.",["738"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'qty' is assigned a value but never used.","'showModal' is assigned a value but never used.","'setShowModal' is assigned a value but never used.","'saveStep1Details' is defined but never used.","'ContactIcon' is defined but never used.","'PersonIcon' is defined but never used.","'LicenseIcon' is defined but never used.","'CAR_UPDATE_RESET' is defined but never used.","'history' is assigned a value but never used.","'PUCImageUploading' is assigned a value but never used.","'setPUCImageUploading' is assigned a value but never used.","'insuranceImageUploading' is assigned a value but never used.","'setInsuranceImageUploading' is assigned a value but never used.","'carRCTCImageUploading' is assigned a value but never used.","'setCarRCTCImageUploading' is assigned a value but never used.","'carRCImageUploading' is assigned a value but never used.","'setCarRCImageUploading' is assigned a value but never used.","'loading' is assigned a value but never used.","'Visibility' is defined but never used.","'VisibilityOff' is defined but never used.","'NextIcon' is defined but never used.","'setStep1' is assigned a value but never used.","'carImageUploading' is assigned a value but never used.","'setCarImageUploading' is assigned a value but never used.","'carFitnessImageUploading' is assigned a value but never used.","'setCarFitnessImageUploading' is assigned a value but never used.","'carPurchaseInvoiceUploading' is assigned a value but never used.","'setCarPurchaseInvoiceUploading' is assigned a value but never used.","'loadingUpdate' is assigned a value but never used.","'errorUpdate' is assigned a value but never used.","'CarIcon' is defined but never used.","'NumberIcon' is defined but never used.","'error' is assigned a value but never used.","'formDetails' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'journey' is defined but never used.","'DeleteIcon' is defined but never used.","'carListLoading' is assigned a value but never used.","'carListError' is assigned a value but never used.","'driverUpdateLoading' is assigned a value but never used.","'driverUpdateError' is assigned a value but never used.","'carUpdateLoading' is assigned a value but never used.","'carUpdateError' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'password'. Either include it or remove the dependency array. You can also do a functional update 'setPassword(p => ...)' if you only need 'password' in the 'setPassword' call.",["739"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'BASE_URL' is defined but never used.","'Chip' is defined but never used.","'getExpense' is defined but never used.","'updateExpenseDepartment' is defined but never used.","'department' is assigned a value but never used.","'expenseImage' is assigned a value but never used.","'setExpenseImage' is assigned a value but never used.","'showDownloadModal' is assigned a value but never used.","'startDate' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'endDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","'setStatus' is assigned a value but never used.","'expense' is assigned a value but never used.","'setExpense' is assigned a value but never used.","'statusId' is assigned a value but never used.","'setStatusId' is assigned a value but never used.","'driver' is assigned a value but never used.","'setDriver' is assigned a value but never used.","'loader' is assigned a value but never used.","'setLoader' is assigned a value but never used.","'updateDepartmentHandler' is assigned a value but never used.","'exportToCsv' is assigned a value but never used.","'title' is assigned a value but never used.","'headers' is assigned a value but never used.","'expenseTypes' is defined but never used.","'usersCsv' is assigned a value but never used.","'AcceptIcon' is defined but never used.","'CloseIcon' is defined but never used.","'Typography' is defined but never used.","React Hook useEffect has a missing dependency: 'calculateCount'. Either include it or remove the dependency array.",["740"],"no-redeclare","'classes' is already defined.","redeclared","'InputBase' is defined but never used.","'Link' is defined but never used.","'MailIcon' is defined but never used.","'SearchIcon' is defined but never used.","'Button' is defined but never used.","'notifications' is assigned a value but never used.","'notification' is assigned a value but never used.","'setNotification' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'driversArray'. Either include it or remove the dependency array.",["741"],"'IconButton' is defined but never used.","'MoreIcon' is defined but never used.","'setMoreButtonRef' is assigned a value but never used.","'showPopover' is assigned a value but never used.","'carUpdateSuccess' is assigned a value but never used.","'Widget' is defined but never used.","'setPosition' is assigned a value but never used.","'pendingJourneyCount' is assigned a value but never used.","'updateLoading' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"742","fix":"743"},{"desc":"744","fix":"745"},{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},"Update the dependencies array to be: [car._id, car.carName, carId, carUpdateMaintenanceError, dispatch, maintenanceId, maintenanceObj, maintenanceTypes, successUpdate]",{"range":"754","text":"755"},"Update the dependencies array to be: [dispatch, car, startDate, endDate, searchMaintenance]",{"range":"756","text":"757"},"Update the dependencies array to be: [dispatch, selectCar, car, endDate, startDate, searchMaintenance]",{"range":"758","text":"759"},"Update the dependencies array to be: [dispatch, driver, driverUpdateSuccess, carUpdateSuccess, id, password]",{"range":"760","text":"761"},"Update the dependencies array to be: [calculateCount, dispatch]",{"range":"762","text":"763"},"Update the dependencies array to be: [dispatch, driversArray]",{"range":"764","text":"765"},[4507,4548],"[car._id, car.carName, carId, carUpdateMaintenanceError, dispatch, maintenanceId, maintenanceObj, maintenanceTypes, successUpdate]",[1534,1569],"[dispatch, car, startDate, endDate, searchMaintenance]",[1859,1905],"[dispatch, selectCar, car, endDate, startDate, searchMaintenance]",[5093,5154],"[dispatch, driver, driverUpdateSuccess, carUpdateSuccess, id, password]",[1946,1956],"[calculateCount, dispatch]",[2935,2945],"[dispatch, driversArray]"]